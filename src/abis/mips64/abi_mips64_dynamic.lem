open import Basic_classes
open import Num
open import String

open import Error
open import Missing_pervasives
open import Show
open import String_table

open import Elf_dynamic
open import Elf_types_native_uint

(* Legal values for d_tag field of Elf32_Dyn. *)

let abi_mips64_dt_rld_version : natural = natural_of_hex "0x70000001" (** Runtime linker interface version *)
let abi_mips64_dt_time_stamp : natural = natural_of_hex "0x70000002" (** Timestamp *)
let abi_mips64_dt_ichecksum : natural = natural_of_hex "0x70000003" (** Checksum *)
let abi_mips64_dt_iversion : natural = natural_of_hex "0x70000004" (** Version string (string tbl index) *)
let abi_mips64_dt_flags : natural = natural_of_hex "0x70000005" (** Flags *)
let abi_mips64_dt_base_address : natural = natural_of_hex "0x70000006" (** Base address *)
let abi_mips64_dt_msym : natural = natural_of_hex "0x70000007"
let abi_mips64_dt_conflict : natural = natural_of_hex "0x70000008" (** Address of CONFLICT section *)
let abi_mips64_dt_liblist : natural = natural_of_hex "0x70000009" (** Address of LIBLIST section *)
let abi_mips64_dt_local_gotno : natural = natural_of_hex "0x7000000a" (** Number of local GOT entries *)
let abi_mips64_dt_conflictno : natural = natural_of_hex "0x7000000b" (** Number of CONFLICT entries *)
let abi_mips64_dt_liblistno : natural = natural_of_hex "0x70000010" (** Number of LIBLIST entries *)
let abi_mips64_dt_symtabno : natural = natural_of_hex "0x70000011" (** Number of DYNSYM entries *)
let abi_mips64_dt_unrefextno : natural = natural_of_hex "0x70000012" (** First external DYNSYM *)
let abi_mips64_dt_gotsym : natural = natural_of_hex "0x70000013" (** First GOT entry in DYNSYM *)
let abi_mips64_dt_hipageno : natural = natural_of_hex "0x70000014" (** Number of GOT page table entries *)
let abi_mips64_dt_rld_map : natural = natural_of_hex "0x70000016" (** Address of run time loader map.  *)
let abi_mips64_dt_delta_class : natural = natural_of_hex "0x70000017" (** Delta C++ class definition.  *)
let abi_mips64_dt_delta_class_no : natural = natural_of_hex "0x70000018" (** Number of entries in DT_MIPS_DELTA_CLASS.  *)
let abi_mips64_dt_delta_instance : natural = natural_of_hex "0x70000019" (** Delta C++ class instances.  *)
let abi_mips64_dt_delta_instance_no : natural = natural_of_hex "0x7000001a" (** Number of entries in DT_MIPS_DELTA_INSTANCE.  *)
let abi_mips64_dt_delta_reloc : natural = natural_of_hex "0x7000001b" (** Delta relocations.  *)
let abi_mips64_dt_delta_reloc_no : natural = natural_of_hex "0x7000001c" (** Number of entries in DT_MIPS_DELTA_RELOC.  *)
let abi_mips64_dt_delta_sym : natural = natural_of_hex "0x7000001d" (** Delta symbols that Delta relocations refer to.  *)
let abi_mips64_dt_delta_sym_no : natural = natural_of_hex "0x7000001e" (** Number of entries in DT_MIPS_DELTA_SYM.  *)
let abi_mips64_dt_delta_classsym : natural = natural_of_hex "0x70000020" (** Delta symbols that hold the class declaration.  *)
let abi_mips64_dt_delta_classsym_no : natural = natural_of_hex "0x70000021" (** Number of entries in DT_MIPS_DELTA_CLASSSYM.  *)
let abi_mips64_dt_cxx_flags : natural = natural_of_hex "0x70000022" (** Flags indicating for C++ flavor.  *)
let abi_mips64_dt_pixie_init : natural = natural_of_hex "0x70000023"
let abi_mips64_dt_symbol_lib : natural = natural_of_hex "0x70000024"
let abi_mips64_dt_localpage_gotidx : natural = natural_of_hex "0x70000025"
let abi_mips64_dt_local_gotidx : natural = natural_of_hex "0x70000026"
let abi_mips64_dt_hidden_gotidx : natural = natural_of_hex "0x70000027"
let abi_mips64_dt_protected_gotidx : natural = natural_of_hex "0x70000028"
let abi_mips64_dt_options : natural = natural_of_hex "0x70000029" (** Address of .options.  *)
let abi_mips64_dt_interface : natural = natural_of_hex "0x7000002a" (** Address of .interface.  *)
let abi_mips64_dt_dynstr_align : natural = natural_of_hex "0x7000002b"
let abi_mips64_dt_interface_size : natural = natural_of_hex "0x7000002c" (** Size of the .interface section. *)
(** Address of rld_text_rsolve function stored in GOT.  *)
let abi_mips64_dt_rld_text_resolve_addr : natural = natural_of_hex "0x7000002d"
(** Default suffix of dso to be added by rld on dlopen() calls.  *)
let abi_mips64_dt_perf_suffix : natural = natural_of_hex "0x7000002e"
let abi_mips64_dt_compact_size : natural = natural_of_hex "0x7000002f" (** (O32)Size of compact rel section. *)
let abi_mips64_dt_gp_value : natural = natural_of_hex "0x70000030" (** GP value for aux GOTs.  *)
let abi_mips64_dt_aux_dynamic : natural = natural_of_hex "0x70000031" (** Address of aux .dynamic.  *)
(** The address of .got.plt in an executable using the new non-PIC ABI.  *)
let abi_mips64_dt_pltgot : natural = natural_of_hex "0x70000032"
(** The base of the PLT in an executable using the new non-PIC ABI if that
    PLT is writable.  For a non-writable PLT, this is omitted or has a zero
    value.  *)
let abi_mips64_dt_rwplt : natural = natural_of_hex "0x70000034"
(** An alternative description of the classic MIPS RLD_MAP that is usable
    in a PIE as it stores a relative offset from the address of the tag
    rather than an absolute address.  *)
let abi_mips64_dt_rld_map_rel : natural = natural_of_hex "0x70000035"
let abi_mips64_dt_num : natural = natural_of_hex "0x36"

val string_of_abi_mips64_dynamic_tag : natural -> string
let string_of_abi_mips64_dynamic_tag m =
  if m = abi_mips64_dt_rld_version then
    "MIPS64_RLD_VERSION"
  else if m = abi_mips64_dt_flags then
    "MIPS64_FLAGS"
  else if m = abi_mips64_dt_base_address then
    "MIPS64_BASE_ADDRESS"
  else if m = abi_mips64_dt_local_gotno then
    "MIPS64_LOCAL_GOTNO"
  else if m = abi_mips64_dt_symtabno then
    "MIPS64_SYMTABNO"
  else if m = abi_mips64_dt_unrefextno then
    "MIPS64_RLD_UNREFEXTNO"
  else if m = abi_mips64_dt_gotsym then
    "MIPS64_RLD_GOTSYM"
  else if m = abi_mips64_dt_rld_map then
    "MIPS64_RLD_MAP"
  else if m = abi_mips64_dt_rld_map_rel then
    "MIPS64_RLD_MAP_REL"
  else
    "Invalid MIPS64 dynamic tag 0x" ^ (hex_string_of_natural m)

val abi_mips64_tag_correspondence_of_tag : natural -> error tag_correspondence
let abi_mips64_tag_correspondence_of_tag m =
  if m = abi_mips64_dt_rld_version then
    return C_Val
  else if m = abi_mips64_dt_flags then
    return C_Val
  else if m = abi_mips64_dt_base_address then
    return C_Ptr
  else if m = abi_mips64_dt_local_gotno then
    return C_Val
  else if m = abi_mips64_dt_symtabno then
    return C_Val
  else if m = abi_mips64_dt_unrefextno then
    return C_Val
  else if m = abi_mips64_dt_gotsym then
    return C_Val
  else if m = abi_mips64_dt_rld_map then
    return C_Ptr
  else if m = abi_mips64_dt_rld_map_rel then
    return C_Ptr
  else
    fail ("abi_mips64_tag_correspondence_of_tag: invalid MIPS64 dynamic tag 0x" ^ (hex_string_of_natural m))

val abi_mips64_elf64_value_of_elf64_dyn : elf64_dyn -> string_table -> error elf64_dyn_value
let abi_mips64_elf64_value_of_elf64_dyn dyn stbl =
  let tag = naturalFromInteger (integer_of_elf64_sxword dyn.elf64_dyn_tag) in
  if tag = abi_mips64_dt_rld_version then
    match dyn.elf64_dyn_d_un with
      | D_Val v -> return v
      | _ -> fail "abi_mips64_elf64_value_of_elf64_dyn: RLD_VERSION must be a Val"
    end >>= fun v ->
    return (Numeric (natural_of_elf64_xword v))
  else if tag = abi_mips64_dt_flags then
    match dyn.elf64_dyn_d_un with
      | D_Val v -> return v
      | _ -> fail "abi_mips64_elf64_value_of_elf64_dyn: FLAGS must be a Val"
    end >>= fun flags ->
    return (Flags (natural_of_elf64_xword flags))
  else if tag = abi_mips64_dt_base_address then
    match dyn.elf64_dyn_d_un with
      | D_Ptr v -> return v
      | _ -> fail "abi_mips64_elf64_value_of_elf64_dyn: BASE_ADDRESS must be a PTR"
    end >>= fun v ->
    return (Address v)
  else if tag = abi_mips64_dt_local_gotno then
    match dyn.elf64_dyn_d_un with
      | D_Val v -> return v
      | _ -> fail "abi_mips64_elf64_value_of_elf64_dyn: LOCAL_GOTNO must be a Val"
    end >>= fun v ->
    return (Numeric (natural_of_elf64_xword v))
  else if tag = abi_mips64_dt_symtabno then
    match dyn.elf64_dyn_d_un with
      | D_Val v -> return v
      | _ -> fail "abi_mips64_elf64_value_of_elf64_dyn: SYMTABNO must be a Val"
    end >>= fun v ->
    return (Numeric (natural_of_elf64_xword v))
  else if tag = abi_mips64_dt_unrefextno then
    match dyn.elf64_dyn_d_un with
      | D_Val v -> return v
      | _ -> fail "abi_mips64_elf64_value_of_elf64_dyn: UNREFEXTNO must be a Val"
    end >>= fun v ->
    return (Numeric (natural_of_elf64_xword v))
  else if tag = abi_mips64_dt_gotsym then
    match dyn.elf64_dyn_d_un with
      | D_Val v -> return v
      | _ -> fail "abi_mips64_elf64_value_of_elf64_dyn: GOTSYM must be a Val"
    end >>= fun v ->
    return (Numeric (natural_of_elf64_xword v))
  else if tag = abi_mips64_dt_rld_map then
    match dyn.elf64_dyn_d_un with
      | D_Ptr v -> return v
      | _ -> fail "abi_mips64_elf64_value_of_elf64_dyn: RLD_MAP must be a PTR"
    end >>= fun v ->
    return (Address v)
  else if tag = abi_mips64_dt_rld_map_rel then
    match dyn.elf64_dyn_d_un with
      | D_Ptr v -> return v
      | _ -> fail "abi_mips64_elf64_value_of_elf64_dyn: RLD_MAP_REL must be a PTR"
    end >>= fun v ->
    return (Address v)
  else
    fail ("abi_mips64_elf64_value_of_elf64_dyn: invalid MIPS64 dynamic tag 0x" ^ (hex_string_of_natural tag))
