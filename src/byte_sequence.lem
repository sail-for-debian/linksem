open import Basic_classes
open import Bool
open import List
open import Num
open import String
open import Assert_extra

open import Error
open import Maybe
open import Missing_pervasives
open import Show
open import Byte_sequence_impl

(** [byte_sequence.lem], a list of bytes used for ELF I/O and other basic tasks
  * in the ELF model.
  *)
type byte_sequence = Byte_sequence_impl.byte_sequence

val empty : byte_sequence
let empty = Byte_sequence_impl.empty

(** [read_char bs0] reads a single byte from byte sequence [bs0] and returns the
  * remainder of the byte sequence.  Fails if [bs0] is empty.
  * TODO: rename to read_byte, probably.
  *)
val read_char : byte_sequence -> error (byte * byte_sequence)
let read_char = Byte_sequence_impl.read_char

(** [find_byte bs b] finds the first occurence of b in bs and gives the index.
  * returns [Nothing] if the byte do not appear in bs
*)
val find_byte : byte_sequence -> byte -> maybe natural
let find_byte = Byte_sequence_impl.find_byte

(* There's no generic implementation for those two *)

(** [acquire fname] exhaustively reads in a byte_sequence from a file pointed to
  * by filename [fname].  Fails if the file does not exist, or if the transcription
  * otherwise fails.
  *)
val acquire : string -> error byte_sequence
let acquire = Byte_sequence_impl.acquire

(** [serialise_byte_list fname bs] writes a list of bytes, [bs], to a binary file
  * pointed to by filename [fname].  Fails if the transcription fails.  Implemented
  * as a primitive in OCaml.
  *)
val serialise : string -> byte_sequence -> error unit
let serialise = Byte_sequence_impl.serialise

(** [create cnt b] creates a byte sequence of length [cnt] containing only [b].
  *)
val create : natural -> byte -> byte_sequence
let create = Byte_sequence_impl.create

(** [zeros cnt] creates a byte sequence of length [cnt] containing only 0, the
  * null byte.
  *)
val zeros : natural -> byte_sequence
let zeros len =
  create len Missing_pervasives.null_byte

(** [length bs0] returns the length of [bs0].
  *)
val length : byte_sequence -> natural
let length = Byte_sequence_impl.length

(** [concat bs] concatenates a list of byte sequences, [bs], into a single byte
  * sequence, maintaining byte order across the sequences.
  *)
val concat : list byte_sequence -> byte_sequence
declare {isabelle} rename function concat = concat_byte_sequence
let concat = Byte_sequence_impl.concat

(** [zero_pad_to_length len bs0] pads (on the right) consecutive zeros until the
  * resulting byte sequence is [len] long.  Returns [bs0] if [bs0] is already of
  * greater length than [len].
  *)
val zero_pad_to_length : natural -> byte_sequence -> byte_sequence
let zero_pad_to_length = Byte_sequence_impl.zero_pad_to_length

val byte_sequence_of_byte_list : list byte -> byte_sequence
let byte_sequence_of_byte_list = Byte_sequence_impl.byte_sequence_of_byte_list

(** [from_byte_lists bs] concatenates a list of bytes [bs] and creates a byte
  * sequence from their contents.  Maintains byte order in [bs].
  *)
val from_byte_lists : list (list byte) -> byte_sequence
let from_byte_lists l =
  concat (List.map byte_sequence_of_byte_list l)

(** [string_of_byte_sequence bs0] converts byte sequence [bs0] into a string
  * representation.
  *)
val string_of_byte_sequence : byte_sequence -> string
let string_of_byte_sequence = Byte_sequence_impl.string_of_byte_sequence

val char_list_of_byte_sequence : byte_sequence -> list char
let char_list_of_byte_sequence = Byte_sequence_impl.char_list_of_byte_sequence

val byte_list_of_byte_sequence : byte_sequence -> list byte
let byte_list_of_byte_sequence = Byte_sequence_impl.byte_list_of_byte_sequence

(** [equal bs0 bs1] checks whether two byte sequences, [bs0] and [bs1], are equal.
  *)
val equal : byte_sequence -> byte_sequence -> bool
let equal = Byte_sequence_impl.equal

(** [dropbytes cnt bs0] drops [cnt] bytes from byte sequence [bs0].  Fails if
  * [cnt] is greater than the length of [bs0].
  *)
val dropbytes : natural -> byte_sequence -> error byte_sequence
let dropbytes = Byte_sequence_impl.dropbytes

(** [takebytes cnt bs0] takes [cnt] bytes from byte sequence [bs0].  Fails if
  * [cnt] is greater than the length of [bs0].
*)
val takebytes : natural -> byte_sequence -> error byte_sequence
let takebytes = Byte_sequence_impl.takebytes

val takebytes_with_length : natural -> natural -> byte_sequence -> error byte_sequence
let takebytes_with_length = Byte_sequence_impl.takebytes_with_length

(** [read_2_bytes_le bs0] reads two bytes from [bs0], returning them in
  * little-endian order, and returns the remainder of [bs0].  Fails if [bs0] has
  * length less than 2.
  *)
val read_2_bytes_le : byte_sequence -> error ((byte * byte) * byte_sequence)
let read_2_bytes_le bs0 =
  read_char bs0 >>= fun (b0, bs1) ->
  read_char bs1 >>= fun (b1, bs2) ->
  return ((b1, b0), bs2)

(** [read_2_bytes_be bs0] reads two bytes from [bs0], returning them in
  * big-endian order, and returns the remainder of [bs0].  Fails if [bs0] has
  * length less than 2.
  *)
val read_2_bytes_be : byte_sequence -> error ((byte * byte) * byte_sequence)
let read_2_bytes_be bs0 =
  read_char bs0 >>= fun (b0, bs1) ->
  read_char bs1 >>= fun (b1, bs2) ->
  return ((b0, b1), bs2)

(** [read_4_bytes_le bs0] reads four bytes from [bs0], returning them in
  * little-endian order, and returns the remainder of [bs0].  Fails if [bs0] has
  * length less than 4.
  *)
val read_4_bytes_le : byte_sequence -> error ((byte * byte * byte * byte) * byte_sequence)
let read_4_bytes_le bs0 =
  read_char bs0 >>= fun (b0, bs1) ->
  read_char bs1 >>= fun (b1, bs2) ->
  read_char bs2 >>= fun (b2, bs3) ->
  read_char bs3 >>= fun (b3, bs4) ->
  return ((b3, b2, b1, b0), bs4)

(** [read_4_bytes_be bs0] reads four bytes from [bs0], returning them in
  * big-endian order, and returns the remainder of [bs0].  Fails if [bs0] has
  * length less than 4.
  *)
val read_4_bytes_be : byte_sequence -> error ((byte * byte * byte * byte) * byte_sequence)
let read_4_bytes_be bs0 =
  read_char bs0 >>= fun (b0, bs1) ->
  read_char bs1 >>= fun (b1, bs2) ->
  read_char bs2 >>= fun (b2, bs3) ->
  read_char bs3 >>= fun (b3, bs4) ->
  return ((b0, b1, b2, b3), bs4)

(** [read_8_bytes_le bs0] reads eight bytes from [bs0], returning them in
  * little-endian order, and returns the remainder of [bs0].  Fails if [bs0] has
  * length less than 8.
  *)
val read_8_bytes_le : byte_sequence -> error ((byte * byte * byte * byte * byte * byte * byte * byte) * byte_sequence)
let read_8_bytes_le bs0 =
  read_char bs0 >>= fun (b0, bs1) ->
  read_char bs1 >>= fun (b1, bs2) ->
  read_char bs2 >>= fun (b2, bs3) ->
  read_char bs3 >>= fun (b3, bs4) ->
  read_char bs4 >>= fun (b4, bs5) ->
  read_char bs5 >>= fun (b5, bs6) ->
  read_char bs6 >>= fun (b6, bs7) ->
  read_char bs7 >>= fun (b7, bs8) ->
  return ((b7, b6, b5, b4, b3, b2, b1, b0), bs8)

(** [read_8_bytes_be bs0] reads eight bytes from [bs0], returning them in
  * big-endian order, and returns the remainder of [bs0].  Fails if [bs0] has
  * length less than 8.
  *)
val read_8_bytes_be : byte_sequence -> error ((byte * byte * byte * byte * byte * byte * byte * byte) * byte_sequence)
let read_8_bytes_be bs0 =
  read_char bs0 >>= fun (b0, bs1) ->
  read_char bs1 >>= fun (b1, bs2) ->
  read_char bs2 >>= fun (b2, bs3) ->
  read_char bs3 >>= fun (b3, bs4) ->
  read_char bs4 >>= fun (b4, bs5) ->
  read_char bs5 >>= fun (b5, bs6) ->
  read_char bs6 >>= fun (b6, bs7) ->
  read_char bs7 >>= fun (b7, bs8) ->
  return ((b0, b1, b2, b3, b4, b5, b6, b7), bs8)

(** [partition pnt bs0] splits [bs0] into two parts at index [pnt].  Fails if
  * [pnt] is greater than the length of [bs0].
  *)
val partition : natural -> byte_sequence -> error (byte_sequence * byte_sequence)
let partition idx bs0 =
  takebytes idx bs0 >>= fun l ->
  dropbytes idx bs0 >>= fun r ->
  return (l, r)

val partition_with_length : natural -> natural -> byte_sequence -> error (byte_sequence * byte_sequence)
let partition_with_length idx bs0_length bs0 =
  takebytes_with_length idx bs0_length bs0 >>= fun l ->
  dropbytes idx bs0 >>= fun r ->
  return (l, r)

(** [offset_and_cut off cut bs0] first cuts [off] bytes off [bs0], then cuts
  * the resulting byte sequence to length [cut].  Fails if [off] is greater than
  * the length of [bs0] and if [cut] is greater than the length of the intermediate
  * byte sequence.
  *)
val offset_and_cut : natural -> natural -> byte_sequence -> error byte_sequence
let offset_and_cut off cut bs0 =
  dropbytes off bs0 >>= fun bs1 ->
  takebytes cut bs1 >>= fun res ->
  return res
