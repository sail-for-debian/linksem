(** [gnu_ext_section_to_segment_mapping] contains (GNU specific) functionality
  * relating to calculating the section to segment mapping for an ELF file.  In
  * particular, the test over whether a section is inside a segment is ABI
  * specific.  This module provides that test.
  *)

open import Basic_classes
open import Bool
open import Num

open import Elf_header
open import Elf_program_header_table
open import Elf_section_header_table
open import Elf_types_native_uint

open import String
open import Show

open import Gnu_ext_program_header_table

(** [elf32_section_in_segment sec_hdr segment] implements the
  * ELF_SECTION_IN_SEGMENT1 macro from readelf.  Note the macro is always used
  * with [check_vma] and [strict] set to 1.
  *
  #define ELF_SECTION_IN_SEGMENT_1(sec_hdr, segment, check_vma, strict)	\
  ((/* Only PT_LOAD, PT_GNU_RELRO and PT_TLS segments can contain	\
       SHF_TLS sections.  */						\
    ((((sec_hdr)->sh_flags & SHF_TLS) != 0)				\
     && ((segment)->p_type == PT_TLS					\
	 || (segment)->p_type == PT_GNU_RELRO				\
	 || (segment)->p_type == PT_LOAD))				\
    /* PT_TLS segment contains only SHF_TLS sections, PT_PHDR no	\
       sections at all.  */						\
    || (((sec_hdr)->sh_flags & SHF_TLS) == 0				\
	&& (segment)->p_type != PT_TLS					\
	&& (segment)->p_type != PT_PHDR))				\
   /* PT_LOAD and similar segments only have SHF_ALLOC sections.  */	\
   && !(((sec_hdr)->sh_flags & SHF_ALLOC) == 0				\
	&& ((segment)->p_type == PT_LOAD				\
	    || (segment)->p_type == PT_DYNAMIC				\
	    || (segment)->p_type == PT_GNU_EH_FRAME			\
	    || (segment)->p_type == PT_GNU_RELRO			\
	    || (segment)->p_type == PT_GNU_STACK))			\
   /* Any section besides one of type SHT_NOBITS must have file		\
      offsets within the segment.  */					\
   && ((sec_hdr)->sh_type == SHT_NOBITS					\
       || ((bfd_vma) (sec_hdr)->sh_offset >= (segment)->p_offset	\
	   && (!(strict)						\
	       || ((sec_hdr)->sh_offset - (segment)->p_offset		\
		   <= (segment)->p_filesz - 1))				\
	   && (((sec_hdr)->sh_offset - (segment)->p_offset		\
		+ ELF_SECTION_SIZE(sec_hdr, segment))			\
	       <= (segment)->p_filesz)))				\
   /* SHF_ALLOC sections must have VMAs within the segment.  */		\
   && (!(check_vma)							\
       || ((sec_hdr)->sh_flags & SHF_ALLOC) == 0			\
       || ((sec_hdr)->sh_addr >= (segment)->p_vaddr			\
	   && (!(strict)						\
	       || ((sec_hdr)->sh_addr - (segment)->p_vaddr		\
		   <= (segment)->p_memsz - 1))				\
	   && (((sec_hdr)->sh_addr - (segment)->p_vaddr			\
		+ ELF_SECTION_SIZE(sec_hdr, segment))			\
	       <= (segment)->p_memsz)))					\
   /* No zero size sections at start or end of PT_DYNAMIC.  */		\
   && ((segment)->p_type != PT_DYNAMIC					\
       || (sec_hdr)->sh_size != 0					\
       || (segment)->p_memsz == 0					\
       || (((sec_hdr)->sh_type == SHT_NOBITS				\
	    || ((bfd_vma) (sec_hdr)->sh_offset > (segment)->p_offset	\
	        && ((sec_hdr)->sh_offset - (segment)->p_offset		\
		    < (segment)->p_filesz)))				\
	   && (((sec_hdr)->sh_flags & SHF_ALLOC) == 0			\
	       || ((sec_hdr)->sh_addr > (segment)->p_vaddr		\
		   && ((sec_hdr)->sh_addr - (segment)->p_vaddr		\
		       < (segment)->p_memsz))))))
  *
  * From [internal.h] of readelf's source code.
  *)
  
val elf32_section_flags : elf32_section_header_table_entry -> natural -> bool
let elf32_section_flags sec_hdr typ =
  elf32_word_land sec_hdr.elf32_sh_flags (elf32_word_of_natural typ) <>
    elf32_word_of_natural 0
    
val elf64_section_flags : elf64_section_header_table_entry -> natural -> bool
let elf64_section_flags sec_hdr typ =
  elf64_xword_land sec_hdr.elf64_sh_flags (elf64_xword_of_natural typ) <>
    elf64_xword_of_natural 0
    
val elf32_section_of_type : elf32_section_header_table_entry -> natural -> bool
let elf32_section_of_type sec_hdr typ =
  sec_hdr.elf32_sh_type = elf32_word_of_natural typ
  
val elf64_section_of_type : elf64_section_header_table_entry -> natural -> bool
let elf64_section_of_type sec_hdr typ =
  sec_hdr.elf64_sh_type = elf64_word_of_natural typ
  
val elf32_segment_of_type : elf32_program_header_table_entry -> natural -> bool
let elf32_segment_of_type segment typ =
  segment.elf32_p_type = elf32_word_of_natural typ
  
val elf64_segment_of_type : elf64_program_header_table_entry -> natural -> bool
let elf64_segment_of_type segment typ =
  segment.elf64_p_type = elf64_word_of_natural typ

(** Only PT_LOAD, PT_GNU_RELRO and PT_TLS segments can contain SHF_TLS sections
  * and PT_TLS segment contains only SHF_TLS sections, PT_PHDR no	sections at all
  *)
val elf32_section_in_segment1 : elf32_section_header_table_entry -> elf32_program_header_table_entry -> bool
let elf32_section_in_segment1 sec_hdr segment =
  (elf32_section_flags sec_hdr shf_tls &&
  (elf32_segment_of_type segment elf_pt_tls ||
    elf32_segment_of_type segment elf_pt_gnu_relro ||
    elf32_segment_of_type segment elf_pt_load)) ||
  (not (elf32_section_flags sec_hdr shf_tls)
  && not (elf32_segment_of_type segment elf_pt_tls)
  && not (elf32_segment_of_type segment elf_pt_phdr))
  
val elf64_section_in_segment1 : elf64_section_header_table_entry -> elf64_program_header_table_entry -> bool
let elf64_section_in_segment1 sec_hdr segment =
  (elf64_section_flags sec_hdr shf_tls &&
  (elf64_segment_of_type segment elf_pt_tls ||
    elf64_segment_of_type segment elf_pt_gnu_relro ||
    elf64_segment_of_type segment elf_pt_load)) ||
  (not (elf64_section_flags sec_hdr shf_tls)
  && not (elf64_segment_of_type segment elf_pt_tls)
  && not (elf64_segment_of_type segment elf_pt_phdr))

(** PT_LOAD and similar segments only have SHF_ALLOC sections *)

val elf32_section_in_segment2 : elf32_section_header_table_entry -> elf32_program_header_table_entry -> bool
let elf32_section_in_segment2 sec_hdr segment =
  not ((not (elf32_section_flags sec_hdr shf_alloc)) &&
       (elf32_segment_of_type segment elf_pt_load ||
        elf32_segment_of_type segment elf_pt_dynamic ||
        elf32_segment_of_type segment elf_pt_gnu_eh_frame ||
        elf32_segment_of_type segment elf_pt_gnu_relro ||
        elf32_segment_of_type segment elf_pt_gnu_stack))

val elf64_section_in_segment2 : elf64_section_header_table_entry -> elf64_program_header_table_entry -> bool
let elf64_section_in_segment2 sec_hdr segment =
  not ((not (elf64_section_flags sec_hdr shf_alloc)) &&
       (elf64_segment_of_type segment elf_pt_load ||
        elf64_segment_of_type segment elf_pt_dynamic ||
        elf64_segment_of_type segment elf_pt_gnu_eh_frame ||
        elf64_segment_of_type segment elf_pt_gnu_relro ||
        elf64_segment_of_type segment elf_pt_gnu_stack))
 
    
(** Any section besides one of type SHT_NOBITS must have file offsets within
  * the segment.
  *)

val elf32_sect_size : elf32_header -> elf32_section_header_table_entry -> elf32_program_header_table_entry -> natural
let elf32_sect_size hdr sec_hdr segment =
  if is_elf32_tbss_special sec_hdr segment then
    0
  else
    natural_of_elf32_half (hdr.elf32_shentsize)
  
val elf64_sect_size : elf64_header -> elf64_section_header_table_entry -> elf64_program_header_table_entry -> natural
let elf64_sect_size hdr sec_hdr segment =
  if is_elf64_tbss_special sec_hdr segment then
    0
  else
    natural_of_elf64_half (hdr.elf64_shentsize)
    
val elf32_section_in_segment3 : elf32_header -> elf32_section_header_table_entry -> elf32_program_header_table_entry -> bool
let elf32_section_in_segment3 hdr sec_hdr segment =
  let sec_off = integerFromNatural (natural_of_elf32_off  sec_hdr.elf32_sh_offset) in
  let seg_off = integerFromNatural (natural_of_elf32_off  segment.elf32_p_offset) in
  let seg_fsz = integerFromNatural (natural_of_elf32_word segment.elf32_p_filesz) in
  let sec_siz = integerFromNatural (elf32_sect_size hdr sec_hdr segment) in
    elf32_section_of_type sec_hdr sht_nobits ||
    (sec_off >= seg_off &&
    ((sec_off - seg_off) <= (seg_fsz - 1)) &&
    (sec_off - (seg_off + sec_siz) <= seg_fsz))
  
val elf64_section_in_segment3 : elf64_header -> elf64_section_header_table_entry -> elf64_program_header_table_entry -> bool
let elf64_section_in_segment3 hdr sec_hdr segment =
  let sec_off = integerFromNatural (natural_of_elf64_off   sec_hdr.elf64_sh_offset) in
  let seg_off = integerFromNatural (natural_of_elf64_off   segment.elf64_p_offset) in
  let seg_fsz = integerFromNatural (natural_of_elf64_xword segment.elf64_p_filesz) in
  let sec_siz = integerFromNatural (elf64_sect_size hdr sec_hdr segment) in
    elf64_section_of_type sec_hdr sht_nobits ||
    (sec_off >= seg_off &&
    ((sec_off - seg_off) <= (seg_fsz - 1)) &&
    (sec_off - (seg_off + sec_siz) <= seg_fsz))
      
(** SHF_ALLOC sections must have VMAs within the segment
  *)
  
val elf32_section_in_segment4 : elf32_header -> elf32_section_header_table_entry -> elf32_program_header_table_entry -> bool
let elf32_section_in_segment4 hdr sec_hdr segment =
  let sec_addr = integerFromNatural (natural_of_elf32_addr sec_hdr.elf32_sh_addr) in
  let seg_vadr = integerFromNatural (natural_of_elf32_addr segment.elf32_p_vaddr) in
  let seg_mmsz = integerFromNatural (natural_of_elf32_word segment.elf32_p_memsz) in
  let sec_size = integerFromNatural (elf32_sect_size hdr sec_hdr segment) in
    (not (elf32_section_flags sec_hdr shf_alloc) ||
     sec_addr >= seg_vadr) &&
     sec_addr - seg_vadr <= seg_mmsz - 1 &&
     sec_addr - (seg_vadr + sec_size) <= seg_mmsz
  
val elf64_section_in_segment4 : elf64_header -> elf64_section_header_table_entry -> elf64_program_header_table_entry -> bool
let elf64_section_in_segment4 hdr sec_hdr segment =
  let sec_addr = integerFromNatural (natural_of_elf64_addr  sec_hdr.elf64_sh_addr) in
  let seg_vadr = integerFromNatural (natural_of_elf64_addr  segment.elf64_p_vaddr) in
  let seg_mmsz = integerFromNatural (natural_of_elf64_xword segment.elf64_p_memsz) in
  let sec_size = integerFromNatural (elf64_sect_size hdr sec_hdr segment) in
     (not (elf64_section_flags sec_hdr shf_alloc) ||
     sec_addr >= seg_vadr) &&
     sec_addr - seg_vadr <= seg_mmsz - 1 &&
     sec_addr - (seg_vadr + sec_size) <= seg_mmsz
    
(** No zero size sections at start or end of PT_DYNAMIC *)

val elf32_section_in_segment5 : elf32_section_header_table_entry -> elf32_program_header_table_entry -> bool
let elf32_section_in_segment5 sec_hdr segment =
  let sec_siz = integerFromNatural (natural_of_elf32_word sec_hdr.elf32_sh_size) in
  let seg_msz = integerFromNatural (natural_of_elf32_word segment.elf32_p_memsz) in
  let sec_off = integerFromNatural (natural_of_elf32_off  sec_hdr.elf32_sh_offset) in
  let seg_off = integerFromNatural (natural_of_elf32_off  segment.elf32_p_offset) in
  let seg_fsz = integerFromNatural (natural_of_elf32_word segment.elf32_p_filesz) in
  let sec_adr = integerFromNatural (natural_of_elf32_addr sec_hdr.elf32_sh_addr) in
  let seg_vad = integerFromNatural (natural_of_elf32_addr segment.elf32_p_vaddr) in
    (not (elf32_segment_of_type segment elf_pt_dynamic)) ||
    sec_siz <> 0 ||
    seg_msz = 0 ||
    ((elf32_section_of_type sec_hdr sht_nobits ||
      (sec_off > seg_off &&
       sec_off - seg_off < seg_fsz)) &&
       (not (elf32_section_flags sec_hdr shf_alloc) ||
        (sec_adr > seg_vad &&
         sec_adr - seg_vad < seg_msz)))

val elf64_section_in_segment5 : elf64_section_header_table_entry -> elf64_program_header_table_entry -> bool
let elf64_section_in_segment5 sec_hdr segment =
  let sec_siz = integerFromNatural (natural_of_elf64_xword sec_hdr.elf64_sh_size) in
  let seg_msz = integerFromNatural (natural_of_elf64_xword segment.elf64_p_memsz) in
  let sec_off = integerFromNatural (natural_of_elf64_off   sec_hdr.elf64_sh_offset) in
  let seg_off = integerFromNatural (natural_of_elf64_off   segment.elf64_p_offset) in
  let seg_fsz = integerFromNatural (natural_of_elf64_xword segment.elf64_p_filesz) in
  let sec_adr = integerFromNatural (natural_of_elf64_addr  sec_hdr.elf64_sh_addr) in
  let seg_vad = integerFromNatural (natural_of_elf64_addr  segment.elf64_p_vaddr) in
    (not (elf64_segment_of_type segment elf_pt_dynamic)) ||
    sec_siz <> 0 ||
    seg_msz = 0 ||
    ((elf64_section_of_type sec_hdr sht_nobits ||
      (sec_off > seg_off &&
       sec_off - seg_off < seg_fsz)) &&
       (not (elf64_section_flags sec_hdr shf_alloc) ||
        (sec_adr > seg_vad &&
         sec_adr - seg_vad < seg_msz)))

(** The final section in segment tests, bringing all the above together.
  *)

val elf32_section_in_segment : elf32_header -> elf32_section_header_table_entry -> elf32_program_header_table_entry -> bool
let elf32_section_in_segment hdr sec_hdr segment =
  elf32_section_in_segment1 sec_hdr segment &&
  elf32_section_in_segment2 sec_hdr segment &&
  elf32_section_in_segment3 hdr sec_hdr segment &&
  elf32_section_in_segment4 hdr sec_hdr segment &&
  elf32_section_in_segment5 sec_hdr segment
    
val elf64_section_in_segment : elf64_header -> elf64_section_header_table_entry -> elf64_program_header_table_entry -> bool
let elf64_section_in_segment hdr sec_hdr segment =
  elf64_section_in_segment1 sec_hdr segment &&
  elf64_section_in_segment2 sec_hdr segment &&
  elf64_section_in_segment3 hdr sec_hdr segment &&
  elf64_section_in_segment4 hdr sec_hdr segment &&
  elf64_section_in_segment5 sec_hdr segment
