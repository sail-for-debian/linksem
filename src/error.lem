open import Basic_classes
open import List
open import Maybe
open import Num
open import String
open import Show

(** [error] is a type used to represent potentially failing computations. [Success]
  * marks a successful completion of a computation, whilst [Fail err] marks a failure,
  * with [err] as the reason.
  *)
type error 'a
  = Success of 'a
  | Fail of string

(** [return] is the monadic lifting function for [error], representing a successful
  * computation.
  *)
val return : forall 'a. 'a -> error 'a
let return r = Success r

declare {isabelle} rename function return = error_return

val with_success : forall 'a 'b. error 'a -> 'b -> ('a -> 'b) -> 'b
let with_success err fl suc =
  match err with
    | Success s -> suc s
    | Fail err  -> fl
  end

(** [fail err] represents a failing computation, with error message [err].
  *)
val fail : forall 'a. string -> error 'a
let fail err = Fail err

declare {isabelle} rename function fail = error_fail

(** [(>>=)] is the monadic binding function for [error].
  *)
val (>>=) : forall 'a 'b. error 'a -> ('a -> error 'b) -> error 'b
let bind x f =
  match x with
    | Success s -> f s
    | Fail err  -> Fail err
  end
let ~{ocaml} (>>=) x f = bind x f
(* the generated OCaml is "let >>= x f = .." (without the infix parentheses),
to work around this we declare it inline for OCaml (I'm not sure about other
backends) *)
let inline {ocaml} (>>=) x f = bind x f

(** [as_maybe e] drops an [error] value into a [maybe] value, throwing away
  * error information.
  *)

val as_maybe : forall 'a. error 'a -> maybe 'a
let as_maybe e =
  match e with
    | Fail err -> Nothing
    | Success s -> Just s
  end

val of_maybe : forall 'a. string -> maybe 'a -> error 'a
let of_maybe err_msg m =
  match m with
    | Just v -> Success v
    | Nothing -> Fail err_msg
  end

(** [repeatM count action] fails if [action] is a failing computation, or
  * successfully produces a list [count] elements long, where each element is
  * the value successfully returned by [action].
  *)
val repeatM'' : forall 'a. natural -> error 'a -> error (list 'a) -> error (list 'a)
let rec repeatM'' count action acc =
  if count = 0 then
    acc
  else
    repeatM'' (count - 1) action (acc >>= fun tail -> action >>= fun head -> return (head::tail))

val repeatM : forall 'a. natural -> error 'a -> error (list 'a)
let repeatM count action = repeatM'' count action (return [])

(** [repeatM' count seed action] is a variant of [repeatM] that acts like [repeatM]
  * apart from any successful result returns a tuple whose second component is [seed]
  * and whose first component is the same as would be returned by [repeatM].
  *)
val repeatM' : forall 'a 'b. natural -> 'b -> ('b -> error ('a * 'b)) -> error ((list 'a) * 'b)
let rec repeatM' count seed action =
  if count = 0 then
    return ([], seed)
  else
    action seed >>= fun (head, seed) ->
    repeatM' (count - 1) seed action >>= fun (tail, seed) ->
    return (head::tail, seed)

(** [mapM f xs] maps [f] across [xs], failing if [f] fails on any element of [xs].
  *)
val mapM' : forall 'a 'b. ('a -> error 'b) -> list 'a -> error (list 'b) -> error (list 'b)
let rec mapM' f xs rev_acc =
  match xs with
    | []    -> rev_acc >>= fun rev_acc -> return (List.reverse rev_acc)
    | x::xs -> mapM' f xs (rev_acc >>= fun tl -> f x >>= fun hd -> return (hd::tl))
  end

val mapM : forall 'a 'b. ('a -> error 'b) -> list 'a -> error (list 'b)
let mapM f xs = mapM' f xs (return [])

(** [foldM f e xs] performs a monadic right fold of [f] across [xs] using [e]
  * as the base case.  Fails if any application of [f] fails.
  *)
val foldM : forall 'a 'b. ('a -> 'b -> error 'a) -> 'a -> list 'b -> error 'a
let rec foldM f e xs =
  match xs with
    | []    -> return e
    | x::xs -> f e x >>= fun res -> foldM f res xs
  end

(** [string_of_error err] produces a string representation of [err].
  *)
val string_of_error : forall 'a. Show 'a => error 'a -> string
let string_of_error e =
  match e with
    | Fail err -> "Fail: " ^ err
    | Success s -> show s
  end

instance forall 'a. Show 'a => (Show (error 'a))
  let show = string_of_error
end
