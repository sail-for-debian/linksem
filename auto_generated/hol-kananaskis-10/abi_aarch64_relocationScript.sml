(*Generated by Lem from abis/aarch64/abi_aarch64_relocation.lem.*)
open HolKernel Parse boolLib bossLib;
open lem_numTheory lem_basic_classesTheory lem_maybeTheory lem_stringTheory missing_pervasivesTheory errorTheory elf_types_native_uintTheory elf_headerTheory elf_symbol_tableTheory elf_fileTheory elf_relocationTheory memory_imageTheory abi_utilitiesTheory;

val _ = numLib.prefer_num();



val _ = new_theory "abi_aarch64_relocation"

(** [abi_aarch64_relocation] contains types and definitions relating to ABI
  * specific relocation functionality for the AArch64 ABI (little-endian case).
  *)

(*open import Basic_classes*)
(*open import Num*)
(*open import String*)
(*open import Maybe*)
(*open import Missing_pervasives*)

(*open import Error*)

(*open import Elf_types_native_uint*)
(*open import Elf_file*)
(*open import Elf_header*)
(*open import Elf_relocation*)
(*open import Elf_symbol_table*)

(*open import Abi_utilities*)
(*open import Memory_image*)

(** Relocations *)

val _ = Define `
 (r_aarch64_none : num= (( 0:num)))`;

val _ = Define `
 (r_aarch64_withdrawn : num= (( 256:num)))`;
  (** Treated as R_AARCH6_NONE *)

val _ = Define `
 (r_aarch64_abs64 : num= (( 257:num)))`;

val _ = Define `
 (r_aarch64_abs32 : num= (( 258:num)))`;

val _ = Define `
 (r_aarch64_abs16 : num= (( 259:num)))`;

val _ = Define `
 (r_aarch64_prel64 : num= (( 260:num)))`;

val _ = Define `
 (r_aarch64_prel32 : num= (( 261:num)))`;

val _ = Define `
 (r_aarch64_prel16 : num= (( 262:num)))`;


val _ = Define `
 (r_aarch64_movw_uabs_g0 : num= (( 263:num)))`;

val _ = Define `
 (r_aarch64_movw_uabs_g0_nc : num= (( 264:num)))`;

val _ = Define `
 (r_aarch64_movw_uabs_g1 : num= (( 265:num)))`;

val _ = Define `
 (r_aarch64_movw_uabs_g1_nc : num= (( 266:num)))`;

val _ = Define `
 (r_aarch64_movw_uabs_g2 : num= (( 267:num)))`;

val _ = Define `
 (r_aarch64_movw_uabs_g2_nc : num= (( 268:num)))`;

val _ = Define `
 (r_aarch64_movw_uabs_g3 : num= (( 269:num)))`;


val _ = Define `
 (r_aarch64_movw_sabs_g0 : num= (( 270:num)))`;

val _ = Define `
 (r_aarch64_movw_sabs_g1 : num= (( 271:num)))`;

val _ = Define `
 (r_aarch64_movw_sabs_g2 : num= (( 272:num)))`;


val _ = Define `
 (r_aarch64_ld_prel_lo19 : num= (( 273:num)))`;

val _ = Define `
 (r_aarch64_adr_prel_lo21 : num= (( 274:num)))`;

val _ = Define `
 (r_aarch64_adr_prel_pg_hi21 : num= (( 275:num)))`;

val _ = Define `
 (r_aarch64_adr_prel_pg_hi21_nc : num= (( 276:num)))`;

val _ = Define `
 (r_aarch64_add_abs_lo12_nc : num= (( 277:num)))`;

val _ = Define `
 (r_aarch64_ldst8_abs_lo12_nc : num= (( 278:num)))`;

val _ = Define `
 (r_aarch64_ldst16_abs_lo12_nc : num= (( 284:num)))`;

val _ = Define `
 (r_aarch64_ldst32_abs_lo12_nc : num= (( 285:num)))`;

val _ = Define `
 (r_aarch64_ldst64_abs_lo12_nc : num= (( 286:num)))`;

val _ = Define `
 (r_aarch64_ldst128_abs_lo12_nc : num= (( 299:num)))`;


val _ = Define `
 (r_aarch64_tstbr14 : num= (( 279:num)))`;

val _ = Define `
 (r_aarch64_condbr19 : num= (( 280:num)))`;

val _ = Define `
 (r_aarch64_jump26 : num= (( 282:num)))`;

val _ = Define `
 (r_aarch64_call26 : num= (( 283:num)))`;


val _ = Define `
 (r_aarch64_movw_prel_g0 : num= (( 287:num)))`;

val _ = Define `
 (r_aarch64_movw_prel_g0_nc : num= (( 288:num)))`;

val _ = Define `
 (r_aarch64_movw_prel_g1 : num= (( 289:num)))`;

val _ = Define `
 (r_aarch64_movw_prel_g1_nc : num= (( 290:num)))`;

val _ = Define `
 (r_aarch64_movw_prel_g2 : num= (( 291:num)))`;

val _ = Define `
 (r_aarch64_movw_prel_g2_nc : num= (( 292:num)))`;

val _ = Define `
 (r_aarch64_movw_prel_g3 : num= (( 293:num)))`;


val _ = Define `
 (r_aarch64_movw_gotoff_g0 : num= (( 300:num)))`;

val _ = Define `
 (r_aarch64_movw_gotoff_g0_nc : num= (( 301:num)))`;

val _ = Define `
 (r_aarch64_movw_gotoff_g1 : num= (( 302:num)))`;

val _ = Define `
 (r_aarch64_movw_gotoff_g1_nc : num= (( 303:num)))`;

val _ = Define `
 (r_aarch64_movw_gotoff_g2 : num= (( 304:num)))`;

val _ = Define `
 (r_aarch64_movw_gotoff_g2_nc : num= (( 305:num)))`;

val _ = Define `
 (r_aarch64_movw_gotoff_g3 : num= (( 306:num)))`;


val _ = Define `
 (r_aarch64_gotrel64 : num= (( 307:num)))`;

val _ = Define `
 (r_aarch64_gotrel32 : num= (( 308:num)))`;


val _ = Define `
 (r_aarch64_got_ld_prel19 : num= (( 309:num)))`;

val _ = Define `
 (r_aarch64_got_ld64_gotoff_lo15 : num= (( 310:num)))`;

val _ = Define `
 (r_aarch64_adr_got_page : num= (( 311:num)))`;

val _ = Define `
 (r_aarch64_ld64_got_lo12_nc : num= (( 312:num)))`;

val _ = Define `
 (r_aarch64_ld64_gotpage_lo15 : num= (( 313:num)))`;


val _ = Define `
 (r_aarch64_tlsgd_adr_prel21 : num= (( 512:num)))`;

val _ = Define `
 (r_aarch64_tlsgd_adr_page21 : num= (( 513:num)))`;

val _ = Define `
 (r_aarch64_tlsgd_add_lo12_nc : num= (( 514:num)))`;

val _ = Define `
 (r_aarch64_tlsgd_movw_g1 : num= (( 515:num)))`;

val _ = Define `
 (r_aarch64_tlsgd_movw_g0_nc : num= (( 516:num)))`;


val _ = Define `
 (r_aarch64_tlsld_adr_prel21 : num= (( 517:num)))`;

val _ = Define `
 (r_aarch64_tlsld_adr_page21 : num= (( 518:num)))`;

val _ = Define `
 (r_aarch64_tlsld_add_lo12_nc : num= (( 519:num)))`;

val _ = Define `
 (r_aarch64_tlsld_movw_g1 : num= (( 520:num)))`;

val _ = Define `
 (r_aarch64_tlsld_movw_g0_nc : num= (( 521:num)))`;

val _ = Define `
 (r_aarch64_tlsld_ld_prel19 : num= (( 522:num)))`;

val _ = Define `
 (r_aarch64_tlsld_movw_dtprel_g2 : num= (( 523:num)))`;

val _ = Define `
 (r_aarch64_tlsld_movw_dtprel_g1 : num= (( 524:num)))`;

val _ = Define `
 (r_aarch64_tlsld_movw_dtprel_g1_nc : num= (( 525:num)))`;

val _ = Define `
 (r_aarch64_tlsld_movw_dtprel_g0 : num= (( 526:num)))`;

val _ = Define `
 (r_aarch64_tlsld_movw_dtprel_g0_nc : num= (( 527:num)))`;

val _ = Define `
 (r_aarch64_tlsld_add_dtprel_hi12 : num= (( 528:num)))`;

val _ = Define `
 (r_aarch64_tlsld_add_dtprel_lo12 : num= (( 529:num)))`;

val _ = Define `
 (r_aarch64_tlsld_add_dtprel_lo12_nc : num= (( 530:num)))`;

val _ = Define `
 (r_aarch64_tlsld_ldst8_dtprel_lo12 : num= (( 531:num)))`;

val _ = Define `
 (r_aarch64_tlsld_ldst8_dtprel_lo12_nc : num= (( 532:num)))`;

val _ = Define `
 (r_aarch64_tlsld_ldst16_dtprel_lo12 : num= (( 533:num)))`;

val _ = Define `
 (r_aarch64_tlsld_ldst16_dtprel_lo12_nc : num= (( 534:num)))`;

val _ = Define `
 (r_aarch64_tlsld_ldst32_dtprel_lo12 : num= (( 535:num)))`;

val _ = Define `
 (r_aarch64_tlsld_ldst32_dtprel_lo12_nc : num= (( 536:num)))`;

val _ = Define `
 (r_aarch64_tlsld_ldst64_dtprel_lo12 : num= (( 537:num)))`;

val _ = Define `
 (r_aarch64_tlsld_ldst64_dtprel_lo12_nc : num= (( 538:num)))`;

val _ = Define `
 (r_aarch64_tlsld_ldst128_dtprel_lo12 : num= (( 572:num)))`;

val _ = Define `
 (r_aarch64_tlsld_ldst128_dtprel_lo12_nc : num= (( 573:num)))`;


val _ = Define `
 (r_aarch64_tlsie_movw_gottprel_g1 : num= (( 539:num)))`;

val _ = Define `
 (r_aarch64_tlsie_movw_gottprel_g0_nc : num= (( 540:num)))`;

val _ = Define `
 (r_aarch64_tlsie_movw_gottprel_page21 : num= (( 541:num)))`;

val _ = Define `
 (r_aarch64_tlsie_movw_gottprel_lo12_nc : num= (( 542:num)))`;

val _ = Define `
 (r_aarch64_tlsie_movw_gottprel_prel19 : num= (( 543:num)))`;


val _ = Define `
 (r_aarch64_tlsle_movw_tprel_g2 : num= (( 544:num)))`;

val _ = Define `
 (r_aarch64_tlsle_movw_tprel_g1 : num= (( 545:num)))`;

val _ = Define `
 (r_aarch64_tlsle_movw_tprel_g1_nc : num= (( 546:num)))`;

val _ = Define `
 (r_aarch64_tlsle_movw_tprel_g0 : num= (( 547:num)))`;

val _ = Define `
 (r_aarch64_tlsle_movw_tprel_g0_nc : num= (( 548:num)))`;

val _ = Define `
 (r_aarch64_add_tprel_hi12 : num= (( 549:num)))`;

val _ = Define `
 (r_aarch64_add_tprel_lo12 : num= (( 550:num)))`;

val _ = Define `
 (r_aarch64_add_tprel_lo12_nc : num= (( 551:num)))`;

val _ = Define `
 (r_aarch64_ldst8_tprel_lo12 : num= (( 552:num)))`;

val _ = Define `
 (r_aarch64_ldst8_tprel_lo12_nc : num= (( 553:num)))`;

val _ = Define `
 (r_aarch64_ldst16_tprel_lo12 : num= (( 554:num)))`;

val _ = Define `
 (r_aarch64_ldst16_tprel_lo12_nc : num= (( 555:num)))`;

val _ = Define `
 (r_aarch64_ldst32_tprel_lo12 : num= (( 556:num)))`;

val _ = Define `
 (r_aarch64_ldst32_tprel_lo12_nc : num= (( 557:num)))`;

val _ = Define `
 (r_aarch64_ldst64_tprel_lo12 : num= (( 558:num)))`;

val _ = Define `
 (r_aarch64_ldst64_tprel_lo12_nc : num= (( 559:num)))`;

val _ = Define `
 (r_aarch64_ldst128_tprel_lo12 : num= (( 570:num)))`;

val _ = Define `
 (r_aarch64_ldst128_tprel_lo12_nc : num= (( 571:num)))`;


val _ = Define `
 (r_aarch64_tlsdesc_ld_prel19 : num= (( 560:num)))`;

val _ = Define `
 (r_aarch64_tlsdesc_adr_prel21 : num= (( 561:num)))`;

val _ = Define `
 (r_aarch64_tlsdesc_adr_page21 : num= (( 562:num)))`;

val _ = Define `
 (r_aarch64_tlsdesc_ld64_lo12 : num= (( 563:num)))`;

val _ = Define `
 (r_aarch64_tlsdesc_add_lo12 : num= (( 564:num)))`;

val _ = Define `
 (r_aarch64_tlsdesc_off_g1 : num= (( 565:num)))`;

val _ = Define `
 (r_aarch64_tlsdesc_off_g0_nc : num= (( 566:num)))`;

val _ = Define `
 (r_aarch64_tlsdesc_ldr : num= (( 567:num)))`;

val _ = Define `
 (r_aarch64_tlsdesc_add : num= (( 568:num)))`;

val _ = Define `
 (r_aarch64_tlsdesc_call : num= (( 569:num)))`;


val _ = Define `
 (r_aarch64_copy : num= (( 1024:num)))`;

val _ = Define `
 (r_aarch64_glob_dat : num= (( 1025:num)))`;

val _ = Define `
 (r_aarch64_jump_slot : num= (( 1026:num)))`;

val _ = Define `
 (r_aarch64_relative : num= (( 1027:num)))`;

val _ = Define `
 (r_aarch64_tls_dtprel64 : num= (( 1028:num)))`;

val _ = Define `
 (r_aarch64_tls_dtpmod64 : num= (( 1029:num)))`;

val _ = Define `
 (r_aarch64_tls_tprel64 : num= (( 1030:num)))`;

val _ = Define `
 (r_aarch64_tlsdesc : num= (( 1031:num)))`;

val _ = Define `
 (r_aarch64_irelative : num= (( 1032:num)))`;


(** [string_of_aarch64_relocation_type m] produces a string representation of the
  * relocation type [m].
  *)
(*val string_of_aarch64_relocation_type : natural -> string*)

(*val aarch64_le_reloc : forall 'abifeature. reloc_fn 'abifeature*)
val _ = Define `
 (aarch64_le_reloc r=  
 (if r = r_aarch64_none then
    (F, (\ img .  (\ site_addr .  (\ rr .  (( 0:num), (\ s .  \ a .  \ e .  e))))))
  else
    (F, noop_reloc_apply)))`;

    
(** [abi_aarch64_apply_relocation rel s_val p_val got_val ef] produces an AST
  * of the relocation calculation for relocation type [rel] using [s_val], [p_val],
  * and [got_val] as primitive components.
  *
  * TODO: unclear from ABI spec. whether overflow check on relocations is
  * supposed to cause relocation to fail if not satisfied or whether there is
  * wrap-around.  Resolve.
  *)
(*val abi_aarch64_apply_relocation : elf64_relocation_a -> integer -> integer ->
  integer -> elf64_file ->
    error (Map.map elf64_addr (relocation_operator_expression integer * integer_bit_width * can_fail integer))*)
val _ = Define `
 (abi_aarch64_apply_relocation rel s_val p_val got_val ef=  
 (if is_elf64_relocatable_file ef.elf64_file_header then
    let rel_type = (get_elf64_relocation_a_type rel) in
    let a_val    = (w2i rel.elf64_ra_addend) in
      (** No width, no calculation *)
      if rel_type = r_aarch64_none then
        return FEMPTY
      (** No width, no calculation *)
      else if rel_type = r_aarch64_withdrawn then
        return FEMPTY
      (** Signed 64 bit width, calculation: S + A *)
      else if rel_type = r_aarch64_abs64 then
      	let result = (Lift (s_val + a_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I64, CannotFail)))
      (** Signed 32 bit width, calculation: S + A *)
      else if rel_type = r_aarch64_abs32 then
      	let result = (Lift (s_val + a_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I32, CanFail)))
      (** Signed 16 bith width, calculation: S + A *)
      else if rel_type = r_aarch64_abs16 then
      	let result = (Lift (s_val + a_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I16, CanFail)))
      (** Signed 64 bit width, calculation: S + A - P *)
      else if rel_type = r_aarch64_prel64 then
      	let result = (Lift ((s_val + a_val) - p_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I64, CannotFail)))
      (** Signed 32 bit width, calculation: S + A - P *)
      else if rel_type = r_aarch64_prel32 then
      	let result = (Lift ((s_val + a_val) - p_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I32, CanFail)))
      (** Signed 16 bit width, calculation: S + A - P *)
      else if rel_type = r_aarch64_prel16 then
      	let result = (Lift ((s_val + a_val) - p_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I16, CanFail)))
      else if rel_type = r_aarch64_movw_uabs_g0 then
      	let result = (Lift (s_val + a_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, U16, CanFail)))
      else if rel_type = r_aarch64_movw_uabs_g0_nc then
      	let result = (Lift (s_val + a_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, U16, CannotFail)))
      else if rel_type = r_aarch64_movw_uabs_g1 then
      	let result = (Lift (s_val + a_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, U32, CanFail)))
      else if rel_type = r_aarch64_movw_uabs_g1_nc then
      	let result = (Lift (s_val + a_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, U32, CannotFail)))
      else if rel_type = r_aarch64_movw_uabs_g2 then
      	let result = (Lift (s_val + a_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, U48, CanFail)))
      else if rel_type = r_aarch64_movw_uabs_g2_nc then
      	let result = (Lift (s_val + a_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, U48, CannotFail)))
      else if rel_type = r_aarch64_movw_uabs_g3 then
      	let result = (Lift (s_val + a_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, U64, CannotFail)))
      else if rel_type = r_aarch64_movw_sabs_g0 then
      	let result = (Lift (s_val + a_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I16, CanFail)))
      else if rel_type = r_aarch64_movw_sabs_g1 then
      	let result = (Lift (s_val + a_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I32, CanFail)))
      else if rel_type = r_aarch64_movw_sabs_g2 then
      	let result = (Lift (s_val + a_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I48, CanFail)))
      else if rel_type = r_aarch64_ld_prel_lo19 then
      	let result = (Lift ((s_val + a_val) - p_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I20, CanFail)))
      else if rel_type = r_aarch64_adr_prel_lo21 then
      	let result = (Lift ((s_val + a_val) - p_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I20, CanFail)))
      else if rel_type = r_aarch64_adr_prel_pg_hi21 then
      	let result = (Minus(Apply(Page, Lift (s_val + a_val)), Apply(Page, Lift p_val))) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I32, CanFail)))
      else if rel_type = r_aarch64_adr_prel_pg_hi21_nc then
      	let result = (Minus (Apply(Page, Lift (s_val + a_val)), Apply(Page, Lift p_val))) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I32, CannotFail)))
      else if rel_type = r_aarch64_add_abs_lo12_nc then
      	let result = (Lift (s_val + a_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I32, CannotFail)))
      else if rel_type = r_aarch64_ldst8_abs_lo12_nc then
      	let result = (Lift (s_val + a_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I32, CannotFail)))
      else if rel_type = r_aarch64_ldst16_abs_lo12_nc then
      	let result = (Lift (s_val + a_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I32, CannotFail)))
      else if rel_type = r_aarch64_ldst32_abs_lo12_nc then
      	let result = (Lift (s_val + a_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I32, CannotFail)))
      else if rel_type = r_aarch64_ldst64_abs_lo12_nc then
      	let result = (Lift (s_val + a_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I32, CannotFail)))
      else if rel_type = r_aarch64_ldst128_abs_lo12_nc then
      	let result = (Lift (s_val + a_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I32, CannotFail)))
      else if rel_type = r_aarch64_tstbr14 then
      	let result = (Lift ((s_val + a_val) - p_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I15, CanFail)))
      else if rel_type = r_aarch64_condbr19 then
      	let result = (Lift ((s_val + a_val) - p_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I20, CanFail)))
      else if rel_type = r_aarch64_jump26 then
      	let result = (Lift ((s_val + a_val) - p_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I27, CanFail)))
      else if rel_type = r_aarch64_call26 then
      	let result = (Lift ((s_val + a_val) - p_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I27, CanFail)))
      else if rel_type = r_aarch64_movw_prel_g0 then
      	let result = (Lift ((s_val + a_val) - p_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I16, CanFail)))
      else if rel_type = r_aarch64_movw_prel_g0_nc then
      	let result = (Lift ((s_val + a_val) - p_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I16, CannotFail)))
      else if rel_type = r_aarch64_movw_prel_g1 then
      	let result = (Lift ((s_val + a_val) - p_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I32, CanFail)))
      else if rel_type = r_aarch64_movw_prel_g1_nc then
      	let result = (Lift ((s_val + a_val) - p_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I32, CannotFail)))
      else if rel_type = r_aarch64_movw_prel_g2 then
      	let result = (Lift ((s_val + a_val) - p_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I48, CanFail)))
      else if rel_type = r_aarch64_movw_prel_g2_nc then
      	let result = (Lift ((s_val + a_val) - p_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I48, CannotFail)))
      else if rel_type = r_aarch64_movw_prel_g3 then
      	let result = (Lift ((s_val + a_val) - p_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I64, CannotFail)))
      else if rel_type = r_aarch64_movw_gotoff_g0 then
      	let result = (Minus (Apply(G, Apply(GDat, Lift (s_val + a_val))), Lift got_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I16, CanFail)))
      else if rel_type = r_aarch64_movw_gotoff_g0_nc then
      	let result = (Minus (Apply(G, Apply(GDat, Lift (s_val + a_val))), Lift got_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I16, CannotFail)))
      else if rel_type = r_aarch64_movw_gotoff_g1 then
      	let result = (Minus (Apply(G, Apply(GDat, Lift (s_val + a_val))), Lift got_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I32, CanFail)))
      else if rel_type = r_aarch64_movw_gotoff_g1_nc then
      	let result = (Minus (Apply(G, Apply(GDat, Lift (s_val + a_val))), Lift got_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I32, CannotFail)))
      else if rel_type = r_aarch64_movw_gotoff_g2 then
      	let result = (Minus (Apply(G, Apply(GDat, Lift (s_val + a_val))), Lift got_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I48, CanFail)))
      else if rel_type = r_aarch64_movw_gotoff_g2_nc then
      	let result = (Minus (Apply(G, Apply(GDat, Lift (s_val + a_val))), Lift got_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I32, CannotFail)))
      else if rel_type = r_aarch64_movw_gotoff_g3 then
      	let result = (Minus (Apply(G, Apply(GDat, Lift (s_val + a_val))), Lift got_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I64, CannotFail)))
      else if rel_type = r_aarch64_gotrel64 then
      	let result = (Lift ((s_val + a_val) - got_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I64, CannotFail)))
      else if rel_type = r_aarch64_gotrel32 then
      	let result = (Lift ((s_val + a_val) - got_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I32, CanFail)))
      else if rel_type = r_aarch64_got_ld_prel19 then
      	let result = (Minus (Apply(G, Apply(GDat, Lift (s_val + a_val))), Lift p_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I20, CanFail)))
      else if rel_type = r_aarch64_got_ld64_gotoff_lo15 then
      	let result = (Minus (Apply(G, Apply(GDat, Lift (s_val + a_val))), Lift got_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, U15, CanFail)))
      else if rel_type = r_aarch64_adr_got_page then
      	let result = (Minus (Apply(Page, Apply(G, Apply(GDat, Lift (s_val + a_val)))), Apply(Page, Lift p_val))) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I32, CanFail)))
      else if rel_type = r_aarch64_ld64_got_lo12_nc then
        (** requires ad hoc check *)
      	let result = (Apply(G, Apply(GDat, Lift (s_val + a_val)))) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I20, CannotFail)))
      else if rel_type = r_aarch64_ld64_gotpage_lo15 then
        (** requires ad hoc check *)
      	let result = (Minus(Apply(G, Apply(GDat, Lift (s_val + a_val))), Apply(Page, Lift got_val))) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, U15, CanFail)))
      else if rel_type = r_aarch64_tlsgd_adr_prel21 then
      	let result = (Minus(Apply(G, Apply2(GTLSIdx, Lift s_val, Lift a_val)), Lift p_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I20, CanFail)))
      else if rel_type = r_aarch64_tlsgd_adr_page21 then
      	let result = (Minus(Apply(Page, Apply(G, Apply2(GTLSIdx, Lift s_val, Lift a_val))), Apply(Page, Lift p_val))) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I32, CanFail)))
      else if rel_type = r_aarch64_tlsgd_add_lo12_nc then
      	let result = (Apply(G, Apply2(GTLSIdx, Lift s_val, Lift a_val))) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I12, CannotFail)))
      else if rel_type = r_aarch64_tlsgd_movw_g1 then
        (** requires ad hoc check *)
      	let result = (Minus(Apply(G, Apply2(GTLSIdx, Lift s_val, Lift a_val)), Lift got_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I16, CannotFail)))
      else if rel_type = r_aarch64_tlsgd_movw_g0_nc then
      	let result = (Minus(Apply(G, Apply2 (GTLSIdx, Lift s_val, Lift a_val)), Lift got_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I16, CannotFail)))
      else if rel_type = r_aarch64_tlsld_adr_prel21 then
        let result = (Minus(Apply(G, Apply(GLDM, Lift s_val)), Lift p_val)) in
       	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I20, CanFail)))
      else if rel_type = r_aarch64_tlsld_adr_page21 then
        let result = (Minus(Apply(G, Apply(GLDM, Lift s_val)), Apply(Page, Lift p_val))) in
       	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I32, CanFail)))
      else if rel_type = r_aarch64_tlsld_add_lo12_nc then
        let result = (Apply(G, Apply(GLDM, Lift s_val))) in
       	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I32, CannotFail)))
      else if rel_type = r_aarch64_tlsld_movw_g1 then
        let result = (Minus(Apply(G, Apply(GLDM, Lift s_val)), Lift got_val)) in
       	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I15, CanFail)))
      else if rel_type = r_aarch64_tlsld_movw_g0_nc then
        let result = (Minus(Apply(G, Apply(GLDM, Lift s_val)), Lift got_val)) in
       	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I15, CannotFail)))
      else if rel_type = r_aarch64_tlsld_ld_prel19 then
        let result = (Minus(Apply(G, Apply(GLDM, Lift s_val)), Lift p_val)) in
       	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I20, CanFail)))
      else if rel_type = r_aarch64_tlsld_movw_dtprel_g2 then
        let result = (Apply(DTPRel, Lift(s_val + a_val))) in
       	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I15, CanFail)))
      else if rel_type = r_aarch64_tlsld_movw_dtprel_g1 then
        let result = (Apply(DTPRel, Lift(s_val + a_val))) in
       	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I15, CanFail)))
      else if rel_type = r_aarch64_tlsld_movw_dtprel_g1_nc then
        let result = (Apply(DTPRel, Lift(s_val + a_val))) in
       	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I15, CannotFail)))
      else if rel_type = r_aarch64_tlsld_movw_dtprel_g0 then
        let result = (Apply(DTPRel, Lift(s_val + a_val))) in
       	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I15, CanFail)))
      else if rel_type = r_aarch64_tlsld_movw_dtprel_g0_nc then
        let result = (Apply(DTPRel, Lift(s_val + a_val))) in
       	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I15, CannotFail)))
      else if rel_type = r_aarch64_tlsld_add_dtprel_hi12 then
        let result = (Apply(DTPRel, Lift(s_val + a_val))) in
       	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, U24, CanFail)))
      else if rel_type = r_aarch64_tlsld_add_dtprel_lo12 then
        let result = (Apply(DTPRel, Lift(s_val + a_val))) in
       	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, U12, CanFail)))
      else if rel_type = r_aarch64_tlsld_add_dtprel_lo12_nc then
        let result = (Apply(DTPRel, Lift(s_val + a_val))) in
       	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, U12, CannotFail)))
      else if rel_type = r_aarch64_tlsld_ldst8_dtprel_lo12 then
        let result = (Apply(DTPRel, Lift(s_val + a_val))) in
       	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, U12, CanFail)))
      else if rel_type = r_aarch64_tlsld_ldst8_dtprel_lo12_nc then
        let result = (Apply(DTPRel, Lift(s_val + a_val))) in
       	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, U12, CannotFail)))
      else if rel_type = r_aarch64_tlsld_ldst16_dtprel_lo12 then
        let result = (Apply(DTPRel, Lift(s_val + a_val))) in
       	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, U12, CanFail)))
      else if rel_type = r_aarch64_tlsld_ldst16_dtprel_lo12_nc then
        let result = (Apply(DTPRel, Lift(s_val + a_val))) in
       	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, U12, CannotFail)))
      else if rel_type = r_aarch64_tlsld_ldst32_dtprel_lo12 then
        let result = (Apply(DTPRel, Lift(s_val + a_val))) in
       	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, U12, CanFail)))
      else if rel_type = r_aarch64_tlsld_ldst32_dtprel_lo12_nc then
        let result = (Apply(DTPRel, Lift(s_val + a_val))) in
       	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, U12, CannotFail)))
      else if rel_type = r_aarch64_tlsld_ldst64_dtprel_lo12 then
        let result = (Apply(DTPRel, Lift(s_val + a_val))) in
       	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, U12, CanFail)))
      else if rel_type = r_aarch64_tlsld_ldst64_dtprel_lo12_nc then
        let result = (Apply(DTPRel, Lift(s_val + a_val))) in
       	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, U12, CannotFail)))
      else if rel_type = r_aarch64_tlsld_ldst128_dtprel_lo12 then
        let result = (Apply(DTPRel, Lift(s_val + a_val))) in
       	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, U12, CanFail)))
      else if rel_type = r_aarch64_tlsld_ldst128_dtprel_lo12_nc then
        let result = (Apply(DTPRel, Lift(s_val + a_val))) in
       	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, U12, CannotFail)))
      else if rel_type = r_aarch64_tlsie_movw_gottprel_g1 then
        let result = (Minus(Apply(G, Apply(GTPRel, Lift (s_val + a_val))), Lift got_val)) in
       	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I15, CanFail)))
      else if rel_type = r_aarch64_tlsie_movw_gottprel_g0_nc then
        let result = (Minus(Apply(G, Apply(GTPRel, Lift (s_val + a_val))), Lift got_val)) in
       	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I15, CannotFail)))
      else if rel_type = r_aarch64_tlsie_movw_gottprel_page21 then
        let result = (Minus(Apply(Page, Apply(G, Apply(GTPRel, Lift (s_val + a_val)))), Apply(Page, Lift p_val))) in
       	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I32, CanFail)))
      else if rel_type = r_aarch64_tlsie_movw_gottprel_lo12_nc then
        (** requires ad hoc check *)
        let result = (Apply(G, Apply(GTPRel, Lift (s_val + a_val)))) in
       	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I8, CannotFail)))
      else if rel_type = r_aarch64_tlsie_movw_gottprel_prel19 then
        let result = (Minus(Apply(G, Apply(GTPRel, Lift (s_val + a_val))), Lift p_val)) in
       	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I20, CanFail)))
      else if rel_type = r_aarch64_tlsle_movw_tprel_g2 then
      	let result = (Apply(TPRel, Lift (s_val + a_val))) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, U16, CanFail)))
      else if rel_type = r_aarch64_tlsle_movw_tprel_g1 then
      	let result = (Apply(TPRel, Lift (s_val + a_val))) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, U16, CanFail)))
      else if rel_type = r_aarch64_tlsle_movw_tprel_g1_nc then
      	let result = (Apply(TPRel, Lift (s_val + a_val))) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, U16, CannotFail)))
      else if rel_type = r_aarch64_tlsle_movw_tprel_g0 then
      	let result = (Apply(TPRel, Lift (s_val + a_val))) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, U16, CanFail)))
      else if rel_type = r_aarch64_tlsle_movw_tprel_g0_nc then
      	let result = (Apply(TPRel, Lift (s_val + a_val))) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, U16, CannotFail)))
      else if rel_type = r_aarch64_add_tprel_hi12 then
      	let result = (Apply(TPRel, Lift (s_val + a_val))) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, U24, CanFail)))
      else if rel_type = r_aarch64_add_tprel_lo12 then
      	let result = (Apply(TPRel, Lift (s_val + a_val))) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, U12, CanFail)))
      else if rel_type = r_aarch64_add_tprel_lo12_nc then
      	let result = (Apply(TPRel, Lift (s_val + a_val))) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, U12, CannotFail)))
      else if rel_type = r_aarch64_ldst8_tprel_lo12 then
      	let result = (Apply(TPRel, Lift (s_val + a_val))) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, U12, CanFail)))
      else if rel_type = r_aarch64_ldst8_tprel_lo12_nc then
      	let result = (Apply(TPRel, Lift (s_val + a_val))) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, U12, CannotFail)))
      else if rel_type = r_aarch64_ldst16_tprel_lo12 then
      	let result = (Apply(TPRel, Lift (s_val + a_val))) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, U12, CanFail)))
      else if rel_type = r_aarch64_ldst16_tprel_lo12_nc then
      	let result = (Apply(TPRel, Lift (s_val + a_val))) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, U12, CannotFail)))
      else if rel_type = r_aarch64_ldst32_tprel_lo12 then
      	let result = (Apply(TPRel, Lift (s_val + a_val))) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, U12, CanFail)))
      else if rel_type = r_aarch64_ldst32_tprel_lo12_nc then
      	let result = (Apply(TPRel, Lift (s_val + a_val))) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, U12, CannotFail)))
      else if rel_type = r_aarch64_ldst64_tprel_lo12 then
      	let result = (Apply(TPRel, Lift (s_val + a_val))) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, U12, CanFail)))
      else if rel_type = r_aarch64_ldst64_tprel_lo12_nc then
      	let result = (Apply(TPRel, Lift (s_val + a_val))) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, U12, CannotFail)))
      else if rel_type = r_aarch64_ldst128_tprel_lo12 then
      	let result = (Apply(TPRel, Lift (s_val + a_val))) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, U12, CanFail)))
      else if rel_type = r_aarch64_ldst128_tprel_lo12_nc then
      	let result = (Apply(TPRel, Lift (s_val + a_val))) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, U12, CannotFail)))
      else if rel_type = r_aarch64_tlsdesc_ld_prel19 then
        (** requires ad hoc test *)
      	let result = (Minus(Apply(G, Apply(GTLSDesc, Lift (s_val + a_val))), Lift p_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I20, CanFail)))
      else if rel_type = r_aarch64_tlsdesc_adr_prel21 then
      	let result = (Minus (Apply(G, Apply(GTLSDesc, Lift (s_val + a_val))), Lift p_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I20, CanFail)))
      else if rel_type = r_aarch64_tlsdesc_adr_page21 then
      	let result = (Minus(Apply(Page, Apply(G, Apply(GTLSDesc, Lift(s_val + a_val)))), Apply(Page, Lift p_val))) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I32, CanFail)))
      else if rel_type = r_aarch64_tlsdesc_ld64_lo12 then
        (** requires ad hoc test *)
      	let result = (Apply(G, Apply(GTLSDesc, Lift (s_val + a_val)))) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I20, CanFail)))
      else if rel_type = r_aarch64_tlsdesc_add_lo12 then
      	let result = (Apply(G, Apply(GTLSDesc, Lift (s_val + a_val)))) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I32, CannotFail)))
      else if rel_type = r_aarch64_tlsdesc_off_g1 then
      	let result = (Minus(Apply(G, Apply(GTLSDesc, Lift (s_val + a_val))), Lift got_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I32, CanFail)))
      else if rel_type = r_aarch64_tlsdesc_off_g0_nc then
      	let result = (Minus(Apply(G, Apply(GTLSDesc, Lift (s_val + a_val))), Lift got_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I32, CannotFail)))
      else if rel_type = r_aarch64_tlsdesc_ldr then
        return FEMPTY
      else if rel_type = r_aarch64_tlsdesc_add then
        return FEMPTY
      else if rel_type = r_aarch64_tlsdesc_call then
        return FEMPTY
      else if rel_type = r_aarch64_copy then
        fail0 "AARCH64_COPY"
      else if rel_type = r_aarch64_glob_dat then
      	let result = (Lift (s_val + a_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I64, CannotFail)))
      else if rel_type = r_aarch64_jump_slot then
      	let result = (Lift (s_val + a_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I64, CannotFail)))
      else if rel_type = r_aarch64_relative then
      	let result = (Plus(Apply(Delta, Lift s_val), Lift a_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I64, CannotFail)))
      else if rel_type = r_aarch64_tls_dtprel64 then
      	let result = (Apply(DTPRel, Lift (s_val + a_val))) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I64, CannotFail)))
      else if rel_type = r_aarch64_tls_dtpmod64 then
      	let result = (Apply(LDM, Lift s_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I64, CannotFail)))
      else if rel_type = r_aarch64_tls_tprel64 then
      	let result = (Apply(TPRel, Lift (s_val + a_val))) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I64, CannotFail)))
      else if rel_type = r_aarch64_tlsdesc then
      	let result = (Apply(TLSDesc, Lift (s_val + a_val))) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I64, CannotFail)))
      else if rel_type = r_aarch64_irelative then
      	let result = (Apply(Indirect, Plus (Apply(Delta, Lift s_val), Lift a_val))) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I64, CannotFail)))
      else
        fail0 "Invalid AARCH64 relocation type"
  else
  	fail0 "abi_aarch64_apply_relocation: not a relocatable file"))`;

val _ = export_theory()

