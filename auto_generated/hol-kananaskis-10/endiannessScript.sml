(*Generated by Lem from endianness.lem.*)
open HolKernel Parse boolLib bossLib;
open lem_stringTheory showTheory;

val _ = numLib.prefer_num();



val _ = new_theory "endianness"

(** [endian.lem] defines a type for describing the endianness of an ELF file,
  * and functions and other operations over that type.
  *)

(*open import String*)
(*open import Show*)

(** Type [endianness] describes the endianness of an ELF file.  This is deduced from
  * the first few bytes (magic number, etc.) of the ELF header.
  *)
val _ = Hol_datatype `
 endianness
  = Big    (* Big endian *)
  | Little`;
 (* Little endian *)

(** [default_endianness] is a default endianness to use when reading in the ELF header
  * before we have deduced from its entries what the rest of the file is encoded
  * with.
  *)
(*val default_endianness : endianness*)
val _ = Define `
 (default_endianness=  Little)`;


(** [string_of_endianness e] produces a string representation of the [endianness] value
  * [e].
  *)
(*val string_of_endianness : endianness -> string*)
val _ = Define `
 (string_of_endianness e=  
 ((case e of
      Big    => "Big"
    | Little => "Little"
  )))`;


val _ = Define `
(instance_Show_Show_Endianness_endianness_dict= (<|

  show_method := string_of_endianness|>))`;

val _ = export_theory()

