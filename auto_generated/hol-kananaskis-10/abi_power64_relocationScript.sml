(*Generated by Lem from abis/power64/abi_power64_relocation.lem.*)
open HolKernel Parse boolLib bossLib;
open lem_numTheory lem_basic_classesTheory lem_maybeTheory lem_stringTheory missing_pervasivesTheory errorTheory elf_types_native_uintTheory elf_headerTheory lem_mapTheory elf_symbol_tableTheory elf_fileTheory elf_relocationTheory abi_utilitiesTheory;

val _ = numLib.prefer_num();



val _ = new_theory "abi_power64_relocation"

(** [abi_power64_relocation] contains types and definitions specific to
  * relocations in the Power64 ABI
  *)

(*open import Basic_classes*)
(*open import Map*)
(*open import Maybe*)
(*open import Num*)
(*open import String*)

(*open import Error*)
(*open import Missing_pervasives*)

(*open import Elf_types_native_uint*)
(*open import Elf_file*)
(*open import Elf_header*)
(*open import Elf_relocation*)
(*open import Elf_symbol_table*)

(*open import Abi_utilities*)

(** Power64 relocation types *)

val _ = Define `
 (r_ppc64_none : num= (( 0:num)))`;

val _ = Define `
 (r_ppc64_addr32 : num= (( 1:num)))`;

val _ = Define `
 (r_ppc64_addr24 : num= (( 2:num)))`;

val _ = Define `
 (r_ppc64_addr16 : num= (( 3:num)))`;

val _ = Define `
 (r_ppc64_addr16_lo : num= (( 4:num)))`;

val _ = Define `
 (r_ppc64_addr16_hi : num= (( 5:num)))`;

val _ = Define `
 (r_ppc64_addr16_ha : num= (( 6:num)))`;

val _ = Define `
 (r_ppc64_addr14 : num= (( 7:num)))`;

val _ = Define `
 (r_ppc64_addr14_brtaken : num= (( 8:num)))`;

val _ = Define `
 (r_ppc64_addr14_brntaken : num= (( 9:num)))`;

val _ = Define `
 (r_ppc64_rel24 : num= (( 10:num)))`;

val _ = Define `
 (r_ppc64_rel14 : num= (( 11:num)))`;

val _ = Define `
 (r_ppc64_rel14_brtaken : num= (( 12:num)))`;

val _ = Define `
 (r_ppc64_rel14_brntaken : num= (( 13:num)))`;

val _ = Define `
 (r_ppc64_got16 : num= (( 14:num)))`;

val _ = Define `
 (r_ppc64_got16_lo : num= (( 15:num)))`;

val _ = Define `
 (r_ppc64_got16_hi : num= (( 16:num)))`;

val _ = Define `
 (r_ppc64_got16_ha : num= (( 17:num)))`;

val _ = Define `
 (r_ppc64_copy : num= (( 19:num)))`;

val _ = Define `
 (r_ppc64_glob_dat : num= (( 20:num)))`;

val _ = Define `
 (r_ppc64_jmp_slot : num= (( 21:num)))`;

val _ = Define `
 (r_ppc64_relative : num= (( 22:num)))`;

val _ = Define `
 (r_ppc64_uaddr32 : num= (( 24:num)))`;

val _ = Define `
 (r_ppc64_uaddr16 : num= (( 25:num)))`;

val _ = Define `
 (r_ppc64_rel32 : num= (( 26:num)))`;

val _ = Define `
 (r_ppc64_plt32 : num= (( 27:num)))`;

val _ = Define `
 (r_ppc64_pltrel32 : num= (( 28:num)))`;

val _ = Define `
 (r_ppc64_plt16_lo : num= (( 29:num)))`;

val _ = Define `
 (r_ppc64_plt16_hi : num= (( 30:num)))`;

val _ = Define `
 (r_ppc64_plt16_ha : num= (( 31:num)))`;

val _ = Define `
 (r_ppc64_sectoff : num= (( 33:num)))`;

val _ = Define `
 (r_ppc64_sectoff_lo : num= (( 34:num)))`;

val _ = Define `
 (r_ppc64_sectoff_hi : num= (( 35:num)))`;

val _ = Define `
 (r_ppc64_sectoff_ha : num= (( 36:num)))`;

val _ = Define `
 (r_ppc64_addr30 : num= (( 37:num)))`;

val _ = Define `
 (r_ppc64_addr64 : num= (( 38:num)))`;

val _ = Define `
 (r_ppc64_addr16_higher : num= (( 39:num)))`;

val _ = Define `
 (r_ppc64_addr16_highera : num= (( 40:num)))`;

val _ = Define `
 (r_ppc64_addr16_highest : num= (( 41:num)))`;

val _ = Define `
 (r_ppc64_addr16_highesta : num= (( 42:num)))`;

val _ = Define `
 (r_ppc64_uaddr64 : num= (( 43:num)))`;

val _ = Define `
 (r_ppc64_rel64 : num= (( 44:num)))`;

val _ = Define `
 (r_ppc64_plt64 : num= (( 45:num)))`;

val _ = Define `
 (r_ppc64_pltrel64 : num= (( 46:num)))`;

val _ = Define `
 (r_ppc64_toc16 : num= (( 47:num)))`;

val _ = Define `
 (r_ppc64_toc16_lo : num= (( 48:num)))`;

val _ = Define `
 (r_ppc64_toc16_hi : num= (( 49:num)))`;

val _ = Define `
 (r_ppc64_toc16_ha : num= (( 50:num)))`;

val _ = Define `
 (r_ppc64_toc : num= (( 51:num)))`;

val _ = Define `
 (r_ppc64_pltgot16 : num= (( 52:num)))`;

val _ = Define `
 (r_ppc64_pltgot16_lo : num= (( 53:num)))`;

val _ = Define `
 (r_ppc64_pltgot16_hi : num= (( 54:num)))`;

val _ = Define `
 (r_ppc64_pltgot16_ha : num= (( 55:num)))`;

val _ = Define `
 (r_ppc64_addr16_ds : num= (( 56:num)))`;

val _ = Define `
 (r_ppc64_addr16_lo_ds : num= (( 57:num)))`;

val _ = Define `
 (r_ppc64_got16_ds : num= (( 58:num)))`;

val _ = Define `
 (r_ppc64_got16_lo_ds : num= (( 59:num)))`;

val _ = Define `
 (r_ppc64_plt16_lo_ds : num= (( 60:num)))`;

val _ = Define `
 (r_ppc64_sectoff_ds : num= (( 61:num)))`;

val _ = Define `
 (r_ppc64_sectoff_lo_ds : num= (( 62:num)))`;

val _ = Define `
 (r_ppc64_toc16_ds : num= (( 63:num)))`;

val _ = Define `
 (r_ppc64_toc16_lo_ds : num= (( 64:num)))`;

val _ = Define `
 (r_ppc64_pltgot16_ds : num= (( 65:num)))`;

val _ = Define `
 (r_ppc64_pltgot16_lo_ds : num= (( 66:num)))`;

val _ = Define `
 (r_ppc64_tls : num= (( 67:num)))`;

val _ = Define `
 (r_ppc64_dtpmod64 : num= (( 68:num)))`;

val _ = Define `
 (r_ppc64_tprel16 : num= (( 69:num)))`;

val _ = Define `
 (r_ppc64_tprel16_lo : num= (( 60:num)))`;

val _ = Define `
 (r_ppc64_tprel16_hi : num= (( 71:num)))`;

val _ = Define `
 (r_ppc64_tprel16_ha : num= (( 72:num)))`;

val _ = Define `
 (r_ppc64_tprel64 : num= (( 73:num)))`;

val _ = Define `
 (r_ppc64_dtprel16 : num= (( 74:num)))`;

val _ = Define `
 (r_ppc64_dtprel16_lo : num= (( 75:num)))`;

val _ = Define `
 (r_ppc64_dtprel16_hi : num= (( 76:num)))`;

val _ = Define `
 (r_ppc64_dtprel16_ha : num= (( 77:num)))`;

val _ = Define `
 (r_ppc64_dtprel64 : num= (( 78:num)))`;

val _ = Define `
 (r_ppc64_got_tlsgd16 : num= (( 79:num)))`;

val _ = Define `
 (r_ppc64_got_tlsgd16_lo : num= (( 80:num)))`;

val _ = Define `
 (r_ppc64_got_tlsgd16_hi : num= (( 81:num)))`;

val _ = Define `
 (r_ppc64_got_tlsgd16_ha : num= (( 82:num)))`;

val _ = Define `
 (r_ppc64_got_tlsld16 : num= (( 83:num)))`;

val _ = Define `
 (r_ppc64_got_tlsld16_lo : num= (( 84:num)))`;

val _ = Define `
 (r_ppc64_got_tlsld16_hi : num= (( 85:num)))`;

val _ = Define `
 (r_ppc64_got_tlsld16_ha : num= (( 86:num)))`;

val _ = Define `
 (r_ppc64_got_tprel16_ds : num= (( 87:num)))`;

val _ = Define `
 (r_ppc64_got_tprel16_lo_ds : num= (( 88:num)))`;

val _ = Define `
 (r_ppc64_got_tprel16_hi : num= (( 89:num)))`;

val _ = Define `
 (r_ppc64_got_tprel16_ha : num= (( 90:num)))`;

val _ = Define `
 (r_ppc64_got_dtprel16_ds : num= (( 91:num)))`;

val _ = Define `
 (r_ppc64_got_dtprel16_lo_ds : num= (( 92:num)))`;

val _ = Define `
 (r_ppc64_got_dtprel16_hi : num= (( 93:num)))`;

val _ = Define `
 (r_ppc64_got_dtprel16_ha : num= (( 94:num)))`;

val _ = Define `
 (r_ppc64_tprel16_ds : num= (( 95:num)))`;

val _ = Define `
 (r_ppc64_tprel16_lo_ds : num= (( 96:num)))`;

val _ = Define `
 (r_ppc64_tprel16_higher : num= (( 97:num)))`;

val _ = Define `
 (r_ppc64_tprel16_highera : num= (( 98:num)))`;

val _ = Define `
 (r_ppc64_tprel16_highest : num= (( 99:num)))`;

val _ = Define `
 (r_ppc64_tprel16_highesta : num= (( 100:num)))`;

val _ = Define `
 (r_ppc64_dtprel16_ds : num= (( 101:num)))`;

val _ = Define `
 (r_ppc64_dtprel16_lo_ds : num= (( 102:num)))`;

val _ = Define `
 (r_ppc64_dtprel16_higher : num= (( 103:num)))`;

val _ = Define `
 (r_ppc64_dtprel16_highera : num= (( 104:num)))`;

val _ = Define `
 (r_ppc64_dtprel16_highest : num= (( 105:num)))`;

val _ = Define `
 (r_ppc64_dtprel16_highesta : num= (( 106:num)))`;


(** [string_of_ppc64_relocation_type rel_type] produces a string representation
  * of relocation type [rel_type].
  *)
(*val string_of_ppc64_relocation_type : natural -> string*)
val _ = Define `
 (string_of_ppc64_relocation_type rel_type=  
 (if rel_type = r_ppc64_none then
    "R_PPC64_NONE"
  else if rel_type = r_ppc64_addr32 then
  	"R_PPC64_ADDR32"
  else if rel_type = r_ppc64_addr24 then
    "R_PPC64_ADDR24"
	else if rel_type = r_ppc64_addr16 then
	  "R_PPC64_ADDR16"
  else if rel_type = r_ppc64_addr16_lo then
    "R_PPC64_ADDR16_LO"
  else if rel_type = r_ppc64_addr16_hi then
    "R_PPC64_ADDR16_HI"
  else if rel_type = r_ppc64_addr16_ha then
    "R_PPC64_ADDR16_HA"
  else if rel_type = r_ppc64_addr14 then
    "R_PPC64_ADDR14"
  else if rel_type = r_ppc64_addr14_brtaken then
    "R_PPC64_ADDR14_BRTAKEN"
  else if rel_type = r_ppc64_addr14_brntaken then
    "R_PPC64_ADDR14_BRNTAKEN"
  else if rel_type = r_ppc64_rel24 then
    "R_PPC64_REL24"
  else if rel_type = r_ppc64_rel14 then
    "R_PPC64_REL14"
  else if rel_type = r_ppc64_rel14_brtaken then
    "R_PPC64_REL14_BRTAKEN"
  else if rel_type = r_ppc64_rel14_brntaken then
    "R_PPC64_REL14_BRNTAKEN"
  else if rel_type = r_ppc64_got16 then
    "R_PPC64_GOT16"
  else if rel_type = r_ppc64_got16_lo then
    "R_PPC64_GOT16_LO"
  else if rel_type = r_ppc64_got16_hi then
    "R_PPC64_GOT16_HI"
  else if rel_type = r_ppc64_got16_ha then
    "R_PPC64_GOT16_HA"
  else if rel_type = r_ppc64_copy then
    "R_PPC64_COPY"
  else if rel_type = r_ppc64_glob_dat then
    "R_PPC64_GLOB_DAT"
  else if rel_type = r_ppc64_jmp_slot then
    "R_PPC64_JMP_SLOT"
  else if rel_type = r_ppc64_relative then
    "R_PPC64_RELATIVE"
  else if rel_type = r_ppc64_uaddr32 then
    "R_PPC64_UADDR32"
  else if rel_type = r_ppc64_uaddr16 then
    "R_PPC64_UADDR16"
  else if rel_type = r_ppc64_rel32 then
    "R_PPC64_REL32"
  else if rel_type = r_ppc64_plt32 then
    "R_PPC64_PLT32"
  else if rel_type = r_ppc64_pltrel32 then
    "R_PPC64_PLTREL32"
  else if rel_type = r_ppc64_plt16_lo then
    "R_PPC64_PLT16_LO"
  else if rel_type = r_ppc64_plt16_hi then
    "R_PPC64_PLT16_HI"
  else if rel_type = r_ppc64_plt16_ha then
    "R_PPC64_PLT16_HA"
  else if rel_type = r_ppc64_sectoff then
    "R_PPC64_SECTOFF"
  else if rel_type = r_ppc64_sectoff_lo then
    "R_PPC64_SECTOFF_LO"
  else if rel_type = r_ppc64_sectoff_hi then
    "R_PPC64_SECTOFF_HI"
  else if rel_type = r_ppc64_sectoff_ha then
    "R_PPC64_SECTOFF_HA"
  else if rel_type = r_ppc64_addr30 then
    "R_PPC64_ADDR30"
  else if rel_type = r_ppc64_addr64 then
    "R_PPC64_ADDR64"
  else if rel_type = r_ppc64_addr16_higher then
    "R_PPC64_ADDR16_HIGHER"
  else if rel_type = r_ppc64_addr16_highera then
    "R_PPC64_ADDR16_HIGHERA"
  else if rel_type = r_ppc64_addr16_highest then
    "R_PPC64_ADDR16_HIGHEST"
  else if rel_type = r_ppc64_addr16_highesta then
    "R_PPC64_ADDR16_HIGHESTA"
  else if rel_type = r_ppc64_uaddr64 then
    "R_PPC64_UADDR64"
  else if rel_type = r_ppc64_rel64 then
    "R_PPC64_REL64"
  else if rel_type = r_ppc64_plt64 then
    "R_PPC64_PLT64"
  else if rel_type = r_ppc64_pltrel64 then
    "R_PPC64_PLTREL64"
  else if rel_type = r_ppc64_toc16 then
    "R_PPC64_TOC16"
  else if rel_type = r_ppc64_toc16_lo then
    "R_PPC64_TOC16_LO"
  else if rel_type = r_ppc64_toc16_hi then
    "R_PPC64_TOC16_HI"
  else if rel_type = r_ppc64_toc16_ha then
    "R_PPC64_TOC16_HA"
  else if rel_type = r_ppc64_toc then
    "R_PPC64_TOC"
  else if rel_type = r_ppc64_pltgot16 then
    "R_PPC64_PLTGOT16"
  else if rel_type = r_ppc64_pltgot16_lo then
    "R_PPC64_PLTGOT16_LO"
  else if rel_type = r_ppc64_pltgot16_hi then
    "R_PPC64_PLTGOT16_HI"
  else if rel_type = r_ppc64_pltgot16_ha then
    "R_PPC64_PLTGOT16_HA"
  else if rel_type = r_ppc64_addr16_ds then
    "R_PPC64_ADDR16_DS"
  else if rel_type = r_ppc64_addr16_lo_ds then
    "R_PPC64_ADDR16_DS"
  else if rel_type = r_ppc64_got16_ds then
    "R_PPC64_GOT16_DS"
  else if rel_type = r_ppc64_got16_lo_ds then
    "R_PPC64_GOT16_LO_DS"
  else if rel_type = r_ppc64_plt16_lo_ds then
    "R_PPC64_PLT16_LO_DS"
  else if rel_type = r_ppc64_sectoff_ds then
    "R_PPC64_SECTOFF_DS"
  else if rel_type = r_ppc64_sectoff_lo_ds then
    "R_PPC64_SECTOFF_LO_DS"
  else if rel_type = r_ppc64_toc16_ds then
    "R_PPC64_TOC16_DS"
  else if rel_type = r_ppc64_toc16_lo_ds then
    "R_PPC64_TOC16_LO_DS"
  else if rel_type = r_ppc64_pltgot16_ds then
    "R_PPC64_PLTGOT16_DS"
  else if rel_type = r_ppc64_pltgot16_lo_ds then
    "R_PPC64_PLTGOT16_LO_DS"
  else if rel_type = r_ppc64_tls then
    "R_PPC64_TLS"
  else if rel_type = r_ppc64_dtpmod64 then
    "R_PPC64_DTPMOD64"
  else if rel_type = r_ppc64_tprel16 then
    "R_PPC64_TPREL16"
  else if rel_type = r_ppc64_tprel16_lo then
    "R_PPC64_TPREL16_LO"
  else if rel_type = r_ppc64_tprel16_hi then
    "R_PPC64_TPREL16_HI"
  else if rel_type = r_ppc64_tprel16_ha then
    "R_PPC64_TPREL16_HA"
  else if rel_type = r_ppc64_tprel64 then
    "R_PPC64_TPREL64"
  else if rel_type = r_ppc64_dtprel16 then
    "R_PPC64_DTPREL16"
  else if rel_type = r_ppc64_dtprel16_lo then
    "R_PPC64_DTPREL16_LO"
  else if rel_type = r_ppc64_dtprel16_hi then
    "R_PPC64_DTPREL16_HI"
  else if rel_type = r_ppc64_dtprel16_ha then
    "R_PPC64_DTPREL16_HA"
  else if rel_type = r_ppc64_dtprel64 then
    "R_PPC64_DTPREL64"
  else if rel_type = r_ppc64_got_tlsgd16 then
    "R_PPC64_GOT_TLSGD16"
  else if rel_type = r_ppc64_got_tlsgd16_lo then
    "R_PPC64_GOT_TLSGD16_LO"
  else if rel_type = r_ppc64_got_tlsgd16_hi then
    "R_PPC64_GOT_TLSGD16_HI"
  else if rel_type = r_ppc64_got_tlsgd16_ha then
    "R_PPC64_GOT_TLSGD16_HA"
  else if rel_type = r_ppc64_got_tlsld16 then
    "R_PPC64_GOT_TLSLD16"
  else if rel_type = r_ppc64_got_tlsld16_lo then
    "R_PPC64_GOT_TLSLD16_LO"
  else if rel_type = r_ppc64_got_tlsld16_hi then
    "R_PPC64_GOT_TLSLD16_HI"
  else if rel_type = r_ppc64_got_tlsld16_ha then
    "R_PPC64_GOT_TLSLD16_HA"
  else if rel_type = r_ppc64_got_tprel16_ds then
    "R_PPC64_GOT_TPREL16_DS"
  else if rel_type = r_ppc64_got_tprel16_lo_ds then
    "R_PPC64_GOT_TPREL16_LO_DS"
  else if rel_type = r_ppc64_got_tprel16_hi then
    "R_PPC64_GOT_TPREL16_HI"
  else if rel_type = r_ppc64_got_tprel16_ha then
    "R_PPC64_GOT_TPREL16_HA"
  else if rel_type = r_ppc64_got_dtprel16_ds then
    "R_PPC64_GOT_DTPREL16_DS"
  else if rel_type = r_ppc64_got_dtprel16_lo_ds then
    "R_PPC64_GOT_DTPREL16_LO_DS"
  else if rel_type = r_ppc64_got_dtprel16_hi then
    "R_PPC64_GOT_DTPREL16_HI"
  else if rel_type = r_ppc64_got_dtprel16_ha then
    "R_PPC64_GOT_DTPREL16_HA"
  else if rel_type = r_ppc64_tprel16_ds then
    "R_PPC64_TPREL16_DS"
  else if rel_type = r_ppc64_tprel16_lo_ds then
    "R_PPC64_TPREL16_LO_DS"
  else if rel_type = r_ppc64_tprel16_higher then
    "R_PPC64_TPREL16_HIGHER"
  else if rel_type = r_ppc64_tprel16_highera then
    "R_PPC64_TPREL16_HIGHERA"
  else if rel_type = r_ppc64_tprel16_highest then
    "R_PPC64_TPREL16_HIGHEST"
  else if rel_type = r_ppc64_tprel16_highesta then
    "R_PPC64_TPREL16_HIGHESTA"
  else if rel_type = r_ppc64_dtprel16_ds then
    "R_PPC64_DTPREL16_DS"
  else if rel_type = r_ppc64_dtprel16_lo_ds then
    "R_PPC64_DTPREL16_LO_DS"
  else if rel_type = r_ppc64_dtprel16_higher then
    "R_PPC64_DTPREL16_HIGHER"
  else if rel_type = r_ppc64_dtprel16_highera then
    "R_PPC64_DTPREL16_HIGHERA"
  else if rel_type = r_ppc64_dtprel16_highest then
    "R_PPC64_DTPREL16_HIGHEST"
  else if rel_type = r_ppc64_dtprel16_highesta then
    "R_PPC64_DTPREL16_HIGHESTA"
  else
    "Invalid Power64 relocation type"))`;


(*val abi_ppc64_apply_relocation : elf64_relocation_a -> integer -> integer ->
  integer -> integer -> integer -> integer -> integer -> integer -> integer ->
    integer -> integer -> integer -> integer -> integer -> integer -> elf64_file ->
      error (Map.map elf64_addr (relocation_operator_expression integer * integer_bit_width * can_fail integer))*)
val _ = Define `
 (abi_ppc64_apply_relocation rel s_val b_val p_val l_val g_val r_val m_val
          toc_val dtpmod_val tprel_val dtprel_val gottlsgd_val gottlsld_val
          gottprel_val gotdtprel_val ef=  
 (if is_elf64_relocatable_file ef.elf64_file_header then
    let rel_type = (extract_elf64_relocation_r_type rel.elf64_ra_info) in
    let a_val    = (w2i rel.elf64_ra_addend) in
      (** No width, no calculation *)
      if rel_type = r_ppc64_none then
        return FEMPTY
      (** Width: 32 Calculation: S + A *)
      else if rel_type = r_ppc64_addr32 then
      	let result = (Lift (s_val + a_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I32, CanFail)))
      (** Width: Low24 Calculation: (S + A) >> 2 *)
      else if rel_type = r_ppc64_addr24 then
        let result = (RShift (Lift(s_val + a_val),( 2:num))) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, Low24, CanFail)))
      (** Width: Half16 Calculation: S + A *)
    	else if rel_type = r_ppc64_addr16 then
        let result = (Lift (s_val + a_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I16, CanFail)))
      (** Width: Half16 Calculation: #lo(S + A) *)
      else if rel_type = r_ppc64_addr16_lo then
        let result = (Apply(Lo, Lift (s_val + a_val))) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I16, CannotFail)))
      (** Width: Half16 Calculation: #hi(S + A) *)
      else if rel_type = r_ppc64_addr16_hi then
        let result = (Apply(Hi, Lift (s_val + a_val))) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I16, CannotFail)))
      (** Width: Half16 Calculation: #ha(S + A) *)
      else if rel_type = r_ppc64_addr16_ha then
        let result = (Apply(Ha, Lift (s_val + a_val))) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I16, CannotFail)))
      (** Width: Low14 Calculation: (S + A) >> 2 *)
      else if rel_type = r_ppc64_addr14 then
        let result = (RShift(Lift(s_val + a_val),( 2:num))) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, Low14, CanFail)))
      (** Width: Low14 Calculation: (S + A) >> 2 *)
      else if rel_type = r_ppc64_addr14_brtaken then
        let result = (RShift(Lift(s_val + a_val),( 2:num))) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, Low14, CanFail)))
      (** Width: Low14 Calculation: (S + A) >> 2 *)
      else if rel_type = r_ppc64_addr14_brntaken then
        let result = (RShift(Lift(s_val + a_val),( 2:num))) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, Low14, CanFail)))
      (** Width: Low24 Calculation: ((S + A) - P) >> 2 *)
      else if rel_type = r_ppc64_rel24 then
        let result = (RShift(Lift ((s_val + a_val) - p_val),( 2:num))) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, Low24, CanFail)))
      (** Width: Low14 Calculation: ((S + A) - P) >> 2 *)
      else if rel_type = r_ppc64_rel14 then
        let result = (RShift(Lift ((s_val + a_val) - p_val),( 2:num))) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, Low14, CanFail)))
      (** Width: Low14 Calculation: ((S + A) - P) >> 2 *)
      else if rel_type = r_ppc64_rel14_brtaken then
        let result = (RShift(Lift ((s_val + a_val) - p_val),( 2:num))) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, Low14, CanFail)))
      (** Width: Low14 Calculation: ((S + A) - P) >> 2 *)
      else if rel_type = r_ppc64_rel14_brntaken then
        let result = (RShift(Lift ((s_val + a_val) - p_val),( 2:num))) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, Low14, CanFail)))
      (** Width: Half16 Calculation: G *)
      else if rel_type = r_ppc64_got16 then
        let result = (Lift g_val) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I16, CanFail)))
      (** Width: Half16 Calculation: #lo(G) *)
      else if rel_type = r_ppc64_got16_lo then
        let result = (Apply(Lo, Lift g_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I16, CannotFail)))
      (** Width: Half16 Calculation: #hi(G) *)
      else if rel_type = r_ppc64_got16_hi then
        let result = (Apply(Hi, Lift g_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I16, CannotFail)))
      (** Width: Half16 Calculation: #ha(G) *)
      else if rel_type = r_ppc64_got16_ha then
        let result = (Apply(Ha, Lift g_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I16, CannotFail)))
      (** No width, no calculation *)
      else if rel_type = r_ppc64_copy then
        fail0 "abi_ppc64_apply_relocation: r_ppc64_copy not implemented"
      (** Width I64, Calculation: S + A *)
      else if rel_type = r_ppc64_glob_dat then
        let result = (Lift(s_val + a_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I64, CannotFail)))
      (** No width, dynamic link calculation *)
      else if rel_type = r_ppc64_jmp_slot then
        fail0 "abi_ppc64_apply_relocation: r_ppc64_jmp_slot not implemented"
      (** Width I64, Calculation: B + A *)
      else if rel_type = r_ppc64_relative then
        let result = (Lift(b_val + a_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I64, CannotFail)))
      (** Width: I32 Calculation: S + A *)
      else if rel_type = r_ppc64_uaddr32 then
        let result = (Lift(s_val + a_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I32, CanFail)))
      (** Width: Half16 Calculation: S + A *)
      else if rel_type = r_ppc64_uaddr16 then
        let result = (Lift(s_val + a_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I16, CanFail)))
      (** Width: I32 Calculation: (S + A) - P *)
      else if rel_type = r_ppc64_rel32 then
        let result = (Lift ((s_val + a_val) - p_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I32, CanFail)))
      (** Width: I32 Calculation: L *)
      else if rel_type = r_ppc64_plt32 then
        let result = (Lift l_val) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I32, CanFail)))
      (** Width: I32 Calculation: L - P *)
      else if rel_type = r_ppc64_pltrel32 then
        let result = (Lift (l_val - p_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I32, CanFail)))
      (** Width: Half16 Calculation: #lo(L) *)
      else if rel_type = r_ppc64_plt16_lo then
        let result = (Apply(Lo, Lift l_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I16, CannotFail)))
      (** Width: Half16 Calculation: #hi(L) *)
      else if rel_type = r_ppc64_plt16_hi then
        let result = (Apply(Hi, Lift l_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I16, CannotFail)))
      (** Width: Half16 Calculation: #ha(L) *)
      else if rel_type = r_ppc64_plt16_ha then
        let result = (Apply(Ha, Lift l_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I16, CannotFail)))
      (** Width: Half16 Calculation: R + A *)
      else if rel_type = r_ppc64_sectoff then
        let result = (Lift(r_val + a_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I16, CanFail)))
      (** Width: Half16 Calculation: #lo(R + A) *)
      else if rel_type = r_ppc64_sectoff_lo then
        let result = (Apply(Lo, Lift (r_val + a_val))) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I16, CannotFail)))
      (** Width: Half16 Calculation: #hi(R + A) *)
      else if rel_type = r_ppc64_sectoff_hi then
        let result = (Apply(Hi, Lift (r_val + a_val))) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I16, CannotFail)))
      (** Width: Half16 Calculation: #ha(R + A) *)
      else if rel_type = r_ppc64_sectoff_ha then
        let result = (Apply(Ha, Lift (r_val + a_val))) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I16, CannotFail)))
      (** Width: Word30 Calculation: ((S + A) - P) >> 2 *)
      else if rel_type = r_ppc64_addr30 then
        let result = (RShift(Lift ((s_val + a_val) - p_val),( 2:num))) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, Word30, CannotFail)))
      (** Width: I64 Calculation: S + A *)
      else if rel_type = r_ppc64_addr64 then
        let result = (Lift(s_val + a_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I64, CannotFail)))
      (** Width: Half16 Calculation: #higher(S + A) *)
      else if rel_type = r_ppc64_addr16_higher then
        let result = (Apply(Higher, Lift (s_val + a_val))) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I16, CannotFail)))
      (** Width: Half16 Calculation: #highera(S + A) *)
      else if rel_type = r_ppc64_addr16_highera then
        let result = (Apply(HigherA, Lift (s_val + a_val))) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I16, CannotFail)))
      (** Width: Half16 Calculation: #highest(S + A) *)
      else if rel_type = r_ppc64_addr16_highest then
        let result = (Apply(Highest, Lift (s_val + a_val))) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I16, CannotFail)))
      (** Width: Half16 Calculation: #highesta(S + A) *)
      else if rel_type = r_ppc64_addr16_highesta then
        let result = (Apply(HighestA, Lift(s_val + a_val))) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I16, CannotFail)))
      (** Width: I64 Calculation: S + A *)
      else if rel_type = r_ppc64_uaddr64 then
        let result = (Lift(s_val + a_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I64, CannotFail)))
      (** Width: I64 Calculation: (S + A) - P *)
      else if rel_type = r_ppc64_rel64 then
        let result = (Lift ((s_val + a_val) - p_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I64, CannotFail)))
      (** Width: I64 Calculation: L *)
      else if rel_type = r_ppc64_plt64 then
      	let result = (Lift l_val) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I64, CannotFail)))
      (** Width: I64 Calculation: L - P *)
      else if rel_type = r_ppc64_pltrel64 then
      	let result = (Lift(l_val - p_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I64, CannotFail)))
      (** Width: Half16 Calculation: (S + A) - TOC *)
      else if rel_type = r_ppc64_toc16 then
      	let result = (Lift ((s_val + a_val) - toc_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I16, CanFail)))
      (** Width: Half16 Calculation: #lo((S + A) - TOC) *)
      else if rel_type = r_ppc64_toc16_lo then
      	let result = (Apply (Lo, Lift ((s_val + a_val) - toc_val))) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I16, CanFail)))
      (** Width: Half16 Calculation: #hi((S + A) - TOC) *)
      else if rel_type = r_ppc64_toc16_hi then
      	let result = (Apply(Hi, Lift ((s_val + a_val) - toc_val))) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I16, CanFail)))
      (** Width: Half16 Calculation: #ha((S + A) - TOC) *)
      else if rel_type = r_ppc64_toc16_ha then
      	let result = (Apply(Ha, Lift ((s_val + a_val) - toc_val))) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I16, CanFail)))
      (** Width: I64 Calculation: .TOC *)
      else if rel_type = r_ppc64_toc then
      	let result = (Lift toc_val) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I64, CannotFail)))
      (** Width: Half16 Calculation: M *)
      else if rel_type = r_ppc64_pltgot16 then
      	let result = (Lift m_val) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I16, CanFail)))
      (** Width: Half16 Calculation: #lo(M) *)
      else if rel_type = r_ppc64_pltgot16_lo then
      	let result = (Apply(Lo, Lift m_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I16, CannotFail)))
      (** Width: Half16 Calculation: #hi(M) *)
      else if rel_type = r_ppc64_pltgot16_hi then
      	let result = (Apply(Hi, Lift m_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I16, CannotFail)))
      (** Width: Half16 Calculation: #ha(M) *)
      else if rel_type = r_ppc64_pltgot16_ha then
      	let result = (Apply(Ha, Lift m_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I16, CannotFail)))
      (** Width: Half16ds Calculation: (S + A) >> 2 *)
      else if rel_type = r_ppc64_addr16_ds then
      	let result = (RShift(Lift (s_val + a_val),( 2:num))) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, Half16ds, CanFail)))
      (** Width: Half16ds Calculation: #lo((S + A) >> 2) *)    
      else if rel_type = r_ppc64_addr16_lo_ds then
      	let result = (Apply(Lo, RShift(Lift (s_val + a_val),( 2:num)))) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, Half16ds, CannotFail)))
      (** Width: Half16ds Calculation: G >> 2 *)
      else if rel_type = r_ppc64_got16_ds then
      	let result = (RShift(Lift g_val,( 2:num))) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, Half16ds, CanFail)))
      (** Width: Half16ds Calculation: #lo(G) >> 2 *)
      else if rel_type = r_ppc64_got16_lo_ds then
      	let result = (RShift(Apply(Lo, Lift g_val),( 2:num))) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, Half16ds, CannotFail)))
      (** Width: Half16ds Calculation: #lo(L) >> 2 *)
      else if rel_type = r_ppc64_plt16_lo_ds then
      	let result = (RShift (Apply(Lo, Lift l_val),( 2:num))) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, Half16ds, CannotFail)))
      (** Width: Half16ds Calculation: (R + A) >> 2 *)
      else if rel_type = r_ppc64_sectoff_ds then
      	let result = (RShift (Lift (r_val + a_val),( 2:num))) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, Half16ds, CanFail)))
      (** Width: Half16ds Calculation: #lo(R + A) >> 2 *)
      else if rel_type = r_ppc64_sectoff_lo_ds then
      	let result = (RShift(Apply(Lo, Lift (r_val + a_val)),( 2:num))) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, Half16ds, CannotFail)))
      (** Width: Half16ds Calculation: ((S + A) - TOC) >> 2 *)
      else if rel_type = r_ppc64_toc16_ds then
      	let result = (RShift (Lift ((s_val + a_val) - toc_val),( 2:num))) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, Half16ds, CanFail)))
      (** Width: Half16ds Calculation: #lo((S + A) - TOC) >> 2 *)
      else if rel_type = r_ppc64_toc16_lo_ds then
      	let result = (RShift (Apply(Lo, Lift ((s_val + a_val) - toc_val)),( 2:num))) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, Half16ds, CannotFail)))
      (** Width: Half16ds Calculation: M >> 2 *)
      else if rel_type = r_ppc64_pltgot16_ds then
      	let result = (RShift(Lift m_val,( 2:num))) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, Half16ds, CanFail)))
      (** Width: Half16ds Calculation: #lo(M) >> 2 *)
      else if rel_type = r_ppc64_pltgot16_lo_ds then
      	let result = (RShift (Apply(Lo, Lift m_val),( 2:num))) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, Half16ds, CannotFail)))
      (** No width, no calculation *)
      else if rel_type = r_ppc64_tls then
        fail0 "abi_ppc64_apply_relocation: r_ppc64_tls not implemented"
      (** Width I64 Calculation: @dtpmod *)
      else if rel_type = r_ppc64_dtpmod64 then
      	let result = (Lift dtpmod_val) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I64, CannotFail)))
      else if rel_type = r_ppc64_tprel16 then
      	let result = (Lift tprel_val) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I16, CanFail)))
      else if rel_type = r_ppc64_tprel16_lo then
        let result = (Apply(Lo, Lift tprel_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I16, CannotFail)))
      else if rel_type = r_ppc64_tprel16_hi then
      	let result = (Apply(Hi, Lift tprel_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I16, CannotFail)))
      else if rel_type = r_ppc64_tprel16_ha then
      	let result = (Apply(Ha, Lift tprel_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I16, CannotFail)))
      else if rel_type = r_ppc64_tprel64 then
      	let result = (Lift tprel_val) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I64, CannotFail)))
      else if rel_type = r_ppc64_dtprel16 then
      	let result = (Lift dtprel_val) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I16, CanFail)))
      else if rel_type = r_ppc64_dtprel16_lo then
      	let result = (Apply(Lo, Lift dtprel_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I16, CannotFail)))
      else if rel_type = r_ppc64_dtprel16_hi then
      	let result = (Apply(Hi, Lift dtprel_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I16, CannotFail)))
      else if rel_type = r_ppc64_dtprel16_ha then
      	let result = (Apply(Ha, Lift dtprel_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I16, CannotFail)))
      else if rel_type = r_ppc64_dtprel64 then
      	let result = (Lift dtprel_val) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I64, CannotFail)))
      else if rel_type = r_ppc64_got_tlsgd16 then
      	let result = (Lift gottlsgd_val) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I16, CanFail)))
      else if rel_type = r_ppc64_got_tlsgd16_lo then
      	let result = (Apply(Lo, Lift gottlsgd_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I16, CannotFail)))
      else if rel_type = r_ppc64_got_tlsgd16_hi then
      	let result = (Apply(Hi, Lift gottlsgd_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I16, CannotFail)))
      else if rel_type = r_ppc64_got_tlsgd16_ha then
      	let result = (Apply(Ha, Lift gottlsgd_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I16, CannotFail)))
      else if rel_type = r_ppc64_got_tlsld16 then
      	let result = (Lift gottlsgd_val) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I16, CanFail)))
      else if rel_type = r_ppc64_got_tlsld16_lo then
      	let result = (Apply(Lo, Lift gottlsgd_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I16, CannotFail)))
      else if rel_type = r_ppc64_got_tlsld16_hi then
      	let result = (Apply(Hi, Lift gottlsgd_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I16, CannotFail)))
      else if rel_type = r_ppc64_got_tlsld16_ha then
      	let result = (Apply(Ha, Lift gottlsgd_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I16, CannotFail)))
      else if rel_type = r_ppc64_got_tprel16_ds then
      	let result = (Lift gottprel_val) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, Half16ds, CanFail)))
      else if rel_type = r_ppc64_got_tprel16_lo_ds then
      	let result = (Apply(Lo, Lift gottprel_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, Half16ds, CannotFail)))
      else if rel_type = r_ppc64_got_tprel16_hi then
      	let result = (Apply(Hi, Lift gottprel_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I16, CannotFail)))
      else if rel_type = r_ppc64_got_tprel16_ha then
      	let result = (Apply(Ha, Lift gottprel_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I16, CannotFail)))
      else if rel_type = r_ppc64_got_dtprel16_ds then
      	let result = (Lift gotdtprel_val) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, Half16ds, CanFail)))
      else if rel_type = r_ppc64_got_dtprel16_lo_ds then
      	let result = (Apply(Lo, Lift gotdtprel_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, Half16ds, CannotFail)))
      else if rel_type = r_ppc64_got_dtprel16_hi then
      	let result = (Apply(Hi, Lift gotdtprel_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I16, CannotFail)))
      else if rel_type = r_ppc64_got_dtprel16_ha then
      	let result = (Apply(Ha, Lift gotdtprel_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I16, CannotFail)))
      else if rel_type = r_ppc64_tprel16_ds then
      	let result = (Lift tprel_val) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, Half16ds, CanFail)))
      else if rel_type = r_ppc64_tprel16_lo_ds then
      	let result = (Apply(Lo, Lift tprel_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, Half16ds, CannotFail)))
      else if rel_type = r_ppc64_tprel16_higher then
      	let result = (Apply(Higher, Lift tprel_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I16, CannotFail)))
      else if rel_type = r_ppc64_tprel16_highera then
      	let result = (Apply(HigherA, Lift tprel_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I16, CannotFail)))
      else if rel_type = r_ppc64_tprel16_highest then
      	let result = (Apply(Highest, Lift tprel_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I16, CannotFail)))
      else if rel_type = r_ppc64_tprel16_highesta then
      	let result = (Apply(HighestA, Lift tprel_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I16, CannotFail)))
      else if rel_type = r_ppc64_dtprel16_ds then
      	let result = (Lift dtprel_val) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, Half16ds, CanFail)))
      else if rel_type = r_ppc64_dtprel16_lo_ds then
      	let result = (Apply(Lo, Lift dtprel_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, Half16ds, CannotFail)))
      else if rel_type = r_ppc64_dtprel16_higher then
      	let result = (Apply(Higher, Lift dtprel_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I16, CannotFail)))
      else if rel_type = r_ppc64_dtprel16_highera then
      	let result = (Apply(HigherA, Lift dtprel_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I16, CannotFail)))
      else if rel_type = r_ppc64_dtprel16_highest then
      	let result = (Apply(Highest, Lift dtprel_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I16, CannotFail)))
      else if rel_type = r_ppc64_dtprel16_highesta then
      	let result = (Apply(HighestA, Lift dtprel_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (FEMPTY |+ (addr, (result, I16, CannotFail)))
      else
        fail0 "abi_ppc64_apply_relocation: unrecognised relocation type"  
  else
  	fail0 "abi_ppc64_apply_relocation: not a relocatable file"))`;

val _ = export_theory()

