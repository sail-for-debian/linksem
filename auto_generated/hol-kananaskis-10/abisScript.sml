(*Generated by Lem from abis/abis.lem.*)
open HolKernel Parse boolLib bossLib;
open lem_numTheory lem_listTheory lem_setTheory lem_basic_classesTheory lem_boolTheory lem_maybeTheory lem_stringTheory lem_assert_extraTheory showTheory missing_pervasivesTheory errorTheory elf_types_native_uintTheory elf_headerTheory lem_mapTheory elf_program_header_tableTheory elf_section_header_tableTheory elf_interpreted_sectionTheory elf_symbol_tableTheory elf_fileTheory elf_relocationTheory memory_imageTheory abi_classesTheory memory_image_orderingsTheory abi_utilitiesTheory abi_aarch64_relocationTheory gnu_ext_abiTheory abi_amd64_relocationTheory abi_amd64Theory abi_aarch64_leTheory abi_power64Theory abi_power64_relocationTheory;

val _ = numLib.prefer_num();



val _ = new_theory "abis"

(** The [abis] module is the top-level module for all ABI related code, including
  * some generic functionality that works across all ABIs, and a primitive attempt
  * at abstracting over ABIs for purposes of linking.
  *)

(*open import Basic_classes*)
(*open import Bool*)
(*open import Num*)
(*open import Maybe*)
(*open import List*)
(*open import Set*)
(*import Map*)
(*open import String*)
(*open import Show*)
(*open import Assert_extra*)
(*open import Error*)
(*open import Missing_pervasives*)

(*open import Elf_file*)
(*open import Elf_header*)
(*open import Elf_interpreted_section*)
(*open import Elf_relocation*)
(*open import Elf_symbol_table*)
(*open import Elf_program_header_table*)
(*open import Elf_section_header_table*)
(*open import Memory_image*)

(*open import Abi_amd64*)
(*open import Abi_amd64_relocation*)

(*open import Abi_aarch64_le*)
(*open import Abi_aarch64_relocation*)

(*open import Abi_power64*)
(*open import Abi_power64_relocation*)

(*open import Gnu_ext_abi*)

(*open import Abi_classes*)
(*open import Abi_utilities*)
(*open import Elf_types_native_uint*)

(*open import Memory_image_orderings*)

(** Relocation operators and their validity on a given platform *)

(*val is_valid_abi_aarch64_relocation_operator : relocation_operator -> bool*)
val _ = Define `
 (is_valid_abi_aarch64_relocation_operator op=  
 ((case op of
      Page => T
    | G => T
    | GDat => T
    | GLDM => T
    | DTPRel => T
    | GTPRel => T
    | TPRel => T
    | GTLSDesc => T
    | Delta => T
    | LDM => T
    | TLSDesc => T
    | Indirect => T
    | _ => F
  )))`;

  
(*val is_valid_abi_aarch64_relocation_operator2 : relocation_operator2 -> bool*)
val _ = Define `
 (is_valid_abi_aarch64_relocation_operator2 op=  
 ((case op of
      GTLSIdx => T
  )))`;


(*val is_valid_abi_amd64_relocation_operator : relocation_operator -> bool*)
val _ = Define `
 (is_valid_abi_amd64_relocation_operator op=  
 ((case op of
      Indirect => T
    | _ => F (* XXX: not sure about this? *)
  )))`;

  
(*val is_valid_abi_amd64_relocation_operator2 : relocation_operator2 -> bool*)
val _ = Define `
 (is_valid_abi_amd64_relocation_operator2 op=  
 ((case op of
      _ => F
  )))`;


(*val is_valid_abi_power64_relocation_operator : relocation_operator -> bool*)
val _ = Define `
 (is_valid_abi_power64_relocation_operator op=  F)`;
 (* TODO *)

(*val is_valid_abi_power64_relocation_operator2 : relocation_operator2 -> bool*)
val _ = Define `
 (is_valid_abi_power64_relocation_operator2 op=  
 ((case op of
      _ => F
  )))`;


(** Misc. ABI related stuff *)

val _ = Hol_datatype `
 any_abi_feature = Amd64AbiFeature of any_abi_feature amd64_abi_feature
                     | Aarch64LeAbiFeature of aarch64_le_abi_feature`;


(*val anyAbiFeatureCompare : any_abi_feature -> any_abi_feature -> Basic_classes.ordering*)
val _ = Define `
 (anyAbiFeatureCompare f1 f2=    
  ((case (f1, f2) of
        (Amd64AbiFeature(af1), Amd64AbiFeature(af2)) => abi_amd64$abiFeatureCompare0 af1 af2
       |(Amd64AbiFeature(_), _) => LT
       |(Aarch64LeAbiFeature(af1), Amd64AbiFeature(af2)) => GT
       |(Aarch64LeAbiFeature(af1), Aarch64LeAbiFeature(af2)) => abiFeatureCompare af1 af2
    )))`;


(*val anyAbiFeatureTagEquiv : any_abi_feature -> any_abi_feature -> bool*)
val _ = Define `
 (anyAbiFeatureTagEquiv f1 f2=    
  ((case (f1, f2) of
        (Amd64AbiFeature(af1), Amd64AbiFeature(af2)) => abi_amd64$abiFeatureTagEq0 af1 af2
       |(Amd64AbiFeature(_), _) => F
       |(Aarch64LeAbiFeature(af1), Amd64AbiFeature(af2)) => F
       |(Aarch64LeAbiFeature(af1), Aarch64LeAbiFeature(af2)) => abiFeatureTagEq af1 af2
    )))`;


val _ = Define `
(instance_Basic_classes_Ord_Abis_any_abi_feature_dict= (<|

  compare_method := anyAbiFeatureCompare;

  isLess_method := (\ f1 .  (\ f2 .  (anyAbiFeatureCompare f1 f2 = LT)));

  isLessEqual_method := (\ f1 .  (\ f2 .  (IN) (anyAbiFeatureCompare f1 f2) ({LT; EQ})));

  isGreater_method := (\ f1 .  (\ f2 .  (anyAbiFeatureCompare f1 f2 = GT)));

  isGreaterEqual_method := (\ f1 .  (\ f2 .  (IN) (anyAbiFeatureCompare f1 f2) ({GT; EQ})))|>))`;


val _ = Define `
(instance_Abi_classes_AbiFeatureTagEquiv_Abis_any_abi_feature_dict= (<|

  abiFeatureTagEquiv_method := anyAbiFeatureTagEquiv|>))`;


val _ = Define `
 (make_elf64_header data osabi abiv ma t entry shoff phoff phnum shnum shstrndx=      
 (<| elf64_ident    := ([elf_mn_mag0; elf_mn_mag1; elf_mn_mag2; elf_mn_mag3; 
                           (n2w : num -> unsigned_char) elf_class_64; 
                           (n2w : num -> unsigned_char) data;
                           (n2w : num -> unsigned_char) elf_ev_current;
                           (n2w : num -> unsigned_char) osabi;
                           (n2w : num -> unsigned_char) abiv;
                           (n2w : num -> unsigned_char) (( 0:num));
                           (n2w : num -> unsigned_char) (( 0:num));
                           (n2w : num -> unsigned_char) (( 0:num));
                           (n2w : num -> unsigned_char) (( 0:num));
                           (n2w : num -> unsigned_char) (( 0:num));
                           (n2w : num -> unsigned_char) (( 0:num));
                           (n2w : num -> unsigned_char) (( 0:num))])
       ; elf64_type     := ((n2w : num -> uint16) t)
       ; elf64_machine  := ((n2w : num -> uint16) ma)
       ; elf64_version  := ((n2w : num -> uint32) elf_ev_current)
       ; elf64_entry    := ((n2w : num -> uint64) entry)
       ; elf64_phoff    := ((n2w : num -> uint64) phoff)
       ; elf64_shoff    := ((n2w : num -> uint64) shoff)
       ; elf64_flags    := ((n2w : num -> uint32) (( 0:num)))
       ; elf64_ehsize   := ((n2w : num -> uint16) (( 64:num)))
       ; elf64_phentsize:= ((n2w : num -> uint16) (( 56:num)))
       ; elf64_phnum    := ((n2w : num -> uint16) phnum)
       ; elf64_shentsize:= ((n2w : num -> uint16) (( 64:num)))
       ; elf64_shnum    := ((n2w : num -> uint16) shnum)
       ; elf64_shstrndx := ((n2w : num -> uint16) shstrndx)
       |>))`;

       
(*val phdr_flags_from_section_flags : natural -> string -> natural*)
val _ = Define `
 (phdr_flags_from_section_flags section_flags sec_name=    
 (let flags = (natural_lor elf_pf_r (natural_lor 
        (if flag_is_set shf_write section_flags then elf_pf_w else( 0:num))
        (if flag_is_set shf_execinstr section_flags then elf_pf_x else( 0:num))))
    in
    (*let _ = errln ("Phdr flags of section " ^ sec_name ^ "(ELF section flags 0x " ^ 
        (hex_string_of_natural section_flags) ^ ") are 0x" ^ (hex_string_of_natural flags))
    in*)
    flags))`;


(*val phdr_is_writable : natural -> bool*)
val _ = Define `
 (phdr_is_writable flags=    
 ((natural_land flags elf_pf_w) = elf_pf_w))`;


val _ = type_abbrev( "can_combine_flags_fn" , ``: num set ->  num option``);

(* FIXME: lift this to a personality function of the GNU linker? 
 * Not sure really... need to try some other linkers. *)
(*val load_can_combine_flags : can_combine_flags_fn*)
val _ = Define `
 (load_can_combine_flags flagsets=    
(  
    (* The GNU linker happily adds a .rodata section to a RX segment,
     * but not to a RW segment. So the only clear rule is: if any is writable,
     * all must be writable. *)let flagslist = (SET_TO_LIST flagsets)
    in
    let union_flags = (FOLDL natural_lor(( 0:num)) flagslist)
    in
    if EXISTS phdr_is_writable flagslist
    then
        if EVERY phdr_is_writable flagslist then SOME union_flags
        else NONE
    else
        SOME union_flags))`;

        
(*val tls_can_combine_flags : can_combine_flags_fn*)
val _ = Define `
 (tls_can_combine_flags flagsets=  (SOME (FOLDL natural_lor(( 0:num)) (SET_TO_LIST flagsets))))`;


val _ = Define `
 (maybe_extend_phdr phdr isec can_combine_flags=    
 (let new_p_type = (w2n phdr.elf64_p_type)
    in
    let this_section_phdr_flags = (phdr_flags_from_section_flags isec.elf64_section_flags isec.elf64_section_name_as_string)
    in
    let maybe_extended_flags = (can_combine_flags { this_section_phdr_flags; w2n phdr.elf64_p_flags })
    in
    if maybe_extended_flags = NONE then (*let _ = errln "flag mismatch" in*) NONE
    else let new_p_flags = ((case maybe_extended_flags of SOME flags => flags | _ => failwith "impossible" ))
    in
    (* The new filesz is the file end offset of this section,
     * minus the existing file start offset of the phdr. 
     * Check that the new section begins after the old offset+filesz. *)
    if isec.elf64_section_offset < ((w2n phdr.elf64_p_offset) + (w2n phdr.elf64_p_filesz))
    then (*let _ = errln "offset went backwards" in*) NONE
    else 
    let new_p_filesz = (w2n phdr.elf64_p_filesz + (if isec.elf64_section_type = sht_progbits then isec.elf64_section_size else( 0:num)))
    in 
    (* The new memsz is the virtual address end address of this section,
     * minus the existing start vaddr of the phdr. 
     * Check that the new section begins after the old vaddr+memsz. *)
    if isec.elf64_section_addr < ((w2n phdr.elf64_p_vaddr) + (w2n phdr.elf64_p_memsz))
    then (*let _ = errln "vaddr went backwards" in*) NONE
    else 
    let new_p_memsz = (w2n phdr.elf64_p_memsz + isec.elf64_section_size)
    in
    let (one_if_zero : num -> num) = (\ n .  if n =( 0:num) then( 1:num) else n)
    in
    let new_p_align =  (lcm (one_if_zero (w2n phdr.elf64_p_align)) (one_if_zero isec.elf64_section_align))
    in
    SOME
      <| elf64_p_type   := ((n2w : num -> uint32) new_p_type)
       ; elf64_p_flags  := ((n2w : num -> uint32) new_p_flags)
       ; elf64_p_offset := (phdr.elf64_p_offset)
       ; elf64_p_vaddr  := (phdr.elf64_p_vaddr)
       ; elf64_p_paddr  := (phdr.elf64_p_paddr)
       ; elf64_p_filesz := ((n2w : num -> uint64) new_p_filesz)
       ; elf64_p_memsz  := ((n2w : num -> uint64) new_p_memsz)
       ; elf64_p_align  := ((n2w : num -> uint64) new_p_align)
       |>))`;


val _ = Define `
 (make_new_phdr isec t maxpagesize commonpagesize=    
 (let rounded_down_offset = (\ isec .  round_down_to commonpagesize isec.elf64_section_offset)
    in
    let offset_round_down_amount = (\ isec .  isec.elf64_section_offset - (rounded_down_offset isec))
    in
    let rounded_down_vaddr = (\ isec .  round_down_to commonpagesize isec.elf64_section_addr)
    in
    let vaddr_round_down_amount = (\ isec .  isec.elf64_section_addr - (rounded_down_vaddr isec))
    in
  <| elf64_p_type   := ((n2w : num -> uint32) t) (** Type of the segment *)
   ; elf64_p_flags  := ((n2w : num -> uint32) (phdr_flags_from_section_flags isec.elf64_section_flags isec.elf64_section_name_as_string)) (** Segment flags *)
   ; elf64_p_offset := ((n2w : num -> uint64) (rounded_down_offset isec)) (** Offset from beginning of file for segment *)
   ; elf64_p_vaddr  := ((n2w : num -> uint64) (rounded_down_vaddr isec)) (** Virtual address for segment in memory *)
   ; elf64_p_paddr  := ((n2w : num -> uint64) (( 0:num))) (** Physical address for segment *)
   ; elf64_p_filesz := ((n2w : num -> uint64) (if isec.elf64_section_type = sht_nobits then( 0:num) else isec.elf64_section_size + (offset_round_down_amount isec))) (** Size of segment in file, in bytes *)
   ; elf64_p_memsz  := ((n2w : num -> uint64) (isec.elf64_section_size + (vaddr_round_down_amount isec))) (** Size of segment in memory image, in bytes *)
   ; elf64_p_align  := ((n2w : num -> uint64)  (* isec.elf64_section_align *)maxpagesize) (** Segment alignment memory for memory and file *)
   |>))`;


(*val make_load_phdrs : forall 'abifeature. natural -> natural -> annotated_memory_image 'abifeature -> list elf64_interpreted_section -> list elf64_program_header_table_entry*)
val _ = Define `
 (make_load_phdrs maxpagesize commonpagesize img section_pairs_bare_sorted_by_address=    
(  
    (* accumulate sections into the phdr *)let rev_list = (FOLDL (\ accum_phdr_list .  (\ isec .  (
        (* Do we have a current phdr? *)
        (case accum_phdr_list of
            [] => (* no, so make one *)
                (*let _ = errln ("Starting the first LOAD phdr for section " ^ isec.elf64_section_name_as_string)
                in*)
                [make_new_phdr isec elf_pt_load maxpagesize commonpagesize]
            | current_phdr :: more => 
                (* can we extend it with the current section? *)
                (case maybe_extend_phdr current_phdr isec load_can_combine_flags of
                    NONE => 
                        (*let _ = errln ("Starting new LOAD phdr for section " ^ isec.elf64_section_name_as_string)
                        in*)
                        (make_new_phdr isec elf_pt_load maxpagesize commonpagesize) :: (current_phdr :: more)
                    | SOME phdr => phdr :: more
                )
        )
    ))) [] (FILTER (\ isec .  flag_is_set shf_alloc isec.elf64_section_flags
        /\ ~ (flag_is_set shf_tls isec.elf64_section_flags)) section_pairs_bare_sorted_by_address))
    in
    (*let _ = errln "Successfully made phdrs"
    in*)
    REVERSE rev_list))`;


(*val tls_extend: forall 'abifeature. abi 'abifeature -> abi 'abifeature*)
val _ = Define `
 (tls_extend a=   
  (<| is_valid_elf_header := (a.is_valid_elf_header)
    ; make_elf_header     := (a.make_elf_header)
    ; reloc               := (a.reloc)
    ; section_is_special  := (a.section_is_special)
    ; section_is_large    := (a.section_is_large)
    ; maxpagesize         := (a.maxpagesize)
    ; minpagesize         := (a.minpagesize)
    ; commonpagesize      := (a.commonpagesize)
    ; symbol_is_generated_by_linker := (a.symbol_is_generated_by_linker)
    ; make_phdrs          := (\ maxpagesize .  \ commonpagesize .  \ file_type .  \ img .  \ section_pairs_bare_sorted_by_address .  (
        let rev_list = (FOLDL (\ accum_phdr_list .  (\ isec .  (
        (case accum_phdr_list of
            [] =>
                (*let _ = errln "Making a new TLS program header" in*)
                [make_new_phdr isec elf_pt_tls maxpagesize commonpagesize]
            | current_phdr :: more => 
                (case maybe_extend_phdr current_phdr isec tls_can_combine_flags of
                    NONE => 
                        (make_new_phdr isec elf_pt_tls maxpagesize commonpagesize) :: (current_phdr :: more)
                    | SOME phdr => phdr :: more
                )
        )
        ))) [] (FILTER (\ isec .  flag_is_set shf_alloc isec.elf64_section_flags
            /\ flag_is_set shf_tls isec.elf64_section_flags) section_pairs_bare_sorted_by_address))
        in
        (a.make_phdrs maxpagesize commonpagesize file_type img section_pairs_bare_sorted_by_address) ++ (REVERSE rev_list)
    ))
    ; max_phnum           :=(( 1:num) + a.max_phnum)
    ; guess_entry_point   := (a.guess_entry_point)
    ; pad_data            := (a.pad_data)
    ; pad_code            := (a.pad_code)
    ; generate_support    := (a.generate_support)
    ; concretise_support  := (a.concretise_support)
    ; get_reloc_symaddr   := (a.get_reloc_symaddr)
    |>))`;


(* We use these snappily-named functions in relocation calculations. *)

(*val make_default_phdrs : forall 'abifeature. natural -> natural -> natural (* file type *) -> annotated_memory_image 'abifeature -> list elf64_interpreted_section -> list elf64_program_header_table_entry*)
val _ = Define `
 (make_default_phdrs maxpagesize commonpagesize t img section_pairs_bare_sorted_by_address=    
(  
    (* FIXME: do the shared object and dyn. exec. stuff too *)make_load_phdrs maxpagesize commonpagesize img section_pairs_bare_sorted_by_address))`;


(*val find_start_symbol_address : forall 'abifeature. Ord 'abifeature, AbiFeatureTagEquiv 'abifeature => annotated_memory_image 'abifeature -> maybe natural*)
val _ = Define `
 (find_start_symbol_address dict_Basic_classes_Ord_abifeature dict_Abi_classes_AbiFeatureTagEquiv_abifeature img=    
(  
    (* Do we have a symbol called "_start"? *)let all_defs = (memory_image_orderings$defined_symbols_and_ranges 
  dict_Basic_classes_Ord_abifeature dict_Abi_classes_AbiFeatureTagEquiv_abifeature img)
    in
    let get_entry_point = (\ (maybe_range, symbol_def) .  
        if symbol_def.def_symname = "_start"
        then SOME (maybe_range, symbol_def) 
        else NONE
    )
    in
    let all_entry_points = (lem_list$mapMaybe get_entry_point all_defs)
    in
    (case all_entry_points of
        [(maybe_range, symbol_def)] =>
            (case maybe_range of
                SOME (el_name, (el_off, len)) => 
                    (case FLOOKUP img.elements el_name of
                        NONE => failwith ( STRCAT"_start symbol defined in nonexistent element ^`"  (STRCAT el_name "'"))
                        | SOME el_rec => 
                            (case el_rec.startpos of
                                NONE => (*let _ = Missing_pervasives.errln "warning: saw `_start' in element with no assigned address" in *)NONE
                                | SOME x => (* success! *) SOME (x + el_off)
                            )
                    )
                | _ => (*let _ = Missing_pervasives.errln "warning: `_start' symbol with no range" in*) NONE
            )
        | [] => (* no _start symbol *) NONE
        | _ => (*let _ = Missing_pervasives.errln ("warning: saw multiple `_start' symbols: " ^
            (let (ranges, defs) = unzip all_entry_points in show ranges)) in *)NONE
    )))`;


(*val pad_zeroes : natural -> list byte*)
val _ = Define `
 (pad_zeroes n=  (replicate n ((n2w : num -> 8 word(( 0:num))))))`;


(*val pad_0x90 : natural -> list byte*)
val _ = Define `
 (pad_0x90 n=  (replicate n ((n2w : num -> 8 word (( 9:num) *( 16:num))))))`;


(* null_abi captures ABI details common to all ELF-based, System V-based systems.
 * HACK: for now, specialise to 64-bit ABIs. *)
(*val null_abi : abi any_abi_feature*) 
val _ = Define `
(null_abi=  (<|
      is_valid_elf_header := is_valid_elf64_header
    ; make_elf_header := (make_elf64_header elf_data_2lsb elf_osabi_none(( 0:num)) elf_ma_none)
    ; reloc := noop_reloc
    ; section_is_special := elf_section_is_special
    ; section_is_large := (\ s .  (\ f .  F))
    ; maxpagesize :=((( 2:num) *( 256:num)) *( 4096:num)) (* 2MB; bit of a guess, based on gdb and prelink code *)
    ; minpagesize :=(( 1024:num)) (* bit of a guess again *)
    ; commonpagesize :=(( 4096:num))
    ; symbol_is_generated_by_linker := (\ symname .  symname = "_GLOBAL_OFFSET_TABLE_")
    ; make_phdrs := make_default_phdrs
    ; max_phnum :=(( 2:num))
    ; guess_entry_point := 
  (find_start_symbol_address
     instance_Basic_classes_Ord_Abis_any_abi_feature_dict
     instance_Abi_classes_AbiFeatureTagEquiv_Abis_any_abi_feature_dict)
    ; pad_data := pad_zeroes
    ; pad_code := pad_zeroes
    ; generate_support := 
  ( (* fun _ -> *) \l .  (case (l ) of ( _ ) => get_empty_memory_image ()  ))
    ; concretise_support := (\ img .  img)
    ; get_reloc_symaddr := 
  (default_get_reloc_symaddr
     instance_Basic_classes_Ord_Abis_any_abi_feature_dict
     instance_Abi_classes_AbiFeatureTagEquiv_Abis_any_abi_feature_dict)
    |>))`;


(*val got_entry_ordering : (string * maybe symbol_definition) -> (string * maybe symbol_definition) -> Basic_classes.ordering*)
val _ = Define `
 (got_entry_ordering (s1, md1) (s2, md2)=  EQ)`;
 (* FIXME *)

val _ = Define `
 (is_ifunc_def=  (\ maybe_def .  
(case maybe_def of
 NONE => F
 | SOME d => get_elf64_symbol_type d.def_syment = stt_gnu_ifunc
)))`;


val _ = Define `
 (amd64_reloc_needs_got_slot=   (\ symref .  \ rr .  \ maybe_def .  
    if (get_elf64_relocation_a_type rr.ref_relent IN {
        r_x86_64_got32; r_x86_64_gotpcrel; r_x86_64_gottpoff; r_x86_64_gotoff64; r_x86_64_gotpc32 (* ; r_x86_64_gotpc32_tlsdesc *)
    }) then 
       T
    else if is_ifunc_def maybe_def
         then
         (* This reference is bound to a STT_GNU_IFUNC definition. 
          * What now needs to happen is as follows.
          * - we ensure that a GOT entry is generated for this symbol (we do this here);
          * - we ensure that a PLT entry (specifically .iplt) is generated for the symbol (Below);
          * - on making the GOT, we also generate a .rela.plt relocation record covering the GOT slot;
          * - when applying the relocation, of whatever kind, the address of the PLT slot 
          *      is the address input to the calculation
          * - the code marked by the STT_GNU_IFUNC symbol definition is not the function
          *      to call; it's the function that calculates the address of the function to call!
          *      this becomes the addend of the R_X86_64_IRELATIVE Elf64_Rela marking the GOT slot
          * - note that for static linking, the GOT is usually pre-filled (cf. dynamically when it is filled by JUMP_SLOT relocs).
          *      ... but our GOT entries *must* have corresponding R_X86_64_IRELATIVEs generated
          *)
          T
    else F))`;



val _ = Define `
 (amd64_reloc_needs_plt_slot (symref : symbol_reference_and_reloc_site) rr maybe_def ref_is_statically_linked=    
 (if (get_elf64_relocation_a_type rr.ref_relent IN {
        r_x86_64_plt32      (* NOTE: when generating shared libs, it starts to matter
                             * where the definition is -- anything that is locally interposable
                             * or undefined will need a slot. See amd64_get_reloc_symaddr. *)
    }) then
       ~ (ref_is_statically_linked rr)
    else if is_ifunc_def maybe_def 
         then
         T
    else
        (* not a PLT ref *)
        F))`;


val _ = Define `
 (amd64_find_got_label_and_element img=    
  ((case FLOOKUP img.elements ".got" of
        NONE => (* got no GOT? okay... *) NONE
        | SOME got_el => 
            (* Find the GOT tag. *)
            let tags_and_ranges = (multimap$lookupBy0 
  (instance_Basic_classes_Ord_Memory_image_range_tag_dict
     instance_Basic_classes_Ord_Abis_any_abi_feature_dict) (instance_Basic_classes_Ord_Maybe_maybe_dict
   (instance_Basic_classes_Ord_tup2_dict
      lem_string_extra$instance_Basic_classes_Ord_string_dict
      (instance_Basic_classes_Ord_tup2_dict
         instance_Basic_classes_Ord_Num_natural_dict
         instance_Basic_classes_Ord_Num_natural_dict)))  (memory_image_orderings$tagEquiv
    instance_Abi_classes_AbiFeatureTagEquiv_Abis_any_abi_feature_dict) (AbiFeature(Amd64AbiFeature(abi_amd64$GOT0([])))) img.by_tag)
            in
            (case tags_and_ranges of
                [] => failwith "error: GOT element but no ABI feature GOT tag"
                | [(AbiFeature(Amd64AbiFeature(abi_amd64$GOT0(l))), _)] => SOME (l, got_el)
                | _ => failwith ("multiple GOT elements/tags")
            )
    )))`;


val _ = Define `
 (amd64_find_plt_label_and_element img=    
  ((case FLOOKUP img.elements ".plt" of
        NONE => (* got no PLT? okay... *) NONE
        | SOME plt_el => 
            (* Find the PLT tag. *)
            let tags_and_ranges = (multimap$lookupBy0 
  (instance_Basic_classes_Ord_Memory_image_range_tag_dict
     instance_Basic_classes_Ord_Abis_any_abi_feature_dict) (instance_Basic_classes_Ord_Maybe_maybe_dict
   (instance_Basic_classes_Ord_tup2_dict
      lem_string_extra$instance_Basic_classes_Ord_string_dict
      (instance_Basic_classes_Ord_tup2_dict
         instance_Basic_classes_Ord_Num_natural_dict
         instance_Basic_classes_Ord_Num_natural_dict)))  (memory_image_orderings$tagEquiv
    instance_Abi_classes_AbiFeatureTagEquiv_Abis_any_abi_feature_dict) (AbiFeature(Amd64AbiFeature(abi_amd64$PLT0([])))) img.by_tag)
            in
            (case tags_and_ranges of
                [] => failwith "error: PLT element but no ABI feature PLT tag"
                | [(AbiFeature(Amd64AbiFeature(abi_amd64$PLT0(l))), _)] => SOME (l, plt_el)
                | _ => failwith ("multiple PLT elements/tags")
            )
    )))`;


val _ = Define `
 (got_slot_index_for_symname symname got_label=    
 (lem_list$find_index (\p .  
  (case (p ) of ( (s, _) ) => s = symname )) got_label))`;


(*val amd64_get_reloc_symaddr : symbol_definition -> annotated_memory_image any_abi_feature -> maybe reloc_site -> natural*)
val _ = Define `
 (amd64_get_reloc_symaddr the_input_def output_img maybe_reloc=        
(  
    (* The default implementation simply looks up a "matching" symbol in the output image
     * and calculates its address.
     * 
     * That's normally fine, even for via-GOT references since their calculations don't
     * use the symaddr. For via-PLT references, we need to use the PLT slot address.
     * HMM. Isn't this duplicating the role of functions like amd64_plt_slot_addr?
     
     * Recall that we created this get_reloc_symaddr mechanism to deal with IFUNC symbols. 
     * With an IFUNC symbol, we reference it simply using a PC32 relocation, but the address
     * that gets filled in isn't the IFUNC address; it's the corresponding PLT slot. 
     * HMM: does this happen for other PC32 references? If so, we'll need this mechanism
     * there. And it certainly does, because relocatable object code never uses PLT32
     * relocs. 
     * 
     * I had previously tried to handle this issue in mark_fate_of_relocs, using the
     * 1-argument ApplyReloc(_) and MakePIC to encode the "replacement". But at that stage, 
     * which is ABI-independent and happens before address assignment?, we can't know enough.
     *)
    (* match bound_def_in_input with
        Nothing -> 0
        | Just the_input_def -> *)if is_ifunc_def (SOME(the_input_def))
        then
            (* We need to return the address of the "matching" PLT slot.
             * PLT label entries are (symname, maybe_def, content_fn). *)
            (case amd64_find_plt_label_and_element output_img of
                NONE => failwith "error: ifunc but no PLT"
                | SOME (l, plt_el) =>
                (case lem_list$find_index (\p .  
  (case (p ) of ( (symname, _, _) ) => symname = the_input_def.def_symname )) l of
                    (* FIXME: using symnames seems wrong *)
                    SOME idx => 
                        (case plt_el.startpos of
                            SOME addr => addr + ((( idx:num)) *( 16:num)) (* size of a PLT entry *)
                            | NONE => failwith "error: PLT has no address assigned"
                        )
                    | NONE =>( 0:num)
                )
            )
        else default_get_reloc_symaddr 
  instance_Basic_classes_Ord_Abis_any_abi_feature_dict instance_Abi_classes_AbiFeatureTagEquiv_Abis_any_abi_feature_dict the_input_def output_img maybe_reloc))`;

    (* end *)

(* *)
(*val amd64_generate_support : (* list (list reloc_site_resolution) -> *) list (string * annotated_memory_image any_abi_feature) -> annotated_memory_image any_abi_feature*)
val _ = Define `
 (amd64_generate_support (* reloc_resolution_lists *) input_fnames_and_imgs=    
(  
    (* We generate a basic GOT. At the moment we can only describe the GOT
     * contents abstractly, not as its binary content, because addresses
     * have not yet been fixed. 
     * 
     * To do this, we create a set of Abi_amd64.GOTEntry records, one for
     * each distinct symbol that is referenced by one or more GOT-based relocations.
     * To enumerate these, we look at all the symbol refs in the image.
     *)let ref_is_statically_linked = 
  (\r .  (case (r ) of ( _ ) => T ))
    in
    let (fnames, input_imgs) = (UNZIP input_fnames_and_imgs)
    in
    let tags_and_ranges_by_image = (lem_list$mapi (\ i .  \ (fname, img) . 
        (i, fname, multimap$lookupBy0 
  (instance_Basic_classes_Ord_Memory_image_range_tag_dict
     instance_Basic_classes_Ord_Abis_any_abi_feature_dict) (instance_Basic_classes_Ord_Maybe_maybe_dict
   (instance_Basic_classes_Ord_tup2_dict
      lem_string_extra$instance_Basic_classes_Ord_string_dict
      (instance_Basic_classes_Ord_tup2_dict
         instance_Basic_classes_Ord_Num_natural_dict
         instance_Basic_classes_Ord_Num_natural_dict)))  (memory_image_orderings$tagEquiv
    instance_Abi_classes_AbiFeatureTagEquiv_Abis_any_abi_feature_dict) (SymbolRef(null_symbol_reference_and_reloc_site)) img.by_tag)
    ) input_fnames_and_imgs)
    in
    let refs_via_got = (list_concat_map (\ (i, fname, tags_and_ranges) .  lem_list$mapMaybe (\ (tag, maybe_range) .  (case tag of
         SymbolRef(symref) => 
            (* Is this ref a relocation we're going to apply, and does it reference the GOT? *)
            (case (symref.maybe_reloc, symref.maybe_def_bound_to) of
                (NONE, _) => NONE
                | (SOME rr, SOME(ApplyReloc, maybe_def)) =>
                    if amd64_reloc_needs_got_slot symref rr maybe_def then
                        (*let _ = errln ("Saw a via-GOT symbol reference: to `" ^ symref.ref.ref_symname ^ "' coming from linkable " ^ (show i) ^ " (" ^ 
                            fname ^ "), logically from section " ^ (show rr.ref_src_scn)) in *)
                        SOME (symref.ref.ref_symname, maybe_def) 
                    else NONE
                | (SOME rr, SOME(MakePIC, maybe_def)) => failwith "FIXME: PIC support please"
            )
         | _ => failwith "impossible: reloc site tag is not a SymbolRef"
    )) tags_and_ranges) tags_and_ranges_by_image)
    in
    let (symnames, maybe_defs) = (UNZIP refs_via_got)
    in
    (*let _ = errln ("GOT includes defs with names: " ^ (show (Set_extra.toList (Set.fromList symnames))))
    in*)
    let got_pairs_set = (LIST_TO_SET refs_via_got)
    in
    let got_defs_set = (LIST_TO_SET maybe_defs)
    in
    (* This is where we fix the order of the GOT entries. *)
    let got_pairs_list = (SET_TO_LIST got_pairs_set)
    in
    let got_idx_and_maybe_def_by_symname_map = (FUPDATE_LIST FEMPTY (mapi (\ slot_idx .  \ (symname, maybe_def) .  (symname, (slot_idx, maybe_def))) got_pairs_list))
    in
    let got_ifunc_set = 
  ({ maybe_d | maybe_d | (maybe_d IN got_defs_set) /\ is_ifunc_def maybe_d })
    in
    (* Quirk: what if we have the same def appearing under two different symnames?
     * This shouldn't happen, at present. 
     * What if we have the same symname related to two different defs? This also 
     * shouldn't happen, because only global symbols go in the GOT, so we don't have
     * to worry about local symbols with the same name as another symbol. But still, it 
     * could plausibly happen in some situations with weird symbol visibilities or binding. *)
    (* if Set.size pairs_set <> Set.size defs_set then
        failwith "something quirky going on with GOT symbol defs and their names"
    else *)
(*    let name_def_pairs = List.foldl (fun acc -> fun (idx, symname, (maybe_range, rr)) -> 
        Set.insert (
        
                symname, (match rr.maybe_def_bound_to with
        Map.lookup symname acc with 
            Nothing -> [item]
            | Just l -> item :: l
        end) acc) {} refs_via_got
    in *)
    let got_nentries = (((CARD got_pairs_set):num))
    in
    let got_entrysize =(( 8:num))
    in
    (* We also need a PLT... sort of. We need a way to resolve via-PLT relocs. 
     * But we might do so without actually creating a (non-zero-length) PLT. 
     * Again, this is to accommodate the sorts of optimisations the GNU linker does.
     * 
     * Note that every PLT entry has a corresponding GOT entry. Here we are simply
     * enumerating the via-PLT relocs that imply a PLT entry. We look their GOT
     * slots up later, by symbol name. *)
    let refs_via_plt = (list_concat_map (\ (i, fname, tags_and_ranges) .  lem_list$mapMaybe (\ (tag, maybe_range) .  (case tag of
         SymbolRef(symref) => 
            (* Is this ref a relocation we're going to apply, and does it reference the GOT? *)
            (case (symref.maybe_reloc, symref.maybe_def_bound_to) of
                (NONE, _) => NONE
                | (SOME rr, SOME(ApplyReloc, maybe_def)) =>
                    if amd64_reloc_needs_plt_slot symref rr maybe_def ref_is_statically_linked
                    then 
                        (*let _ = if is_ifunc_def maybe_def then
                         (* we ensure that a PLT entry (specifically .iplt) is generated for the symbol *)
                         errln ("Saw a reference to IFUNC symbol `" ^ symref.ref.ref_symname ^ "'; ref is coming from linkable " ^ (show i) ^ " (" ^ 
                            fname ^ "), relent idx " ^ (show rr.ref_rel_idx) ^ " logically from section " ^ (show rr.ref_src_scn) ) 
                        else
                        errln ("Saw a via-PLT symbol reference: to `" ^ symref.ref.ref_symname ^ "' coming from linkable " ^ (show i) ^ " (" ^ 
                            fname ^ "), relent idx " ^ (show rr.ref_rel_idx) ^ " logically from section " ^ (show rr.ref_src_scn) ^ 
                            match maybe_def with Just _ -> ", with definition" | Nothing -> ", not bound to anything" end
                            )
                        in*)
                        SOME(symref.ref.ref_symname, maybe_def) 
                    else NONE
                | (SOME rr, SOME(MakePIC, maybe_def)) => failwith "FIXME: PIC support please"
            )
         | _ => failwith "impossible: reloc site tag is not a SymbolRef"
    )) tags_and_ranges) tags_and_ranges_by_image)
    in
    (*let _ = errln ("Saw " ^ (show (length refs_via_plt)) ^ " relocations of a via-PLT type")
    in*)
    (* account for the optimisations we did on GOT slots *)
    let refs_via_plt_having_got_slot = (lem_list$mapMaybe (\p .  
  (case (p ) of
      ( (symname, _) ) =>
  (case FLOOKUP got_idx_and_maybe_def_by_symname_map symname of
      SOME(idx, maybe_d) => SOME (symname, idx, maybe_d)
    | NONE => NONE
  )
  )
        ) refs_via_plt)
    in
    (*let _ = errln ("Saw " ^ (show (length refs_via_plt_having_got_slot)) ^ " relocations of a via-PLT type where we instantiated a GOT slot for the symbol")
    in*)
    let (plt_symnames, plt_got_idxs, plt_ref_bound_to_maybe_defs) = (unzip3 refs_via_plt_having_got_slot)
    in
    let plt_symnames_excluding_header = (SET_TO_LIST (LIST_TO_SET plt_symnames))
    in
    (*let _ = errln ("PLT symnames: " ^ (show plt_symnames_excluding_header))
    in*)
    let n_iplt_entries = (CARD got_ifunc_set)
        (* The content of the IPLT entries depends on the address assignment of GOT slots
         * and the IFUNCs that they reference. We need to reserve space for them here, though. *)
    in
    (*let _ = errln ("We think there should be " ^ (show n_iplt_entries) ^ " PLT entries due to references to IFUNC symbols")
    in*)
    (* let got_entries_referencing_functions =  (List.filter (fun (symname, maybe_def) -> 
            match def with
                Just d -> d.def_syment
                | Nothing -> false
            end) refs_via_got)
    in *)
    let plt_needs_header_entry = ((LENGTH plt_symnames_excluding_header) > n_iplt_entries)
    in
    (*let _ = errln ("PLT needs header entry? " ^ (show plt_needs_header_entry))
    in*)
    let total_n_plt_entries = ((if plt_needs_header_entry then( 1:num) else( 0:num)) + (missing_pervasives$length plt_symnames_excluding_header))
    in
    (*let _ = errln ("PLT total entry count: " ^ (show total_n_plt_entries))
    in*)
    let new_by_range = ({
        (SOME(".plt", (( 0:num),(( 16:num) * total_n_plt_entries))), AbiFeature(Amd64AbiFeature(abi_amd64$PLT0(
                 (* header content fn *)
                 (* the header entry is required only for dynamic linking, which is not supported yet *)
                 (* (if plt_needs_header_entry then
                    ("", Nothing, (((fun (got_base_addr : natural) -> fun (plt_base_addr : natural) -> 
                     (0, [byte_of_natural 0; byte_of_natural 0; byte_of_natural 0; byte_of_natural 0; 
                      byte_of_natural 0; byte_of_natural 0; byte_of_natural 0; byte_of_natural 0; 
                      byte_of_natural 0; byte_of_natural 0; byte_of_natural 0; byte_of_natural 0; 
                      byte_of_natural 0; byte_of_natural 0; byte_of_natural 0; byte_of_natural 0]))) : plt_entry_content_fn any_abi_feature))
                 else ("", Nothing, (((fun (got_base_addr : natural) -> fun (plt_base_addr : natural) -> (0, []))) : plt_entry_content_fn any_abi_feature))
                 )
                 ++ *) (
                 mapi (\ plt_entry_idx_not_counting_header .  (\ symname . 
                    (* We want to label the PLT entry with a function that 
                     * - accepts the PLT base address, the GOT base address and the GOT slot number;
                     * - closure-captures whatever else it needs (whether we're inserting a PLT header);
                     * - yields the *full contents of the PLT entry* before relocation. 
                     * - recall that PLT entries might be "header" (the special one at the start), 
                     *      "normal" (to be relocated with R_X86_64_JUMP_SLOT)
                     *   or "irelative" (to be relocated with R_X86_64_IRELATIVE).
                     *    Q. Why are R_X86_64_JUMP_SLOT necessary?
                     *       The PLT entries are doing relative addressing, and
                     *       the offset to the GOT entry is known at link time,
                     *       so the linker should be able to fill them in. In
                     *       fact, it does. HMM. Understand this better. *)
                    (* What is the GOT slot number? *)
                    let (got_slot_idx, maybe_def) = ((case FLOOKUP got_idx_and_maybe_def_by_symname_map symname of
                        SOME(idx, maybe_d) => (( idx:num), maybe_d)
                        | NONE => failwith ( STRCAT"GOT does not contain symbol ^`"  (STRCAT symname "' required by PLT entry"))
                        ))
                    in
                    (symname, maybe_def, ((\ (got_base_addr : num) .  \ (plt_base_addr : num) .  
                        (* Okay, now we can generate the entry. NOTE that we're lexically still in generate_support,
                         * but we'll be called from concretise_support. The code that generates the header
                         * entry is actually in concretise_support. 
                         * 
                         * If the entry is a normal entry, it looks like
                         * 
                               0x0000000000400410 <+0>:     ff 25 02 0c 20 00       jmpq   *0x200c02(%rip)        # 0x601018 <puts@got.plt>
                               0x0000000000400416 <+6>:     68 00 00 00 00  pushq  $0x0
                               0x000000000040041b <+11>:    e9 e0 ff ff ff  jmpq   0x400400
                         * 
                         * If the entry is an irelative entry, it looks like 
                         * 
                              400350:       ff 25 02 fd 2b 00       jmpq   *0x2bfd02(%rip)        # 6c0058 <_GLOBAL_OFFSET_TABLE_+0x58>
                              400356:       68 00 00 00 00          pushq  $0x0
                              40035b:       e9 00 00 00 00          jmpq   400360 <check_one_fd.part.0>
                         
                         * ... i.e. basically the same but the pushq and jmpq have literal-zero args (they're not used).
                         *)
                        let this_plt_slot_base_addr = (plt_base_addr +(( 16:num) * ((( plt_entry_idx_not_counting_header:num)) 
                            + (if plt_needs_header_entry then( 1:num) else( 0:num)))))
                        in
                        (*let _ = Missing_pervasives.errln ("PLT slot base address for symname `" ^ symname ^ "': 0x" ^
                            (hex_string_of_natural this_plt_slot_base_addr))
                        in*)
                        let got_slot_addr = (got_base_addr +(( 8:num) * got_slot_idx))
                        in
                        (*let _ = Missing_pervasives.errln ("GOT slot address for symname `" ^ symname ^ "' (idx " ^ (show got_slot_idx) ^ "): 0x" ^
                            (hex_string_of_natural got_slot_addr))
                        in*)
                        let maybe_header_entry_address = (if plt_needs_header_entry then SOME(plt_base_addr) else NONE)
                        in
                        let offset_to_got_slot = ((int_of_num got_slot_addr) - (int_of_num (this_plt_slot_base_addr +( 6:num))))
                        in
                        (*let _ = Missing_pervasives.errln ("PLT's PC-relative index to GOT slot for symname `" ^ symname ^ "' (GOT idx " ^ (show got_slot_idx) ^ ") is (decimal)" ^
                            (show offset_to_got_slot))
                        in*)
                        let content_bytes =                        
 ((((([(n2w : num -> 8 word(( 255:num))); (n2w : num -> 8 word(( 37:num)))] ++ (* offset to the GOT entry, from the *next* instruction start, signed 32-bit LE *)
                            (to_le_signed_bytes(( 4:num)) offset_to_got_slot)) ++
                        [(n2w : num -> 8 word(( 104:num)))]) ++ (* plt slot number not including header, 32-bit LE *)
                                 (to_le_unsigned_bytes(( 4:num)) (int_of_num (( plt_entry_idx_not_counting_header:num))))) ++
                        [(n2w : num -> 8 word(( 233:num)))]) ++ (to_le_signed_bytes(( 4:num)) (
                            if is_ifunc_def maybe_def
                            then( 0 : int)
                            else (case maybe_header_entry_address of
                                NONE => failwith "normal PLT entry but no PLT header!"
                                | SOME header_entry_address => (int_of_num header_entry_address) - (int_of_num (this_plt_slot_base_addr +( 16:num)))
                                )
                        )))
                        in
                        (*let _ = errln ("Created a PLT entry consisting of " ^ (show (length content_bytes)) ^ " bytes.")
                        in*)
                        (this_plt_slot_base_addr, content_bytes)
                        (* 
                        match maybe_def with 
                            Nothing -> 0
                            | Just sd -> 
                                match Memory_image_orderings.find_defs_matching sd img with
                                    [] -> failwith ("no matching definitions for PLT entry named " ^ symname)
                                    | [(Just(def_el_name, (def_start, def_len)), d)] -> 
                                        match element_and_offset_to_address (def_el_name, def_start) img with
                                            Nothing -> failwith ("PLT: no address for definition offset in element " ^ def_el_name)
                                            | Just x -> 
                                                let _ = errln ("PLT slot for symbol `" ^ symname ^ 
                                                    "' calculated at (non-PLT) address 0x" ^ (hex_string_of_natural x) ^ 
                                                    " (offset 0x" ^ (hex_string_of_natural def_start) ^ " in element " ^ def_el_name ^ ")")
                                                in
                                                x
                                        end
                                    | _ -> failwith ("multiple matching definitions for PLT entry named " ^ symname)
                                end
                        end
                        *)
                        
                    ) : any_abi_feature plt_entry_content_fn))
                ))
                plt_symnames)
            ))) 
        )
    ;   (SOME(".plt", (( 0:num),(( 16:num) * total_n_plt_entries))), FileFeature(ElfSection(( 1:num), 
          <| elf64_section_name :=(( 0:num)) (* ignored *)
           ; elf64_section_type := sht_progbits
           ; elf64_section_flags := shf_alloc
           ; elf64_section_addr :=(( 0:num)) (* ignored -- covered by element *)
           ; elf64_section_offset :=(( 0:num)) (* ignored -- will be replaced when file offsets are assigned *)
           ; elf64_section_size :=(( 16:num) * total_n_plt_entries) (* ignored? NO, we use it in linker_script to avoid plumbing through the element record *)
           ; elf64_section_link :=(( 0:num))
           ; elf64_section_info :=(( 0:num))
           ; elf64_section_align :=(( 16:num))
           ; elf64_section_entsize :=(( 16:num))
           ; elf64_section_body := byte_sequence$empty (* ignored *)
           ; elf64_section_name_as_string := ".plt"
           |>
        )))
        (* For each GOT entry that corresponds to a thread-local symbol, we also need to 
         * generate a relocation record. HMM. These new relocation records are ones we don't 
         * yet have decisions for. That might be a problem. 
         * 
         * In fact, this approach is not appropriate for static linking. Just put the offsets
         * in there when we concretise the GOT. Something like this will be good for 
         * dynamic linking, though. At the moment, creating a SymbolRef at this stage
         * is problematic because it's not in the bindings list. When we generate shared
         * objects, we'll have to revisit that code. *)
        (* (Just(".got", (i * got_entrysize, 8)), SymbolRef( <|
                ref = <| ref_symname = symname
                       ; ref_syment = sd.def_syment
                       ; ref_sym_scn = 0
                       ; ref_sym_idx = 0
                       |>
                ; maybe_def_bound_to = Just(ApplyReloc, Just sd)
                ; maybe_reloc = Just(
                  <|
                        ref_relent  = 
                            <| elf64_ra_offset = elf64_addr_of_natural 0
                             ; elf64_ra_info   = elf64_xword_of_natural r_x86_64_tpoff64
                             ; elf64_ra_addend = elf64_sxword_of_integer 0
                             |>
                      ; ref_rel_scn = 0
                      ; ref_rel_idx = 0
                      ; ref_src_scn = 0
                   |>
                )
              |>)) 
              | forall ((i, symname, sd) IN (Set.fromList (mapMaybei (fun i -> fun (symname, maybe_def) ->
                match maybe_def with Nothing -> Nothing | Just sd -> Just(i, symname, sd) end) refs_via_got)))
              | get_elf64_symbol_type sd.def_syment = stt_tls
     *)
    ;   (SOME(".got", (( 0:num), (got_nentries * got_entrysize))), AbiFeature(Amd64AbiFeature(abi_amd64$GOT0(got_pairs_list))))
    ;   (SOME(".got", (( 0:num), (got_nentries * got_entrysize))), FileFeature(ElfSection(( 2:num), 
          <| elf64_section_name :=(( 0:num)) (* ignored *)
           ; elf64_section_type := sht_progbits
           ; elf64_section_flags := (natural_lor shf_write shf_alloc)
           ; elf64_section_addr :=(( 0:num)) (* ignored -- covered by element *)
           ; elf64_section_offset :=(( 0:num)) (* ignored -- will be replaced when file offsets are assigned *)
           ; elf64_section_size := (got_nentries * got_entrysize) (* ignored? NO, we use it in linker_script to avoid plumbing through the element record *)
           ; elf64_section_link :=(( 0:num))
           ; elf64_section_info :=(( 0:num))
           ; elf64_section_align :=(( 8:num))
           ; elf64_section_entsize := got_entrysize
           ; elf64_section_body := byte_sequence$empty (* ignored *)
           ; elf64_section_name_as_string := ".got"
           |>
        )))
    ;   (* FIXME: I've a feeling _GLOBAL_OFFSET_TABLE_ generally doesn't mark the *start* of the GOT; 
         * it's some distance in. What about .got.plt? *)
        (SOME(".got", (( 0:num), (got_nentries * got_entrysize))), SymbolDef(<|
              def_symname := "_GLOBAL_OFFSET_TABLE_"
            ; def_syment :=    (<| elf64_st_name  := ((n2w : num -> uint32) (( 0:num))) (* ignored *)
                               ; elf64_st_info  := ((n2w : num -> unsigned_char) (( 0:num))) (* FIXME *)
                               ; elf64_st_other := ((n2w : num -> unsigned_char) (( 0:num))) (* FIXME *)
                               ; elf64_st_shndx := ((n2w : num -> uint16) (( 1:num)))
                               ; elf64_st_value := ((n2w : num -> uint64) (( 0:num))) (* ignored *)
                               ; elf64_st_size  := ((n2w : num -> uint64) (got_nentries * got_entrysize)) (* FIXME: start later, smaller size? zero size? *)
                               |>)
            ; def_sym_scn :=(( 1:num))
            ; def_sym_idx :=(( 1:num))
            ; def_linkable_idx :=(( 0:num))
            |>))
    ; (SOME(".rela.iplt", (( 0:num),(( 24:num) (* size of an Elf64_Rela *) * ( n_iplt_entries:num)))), FileFeature(ElfSection(( 3:num), 
          <| elf64_section_name :=(( 0:num)) (* ignored *)
           ; elf64_section_type := sht_rela
           ; elf64_section_flags := (natural_lor shf_alloc shf_info_link)
           ; elf64_section_addr :=(( 0:num)) (* ignored -- covered by element *)
           ; elf64_section_offset :=(( 0:num)) (* ignored -- will be replaced when file offsets are assigned *)
           ; elf64_section_size :=(( 24:num) (* size of an Elf64_Rela *) * ( n_iplt_entries:num)) (* ignored? NO, we use it in linker_script to avoid plumbing through the element record *)
           ; elf64_section_link :=(( 0:num))
           ; elf64_section_info :=((  (* FIXME: want this to be the PLT section shndx *)0:num))
           ; elf64_section_align :=(( 8:num))
           ; elf64_section_entsize :=(( 24:num))
           ; elf64_section_body := byte_sequence$empty (* ignored *)
           ; elf64_section_name_as_string := ".rela.iplt"
           |>
        )))
    })
    in
    <|  elements := (((FEMPTY |+ (".rela.iplt", <|
                    startpos := NONE
               ;    length1 := (SOME (( 24:num) (* size of an Elf64_Rela *) * ( n_iplt_entries:num)))
               ;    contents := ([])
               |>)
               ) |+ (".plt", <|
                    startpos := NONE
               ;    length1 := (let len =(( 16:num) * total_n_plt_entries) in 
                        (*let _ = errln ("PLT length in element: " ^ (show len) ^ " bytes")
                        in *) SOME (( 16:num) * total_n_plt_entries))
               ;    contents := ([])
               |>)) |+ (".got", <|
                    startpos := NONE
               ;    length1 := (SOME (got_nentries * got_entrysize))
               ;    contents := ([])
               |>))
     ;   by_tag := (by_tag_from_by_range new_by_range)
     ;   by_range := new_by_range
     |>))`;


(*val amd64_concretise_support : annotated_memory_image any_abi_feature -> annotated_memory_image any_abi_feature*)
val _ = Define `
 (amd64_concretise_support orig_img=    
(  
    (*let _ = errln "Concretising amd64 ABI support structures"
    in*)
    (* Fill in the GOT contents. *)(case amd64_find_got_label_and_element orig_img of
        NONE => orig_img (* no GOT, but that's okay *) 
        | SOME (got_l, got_el) =>
    let got_base_addr = ((case got_el.startpos of
        SOME a => a
        | NONE => failwith "GOT has no address assigned"
    ))
    in 
    let got_entry_bytes_for = (\ img .  \ symname .  \ maybe_def .  \ plt_l .  \ maybe_plt_el .  (case maybe_def of
        NONE => replicate(( 8:num)) ((n2w : num -> 8 word(( 0:num))))
        | SOME sd =>
            (* What should the GOT slot be initialized to point to? 
             * If there's a PLT entry, we should point to that + 6,
             * i.e. the second instruction.
             * 
             * If there's not, then it might be a thread-local. *)
            (case lem_list$find_index (\p .  
  (case (p ) of ( (plt_symname, _, _) ) => symname = plt_symname )) plt_l of
                SOME plt_slot_idx =>
                    (case maybe_plt_el of
                        NONE => failwith "GOT slot with PLT entry but no PLT element"
                       | SOME plt_el =>
                    (case plt_el.startpos of
                        SOME addr => natural_to_le_byte_list_padded_to(( 8:num)) ((addr + ((( plt_slot_idx:num)) *( 16:num))) +( 6:num))
                        | NONE => failwith ("no PLT!")
                    )
                    )
                | NONE => 
                    (* Just look for a definition. *)
                        (case memory_image_orderings$find_defs_matching 
  instance_Basic_classes_Ord_Abis_any_abi_feature_dict instance_Abi_classes_AbiFeatureTagEquiv_Abis_any_abi_feature_dict sd img of
                        [] => failwith ( STRCAT"no matching definitions for GOT entry named " symname)
                        | [(SOME(def_el_name, (def_start, def_len)), d)] => 
                            (case element_and_offset_to_address (def_el_name, def_start) img of
                                NONE => failwith ( STRCAT"no address for definition offset in element " def_el_name)
                                | SOME x => 
                                    (* If sd is a TLS symbol, we want its offset from the *end* of the 
                                     * TLS segment. *)
                                    (* FIXME: factor out this logic so that it lives in the TLS ABI spec. *)
                                    if get_elf64_symbol_type sd.def_syment = stt_tls then
                                        (* FIXME: the right way to do this is to mark the segments in the image 
                                         * *first*. They can't have ranges, because they span many elements,
                                         * but they can have vaddr ranges as arguments. *)
                                        let offs = (i2n_signed(( 64 : num)) (( 0 : int)-( 8 : int)))
                                        in
                                        (*let _ = errln ("GOT slot for TLS symbol `" ^ symname ^ 
                                            "' created containing offset 0x" ^ (hex_string_of_natural offs))
                                        in*)
                                        natural_to_le_byte_list offs
                                    else (*let _ = errln ("GOT slot for symbol `" ^ symname ^ 
                                        "' created pointing to address 0x" ^ (hex_string_of_natural x) ^ 
                                        " (offset 0x" ^ (hex_string_of_natural def_start) ^ " in element " ^ def_el_name ^ ")")
                                    in*)
                                    natural_to_le_byte_list_padded_to(( 8:num)) x
                            )
                        | _ => failwith ( STRCAT"multiple matching definitions for GOT entry named " symname)
                    )
            )
    ))
    in
    let concretise_got = (\ img .  \ plt_l .  \ maybe_plt_el . 
        let l = got_l
        (*       Just(got_el_name, (got_start_off, got_len)))] ->   *)
        in
        (*let _ = errln ("Concretising a GOT of " ^ (show (length l)) ^ " entries.")
        in*)
        let got_entry_contents = (MAP (\ (symname, maybe_def) .  
            MAP (\ b .  SOME b) (got_entry_bytes_for img symname maybe_def plt_l maybe_plt_el)) l)
        in
        (* We replace the GOT element's contents with the concrete addresses
         * of the symbols it should contain. We leave the metadata label in there,
         * for the relocation logic to find. If we change the order of entries, 
         * change it there too. *)
        let got_content = (FLAT got_entry_contents)
        in
        let new_got_el =            
 (<| contents := got_content
             ; startpos := (got_el.startpos)
             ; length1   := (got_el.length1)
             |>)
        in
        let new_got_tag = (AbiFeature(Amd64AbiFeature(abi_amd64$GOT0(l))))
        in
        let got_range = (SOME(".got", (( 0:num),(( 8:num) * length l))))
        in
        let new_by_tag = (((img.by_tag : (( any_abi_feature range_tag) # ( element_range option)) set) DIFF
            {(AbiFeature(Amd64AbiFeature(abi_amd64$GOT0(l))), got_range)})
            UNION {(new_got_tag, got_range)})
        in
        let new_elements_map = ((
            img.elements \\ ".got"
        ) |+ (".got", new_got_el))
        in
        <| elements := new_elements_map
         ; by_tag   := new_by_tag
         ; by_range := (by_range_from_by_tag new_by_tag)
         |>)
    in
    (case amd64_find_plt_label_and_element orig_img of
        NONE => concretise_got orig_img [] NONE (* no PLT, but possibly a GOT *)
        | SOME (plt_l, plt_el) =>
    let plt_base_addr = ((case plt_el.startpos of
        SOME a => a
        | NONE => failwith "PLT has no address assigned" 
    ))
    in
    let concretise_plt = (\ img . 
       let l = plt_l
       in
        (* We replace the PLT element's contents with the concrete entries
         * for each of the symbols in the table. We leave the metadata label in there,
         * for the relocation logic to find. If we change the order of entries, 
         * change it there too. *)
        let all_content = (FLAT (MAP (\p .  
  (case (p ) of
      ( (_, _, plt_content_fn) ) =>
  (case plt_content_fn got_base_addr plt_base_addr of
      (_, content) =>
  content
  )
  )
        ) l))
        in
        (*let _ = errln ("Got " ^ (show (length all_content)) ^ " bytes of PLT content")
        in
        let _ = errln ("Generated PLT reserved " ^ (show (match plt_el.length with
            Just n -> n
            | Nothing -> failwith "PLT has no length"
        end)) ^ " bytes of PLT content")
        in*)
        let new_plt_el =            
 (<| contents := (MAP (\ b .  SOME b) all_content)
             ; startpos := (plt_el.startpos)
             ; length1   := (SOME(length all_content))
             |>)
        in
        let new_elements_map = ((
            img.elements \\ ".plt"
        ) |+ (".plt", new_plt_el))
        in
        <| elements := new_elements_map
         ; by_tag   := (img.by_tag)
         ; by_range := (img.by_range)
         |>)
    in
    let concretise_rela_plt = (\ img . 
        let maybe_rela_plt_el = (FLOOKUP img.elements ".rela.plt")
        in
        let maybe_new_rela_plt_el = ((case maybe_rela_plt_el of
            NONE => (* got no .rela.plt? okay... *) 
                (*let _ = errln "No .rela.plt found"
                in*)
                NONE
            | SOME rela_plt_el => 
                let got_entry_iplt_widget_for = (\ symname .  \ maybe_def .  (case maybe_def of
                    NONE => NONE
                    | SOME sd => 
                        if ~ ((get_elf64_symbol_type sd.def_syment) = stt_gnu_ifunc) then NONE
                        else SOME(\ index_in_got . 
                            (* This is a 24-byte Elf64_Rela. *)
                            let (r_offset : num) (* GOT *slot* address! *) =                                
 ((case got_el.startpos of
                                    NONE => failwith "internal error: GOT has no assigned address"
                                    | SOME addr => addr + (( 8:num) * index_in_got)
                                ))
                            in
                            let (r_info : num) = r_x86_64_irelative in
                            ((natural_to_le_byte_list_padded_to(( 8:num)) r_offset ++
                            natural_to_le_byte_list_padded_to(( 8:num)) r_info) ++
                            (* r_addend -- address of the ifunc definition.
                             * NOTE that this is NOT the same as the GOT entry bytes.
                             * It's the actual address of the ifunc, whereas
                             * the GOT entry is initialized to point back into the PLT entry. *)
                            (case memory_image_orderings$find_defs_matching 
  instance_Basic_classes_Ord_Abis_any_abi_feature_dict instance_Abi_classes_AbiFeatureTagEquiv_Abis_any_abi_feature_dict sd img of
                                  [] => failwith ( STRCAT"impossible: IPLT entry widget found matching ifunc definition for " symname)
                                | [(SOME(def_el_name, (def_start, def_len)), d)] => 
                                    (case element_and_offset_to_address (def_el_name, def_start) img of
                                        NONE => failwith ( STRCAT"no address for ifunc definition offset in element " def_el_name)
                                        | SOME x => 
                                            (* If sd is a TLS symbol, we want its offset from the *end* of the 
                                             * TLS segment. *)
                                            (* FIXME: factor out this logic so that it lives in the TLS ABI spec. *)
                                            if ~ ((get_elf64_symbol_type sd.def_syment) = stt_gnu_ifunc)
                                            then failwith "impossible: found ifunc definition that is not an ifunc"
                                            else
                                                natural_to_le_byte_list_padded_to(( 8:num)) x
                                    )
                                | _ => failwith "impossible: more than one ifunc definition"
                             )
                           ))
                        (* end Just sd *)
                    ))
                in
                let rela_iplt_widgets = (MAP (\ (symname, maybe_def) .  got_entry_iplt_widget_for symname maybe_def) got_l)
                in
                let new_content_bytelists =                    
 (mapi (\ i .  \ rela_widget .  
                    (case rela_widget of
                        SOME f => f (( i:num))
                        | NONE => []
                    )
                    ) rela_iplt_widgets)
                in
                let new_contents = (MAP (\ b .  SOME b) (FLAT new_content_bytelists))
                in
                (*let _ = errln ("Concretised .rela.plt; first 24 bytes: " ^ (show (take 24 new_contents)))
                in*)
                SOME(
                    <| contents := new_contents
                     ; startpos := (rela_plt_el.startpos)
                     ; length1   := (rela_plt_el.length1)
                     |>
                )
        ))
        in
        let new_elements_map = ((case maybe_new_rela_plt_el of
            SOME new_rela_plt_el =>(
                img.elements \\ ".rela.plt"
            ) |+ (".rela.plt", new_rela_plt_el)
            | NONE => img.elements
        ))
        in
        <| elements := new_elements_map
         ; by_tag   := (img.by_tag)
         ; by_range := (img.by_range)
         |>)
    in
    concretise_rela_plt (concretise_plt (concretise_got orig_img plt_l (SOME plt_el)))
) )))`;


(*val amd64_got_slot_idx : annotated_memory_image any_abi_feature -> symbol_reference_and_reloc_site -> natural*)
val _ = Define `
 (amd64_got_slot_idx img rr=    
(  
    (*let _ = errln ("Looking up GOT slot for symbol " ^ rr.ref.ref_symname) in*)(case FLOOKUP img.elements ".got" of
        NONE => (* got no GOT? okay... *) failwith "got no GOT"
        | SOME got_el => 
            (* Find the GOT tag. *)
            let tags_and_ranges = (multimap$lookupBy0 
  (instance_Basic_classes_Ord_Memory_image_range_tag_dict
     instance_Basic_classes_Ord_Abis_any_abi_feature_dict) (instance_Basic_classes_Ord_Maybe_maybe_dict
   (instance_Basic_classes_Ord_tup2_dict
      lem_string_extra$instance_Basic_classes_Ord_string_dict
      (instance_Basic_classes_Ord_tup2_dict
         instance_Basic_classes_Ord_Num_natural_dict
         instance_Basic_classes_Ord_Num_natural_dict)))  (memory_image_orderings$tagEquiv
    instance_Abi_classes_AbiFeatureTagEquiv_Abis_any_abi_feature_dict) (AbiFeature(Amd64AbiFeature(abi_amd64$GOT0([])))) img.by_tag)
            in
            (case tags_and_ranges of
                [] => failwith "error: GOT element but no ABI feature GOT tag"
                | [(AbiFeature(Amd64AbiFeature(abi_amd64$GOT0(l))), SOME(got_el_name, (got_start_off, got_len)))] => 
                    (* Find the slot corresponding to rr, if we have one. *)
                    let got_addr = ((case got_el.startpos of SOME addr => addr | NONE => failwith "GOT has no addr at reloc time" ))
                    in
                    (case rr.maybe_def_bound_to of
                        SOME (_, SOME(d)) => 
                            (case lem_list$find_index (\ (symname, maybe_def) .  SOME(d) = maybe_def) l of
                                SOME idx => ( idx:num)
                             |  NONE => failwith ( STRCAT"no GOT slot for reloc against ^`"  (STRCAT rr.ref.ref_symname "'"))
                            )
                        | SOME(_, NONE) => (* HACK: look for the weak symname. Really want more (ref-based) labelling. *)
                            (case lem_list$find_index (\p .  
  (case (p ) of ( (symname, _) ) => symname = rr.ref.ref_symname )) l of
                                SOME idx => ( idx:num)
                             |  NONE => failwith ( STRCAT"no GOT slot for reloc against undefined symbol ^`"  (STRCAT rr.ref.ref_symname "'"))
                            )
                        | _ => failwith "GOT: unbound def"
                    )
                | _ => failwith "got bad GOT"
            )
    )))`;


(*val amd64_got_slot_addr : annotated_memory_image any_abi_feature -> symbol_reference_and_reloc_site -> natural*)
val _ = Define `
 (amd64_got_slot_addr img rr=    
  ((case FLOOKUP img.elements ".got" of
        NONE => (* got no GOT? okay... *) failwith "got no GOT"
        | SOME got_el => 
            (* Find the GOT tag. *)
            let tags_and_ranges = (multimap$lookupBy0 
  (instance_Basic_classes_Ord_Memory_image_range_tag_dict
     instance_Basic_classes_Ord_Abis_any_abi_feature_dict) (instance_Basic_classes_Ord_Maybe_maybe_dict
   (instance_Basic_classes_Ord_tup2_dict
      lem_string_extra$instance_Basic_classes_Ord_string_dict
      (instance_Basic_classes_Ord_tup2_dict
         instance_Basic_classes_Ord_Num_natural_dict
         instance_Basic_classes_Ord_Num_natural_dict)))  (memory_image_orderings$tagEquiv
    instance_Abi_classes_AbiFeatureTagEquiv_Abis_any_abi_feature_dict) (AbiFeature(Amd64AbiFeature(abi_amd64$GOT0([])))) img.by_tag)
            in
            (case tags_and_ranges of
                [] => failwith "error: GOT element but no ABI feature GOT tag"
                | [(AbiFeature(Amd64AbiFeature(abi_amd64$GOT0(l))), SOME(got_el_name, (got_start_off, got_len)))] => 
                    (* Find the slot corresponding to rr, if we have one. *)
                    let got_addr = ((case got_el.startpos of SOME addr => addr | NONE => failwith "GOT has no addr at reloc time" ))
                    in(( 8:num) * amd64_got_slot_idx img rr) + got_addr
                | _ => failwith "got bad GOT"
            )
    )))`;


(*val amd64_plt_slot_addr : annotated_memory_image any_abi_feature -> symbol_reference_and_reloc_site -> natural -> natural*)
val _ = Define `
 (amd64_plt_slot_addr img rr raw_addr=    
  ((case FLOOKUP img.elements ".plt" of
        NONE =>
            (* got no PLT? okay... under static linking this can happen. 
               We use the actual symbol address of the *)
            (*let _ = errln "Warning: no PLT, so attempting to use actual symbol address as PLT slot address"
            in*) 
            (* if raw_addr = 0 then failwith "bailing rather than resolving PLT slot to null address (perhaps conservatively)" else  *)
            raw_addr
        | SOME plt_el => 
            (* Find the PLT tag. *)
            let tags_and_ranges = (multimap$lookupBy0 
  (instance_Basic_classes_Ord_Memory_image_range_tag_dict
     instance_Basic_classes_Ord_Abis_any_abi_feature_dict) (instance_Basic_classes_Ord_Maybe_maybe_dict
   (instance_Basic_classes_Ord_tup2_dict
      lem_string_extra$instance_Basic_classes_Ord_string_dict
      (instance_Basic_classes_Ord_tup2_dict
         instance_Basic_classes_Ord_Num_natural_dict
         instance_Basic_classes_Ord_Num_natural_dict)))  (memory_image_orderings$tagEquiv
    instance_Abi_classes_AbiFeatureTagEquiv_Abis_any_abi_feature_dict) (AbiFeature(Amd64AbiFeature(abi_amd64$PLT0([])))) img.by_tag)
            in
            (case tags_and_ranges of
                [] => failwith "error: PLT element but no ABI feature PLT tag"
                | [(AbiFeature(Amd64AbiFeature(abi_amd64$PLT0(l))), SOME(plt_el_name, (plt_start_off, plt_len)))] => 
                    let plt_addr = ((case plt_el.startpos of SOME addr => addr | NONE => failwith "PLT has no addr at reloc time" ))
                    in
                    (* Find the slot corresponding to rr, if we have one. *)
                    (case rr.maybe_def_bound_to of
                        SOME (_, SOME(d)) => 
                            (case lem_list$mapMaybe (\ (symname, maybe_def, fn) .  if SOME(d) = maybe_def then SOME fn else NONE) l of
                                [fn] => 
                                    let got_addr =                                         
 ((case FLOOKUP img.elements ".got" of
                                            NONE => (* got no GOT? okay... *) failwith "got no GOT (applying PLT calculation)"
                                            | SOME got_el => (case got_el.startpos of
                                                SOME addr => addr
                                                | NONE => failwith "concrete GOT has no addr"
                                                )
                                        ))
                                    in
                                    let (addr, content) = (fn got_addr plt_addr)
                                    in
                                    (*let _ = errln ("Calculated PLT slot for `" ^ d.def_symname ^ "', from PLT addr " ^ (hex_string_of_natural plt_addr)
                                        ^ " and GOT addr " ^ (hex_string_of_natural got_addr) ^ ", as " ^ (hex_string_of_natural addr))
                                    in*)
                                    addr
                                | [] => (* failwith ("internal error: no PLT entry for reloc against `" ^ rr.ref.ref_symname ^ "'") *)
                                    (* If we got no PLT slot, we assume it's because the PLT entry was optimised out. 
                                     * So we just return the address of the symbol itself. *)
                                    (*let _ = errln ("No PLT entry for reloc against `" ^ rr.ref.ref_symname ^ 
                                        "', which we assume was optimised to avoid the GOT")
                                    in*)
                                    (case memory_image_orderings$find_defs_matching 
  instance_Basic_classes_Ord_Abis_any_abi_feature_dict instance_Abi_classes_AbiFeatureTagEquiv_Abis_any_abi_feature_dict d img of
                                        [] =>( 0:num) (* HMM -- should be an error? *)
                                        | [(SOME(el_name, (start_off, len)), matching_d)] =>
                                            (case element_and_offset_to_address (el_name, start_off) img of
                                                SOME a => a
                                                | NONE => failwith ( STRCAT"internal error: could not get address for PLT-short-circuited symbol ^`"  (STRCAT rr.ref.ref_symname "'"))
                                            )
                                        | _ => failwith ( STRCAT"output image has multiple and/or no-location definitions to which via-PLT ref to ^`"  (STRCAT rr.ref.ref_symname "' could resolve"))
                                    )
                                | _ =>  failwith ( STRCAT"internal error: multiple PLT entries for reloc against ^`"  (STRCAT rr.ref.ref_symname "'"))
                            )
                        | SOME(_, NONE) =>(  (* weak, so 0 *)0:num)
                        | _ => failwith "PLT: unbound def"
                    )
                | _ => failwith "got bad PLT"
            )
    )))`;


(** [amd64_reloc r] yields a function that applies relocations of type [r]. *)
(*val amd64_reloc : reloc_fn any_abi_feature*)
val _ = Define `
 (amd64_reloc r=    
  ((case (string_of_amd64_relocation_type r) of
      "R_X86_64_NONE" =>            (F, (\ img .  (\ site_addr .  (\ rr .  (( 0:num), (\ s .  \ a .  \ e .  e))))))
    | "R_X86_64_64" =>              (T,  (\ img .  (\ site_addr .  (\ rr .  (( 8:num), (\ s .  \ a .  \ e .  i2n (n2i s + a)))))))
    | "R_X86_64_PC32" =>            (F, (\ img .  (\ site_addr .  (\ rr .  (( 4:num), (\ s .  \ a .  \ e .  i2n_signed(( 32 : num)) (((n2i s) + a) - (n2i site_addr))))))))
    | "R_X86_64_GOT32" =>           (F, (\ img .  (\ site_addr .  (\ rr .  (( 4:num), (\ s .  \ a .  \ e .  i2n_signed(( 32 : num)) ((n2i (amd64_got_slot_idx img rr)) + a)))))))
    | "R_X86_64_PLT32" =>           (F, (\ img .  (\ site_addr .  (\ rr .  (( 4:num), (\ s .  \ a .  \ e .  i2n_signed(( 32 : num)) (((n2i (amd64_plt_slot_addr img rr s)) + a) - (n2i site_addr))) )))) )
    | "R_X86_64_COPY" =>            (F, (\ img .  (\ site_addr .  (\ rr .  (size_of_copy_reloc img rr, (\ s .  \ a .  \ e .  e) (* FIXME *))))))
    | "R_X86_64_GLOB_DAT" =>        (F, (\ img .  (\ site_addr .  (\ rr .  (size_of_def rr, (\ s .  \ a .  \ e .  e) (* FIXME *))))))
    | "R_X86_64_JUMP_SLOT" =>       (F, (\ img .  (\ site_addr .  (\ rr .  (( 4:num) (* CHECK *), (\ s .  \ a .  \ e .  e) (* FIXME *))))))
    | "R_X86_64_RELATIVE" =>        (T,  (\ img .  (\ site_addr .  (\ rr .  (( 8:num), (\ s .  \ a .  \ e .  e) (* FIXME *))))))
    | "R_X86_64_GOTPCREL" =>        (F, (\ img .  (\ site_addr .  (\ rr .  (( 4:num), (\ s .  \ a .  \ e .  i2n_signed(( 32 : num)) (((n2i (amd64_got_slot_addr img rr)) + a) - (n2i site_addr))) )))) )
    | "R_X86_64_32" =>              (T,  (\ img .  (\ site_addr .  (\ rr .  (( 4:num), (\ s .  \ a .  \ e .  i2n (n2i s + a)))))))
    | "R_X86_64_32S" =>             (T,  (\ img .  (\ site_addr .  (\ rr .  (( 4:num), (\ s .  \ a .  \ e .  i2n_signed(( 32 : num)) ((n2i s) + a)))))))
    | "R_X86_64_16" =>              (T,  (\ img .  (\ site_addr .  (\ rr .  (( 2:num), (\ s .  \ a .  \ e .  e) (* FIXME *))))))
    | "R_X86_64_PC16" =>            (F, (\ img .  (\ site_addr .  (\ rr .  (( 2:num), (\ s .  \ a .  \ e .  e) (* FIXME *))))))
    | "R_X86_64_8" =>               (T,  (\ img .  (\ site_addr .  (\ rr .  (( 1:num), (\ s .  \ a .  \ e .  e) (* FIXME *))))))
    | "R_X86_64_PC8" =>             (F, (\ img .  (\ site_addr .  (\ rr .  (( 1:num), (\ s .  \ a .  \ e .  e) (* FIXME *))))))
    | "R_X86_64_DTPMOD64" =>        (F, (\ img .  (\ site_addr .  (\ rr .  (( 8:num) (* CHECK *), (\ s .  \ a .  \ e .  e) (* FIXME *))))))
    | "R_X86_64_DTPOFF64" =>        (F, (\ img .  (\ site_addr .  (\ rr .  (( 8:num) (* CHECK *), (\ s .  \ a .  \ e .  e) (* FIXME *))))))
    | "R_X86_64_TPOFF64" =>         (F, (\ img .  (\ site_addr .  (\ rr .  (( 8:num) (* CHECK *), (\ s .  \ a .  \ e .  i2n_signed(( 64 : num)) (( 0 : int)-( 8 : int)))  (* FIXME *))))))
    | "R_X86_64_TLSGD" =>           (F, (\ img .  (\ site_addr .  (\ rr .  (( 8:num) (* CHECK *), (\ s .  \ a .  \ e .  e) (* FIXME *))))))
    | "R_X86_64_TLSLD" =>           (F, (\ img .  (\ site_addr .  (\ rr .  (( 8:num) (* CHECK *), (\ s .  \ a .  \ e .  e) (* FIXME *))))))
    | "R_X86_64_DTPOFF32" =>        (F, (\ img .  (\ site_addr .  (\ rr .  (( 4:num) (* CHECK *), (\ s .  \ a .  \ e .  e) (* FIXME *))))))
    | "R_X86_64_GOTTPOFF" =>        (F, (\ img .  (\ site_addr .  (\ rr .  (( 4:num), (\ s .  \ a .  \ e .  i2n_signed(( 32 : num)) (((n2i (amd64_got_slot_addr img rr)) + a) - (n2i site_addr))))))))
    | "R_X86_64_TPOFF32" =>         (F, (\ img .  (\ site_addr .  (\ rr .  (( 4:num) (* CHECK *), (\ s .  \ a .  \ e .  e) (* FIXME *))))))
    | "R_X86_64_PC64" =>            (F, (\ img .  (\ site_addr .  (\ rr .  (( 8:num), (\ s .  \ a .  \ e .  e) (* FIXME *))))))
    | "R_X86_64_GOTOFF64" =>        (F, (\ img .  (\ site_addr .  (\ rr .  (( 8:num), (\ s .  \ a .  \ e .  e) (* FIXME *))))))
    | "R_X86_64_GOTPC32" =>         (F, (\ img .  (\ site_addr .  (\ rr .  (( 4:num), (\ s .  \ a .  \ e .  e) (* FIXME *))))))
    | "R_X86_64_SIZE32" =>          (F, (\ img .  (\ site_addr .  (\ rr .  (( 4:num), (\ s .  \ a .  \ e .  e) (* FIXME *))))))
    | "R_X86_64_SIZE64" =>          (F, (\ img .  (\ site_addr .  (\ rr .  (( 8:num), (\ s .  \ a .  \ e .  e) (* FIXME *))))))
    | "R_X86_64_GOTPC32_TLSDESC" => (F, (\ img .  (\ site_addr .  (\ rr .  (( 4:num) (* CHECK *), (\ s .  \ a .  \ e .  e) (* FIXME *))))))
    | "R_X86_64_TLSDESC_CALL" =>    (F, (\ img .  (\ site_addr .  (\ rr .  (( 4:num) (* CHECK *), (\ s .  \ a .  \ e .  e) (* FIXME *))))))
    | "R_X86_64_TLSDESC" =>         (F, (\ img .  (\ site_addr .  (\ rr .  (( 8:num) (* CHECK *), (\ s .  \ a .  \ e .  e) (* FIXME *))))))
    | "R_X86_64_IRELATIVE" =>       (T,  (\ img .  (\ site_addr .  (\ rr .  (( 8:num) (* CHECK *), (\ s .  \ a .  \ e .  e) (* FIXME *))))))
    | _ => failwith "unrecognised relocation"
)))`;


(*val sysv_amd64_std_abi : abi any_abi_feature*)
val _ = Define `
 (sysv_amd64_std_abi=   
  (<| is_valid_elf_header := header_is_amd64
    ; make_elf_header := (make_elf64_header elf_data_2lsb elf_osabi_none(( 0:num)) elf_ma_x86_64)
    ; reloc := amd64_reloc
    ; section_is_special := section_is_special0
    ; section_is_large := (\ s .  (\ f .  flag_is_set shf_x86_64_large s.elf64_section_flags))
    ; maxpagesize :=(( 65536:num))
    ; minpagesize :=(( 4096:num))
    ; commonpagesize :=(( 4096:num))
      (* XXX: DPM, changed from explicit reference to null_abi field due to problems in HOL4. *)
    ; symbol_is_generated_by_linker := (\ symname .  symname = "_GLOBAL_OFFSET_TABLE_")
    ; make_phdrs := make_default_phdrs
    ; max_phnum :=(( 2:num)) (* incremented by extensions *)
    ; guess_entry_point := 
  (find_start_symbol_address
     instance_Basic_classes_Ord_Abis_any_abi_feature_dict
     instance_Abi_classes_AbiFeatureTagEquiv_Abis_any_abi_feature_dict)
    ; pad_data := pad_zeroes
    ; pad_code := pad_0x90
    ; generate_support := amd64_generate_support
    ; concretise_support := amd64_concretise_support
    ; get_reloc_symaddr := amd64_get_reloc_symaddr
    |>))`;


(*val sysv_aarch64_le_std_abi : abi any_abi_feature*)
val _ = Define `
 (sysv_aarch64_le_std_abi=   
  (<| is_valid_elf_header := header_is_aarch64_le
    ; make_elf_header := (make_elf64_header elf_data_2lsb elf_osabi_none(( 0:num)) elf_ma_aarch64)
    ; reloc := aarch64_le_reloc
    ; section_is_special := section_is_special0
    ; section_is_large := (\e .  
  (case (e ) of ( _ ) => (\a .  (case (a ) of ( _ ) => F )) ))
    ; maxpagesize :=((( 2:num) *( 256:num)) *( 4096:num)) (* 2MB; bit of a guess, based on gdb and prelink code *)
    ; minpagesize :=(( 1024:num)) (* bit of a guess again *)
    ; commonpagesize :=(( 4096:num))
    ; symbol_is_generated_by_linker := (\ symname .  symname = "_GLOBAL_OFFSET_TABLE_")
    ; make_phdrs := make_default_phdrs
    ; max_phnum :=(( 2:num)) (* incremented by extensions *)
    ; guess_entry_point := 
  (find_start_symbol_address
     instance_Basic_classes_Ord_Abis_any_abi_feature_dict
     instance_Abi_classes_AbiFeatureTagEquiv_Abis_any_abi_feature_dict)
    ; pad_data := pad_zeroes
    ; pad_code := pad_zeroes
    ; generate_support := 
  ( (* fun _ -> *) \l .  (case (l ) of ( _ ) => get_empty_memory_image ()  ))
    ; concretise_support := (\ img .  img)
    ; get_reloc_symaddr := 
  (default_get_reloc_symaddr
     instance_Basic_classes_Ord_Abis_any_abi_feature_dict
     instance_Abi_classes_AbiFeatureTagEquiv_Abis_any_abi_feature_dict)
    |>))`;


(*val all_abis : list (abi any_abi_feature)*)
val _ = Define `
 (all_abis=  ([sysv_amd64_std_abi; sysv_aarch64_le_std_abi; null_abi]))`;


val _ = export_theory()

