structure abi_power64Theory :> abi_power64Theory =
struct
  val _ = if !Globals.print_thy_loads then print "Loading abi_power64Theory ... " else ()
  open Type Term Thm
  infixr -->

  fun C s t ty = mk_thy_const{Name=s,Thy=t,Ty=ty}
  fun T s t A = mk_thy_type{Tyop=s, Thy=t,Args=A}
  fun V s q = mk_var(s,q)
  val U     = mk_vartype
  (*  Parents *)
  local open elf_fileTheory
  in end;
  val _ = Theory.link_parents
          ("abi_power64",
          Arbnum.fromString "1471355303",
          Arbnum.fromString "90722")
          [("elf_file",
           Arbnum.fromString "1471355276",
           Arbnum.fromString "813566")];
  val _ = Theory.incorporate_types "abi_power64" [];

  val idvector = 
    let fun ID(thy,oth) = {Thy = thy, Other = oth}
    in Vector.fromList
  [ID("min", "fun"), ID("error", "error"), ID("num", "num"),
   ID("fcp", "cart"), ID("min", "bool"), ID("list", "list"),
   ID("elf_interpreted_segment", "elf64_interpreted_segment"),
   ID("fcp", "bit0"), ID("one", "one"), ID("pair", "prod"),
   ID("byte_sequence", "byte_sequence"), ID("bool", "!"),
   ID("arithmetic", "+"), ID("arithmetic", "-"), ID("bool", "/\\"),
   ID("arithmetic", "<="), ID("min", "="), ID("arithmetic", "BIT1"),
   ID("arithmetic", "BIT2"), ID("string", "CHR"), ID("string", "char"),
   ID("list", "CONS"), ID("list", "FILTER"), ID("bool", "LET"),
   ID("list", "NIL"), ID("arithmetic", "NUMERAL"), ID("pair", "UNCURRY"),
   ID("arithmetic", "ZERO"),
   ID("abi_power64", "abi_power64_compute_program_entry_point"),
   ID("elf_interpreted_segment", "elf64_interpreted_segment_elf64_segment_base"),
   ID("elf_interpreted_segment", "elf64_interpreted_segment_elf64_segment_body"),
   ID("elf_interpreted_segment", "elf64_interpreted_segment_elf64_segment_memsz"),
   ID("error", "error_bind"), ID("error", "fail0"),
   ID("list", "list_CASE"), ID("byte_sequence", "offset_and_cut"),
   ID("pair", "pair_CASE"), ID("byte_sequence", "read_8_bytes_le"),
   ID("error", "return"), ID("elf_local", "uint64_of_oct"),
   ID("words", "w2n")]
  end;
  local open SharingTables
  in
  val tyvector = build_type_vector idvector
  [TYOP [2], TYOP [1, 0], TYV "'a", TYOP [4], TYOP [3, 3, 2],
   TYOP [0, 4, 1], TYOP [6], TYOP [5, 6], TYOP [0, 7, 5], TYOP [8],
   TYOP [7, 9], TYOP [7, 10], TYOP [7, 11], TYOP [3, 3, 12],
   TYOP [9, 13, 13], TYOP [9, 13, 14], TYOP [9, 13, 15], TYOP [9, 13, 16],
   TYOP [9, 13, 17], TYOP [9, 13, 18], TYOP [9, 13, 19], TYOP [10],
   TYOP [9, 20, 21], TYOP [0, 4, 3], TYOP [0, 23, 3], TYOP [0, 7, 3],
   TYOP [0, 25, 3], TYOP [0, 0, 0], TYOP [0, 0, 27], TYOP [0, 3, 3],
   TYOP [0, 3, 29], TYOP [0, 0, 3], TYOP [0, 0, 31], TYOP [0, 1, 3],
   TYOP [0, 1, 33], TYOP [20], TYOP [0, 0, 35], TYOP [5, 35],
   TYOP [0, 37, 37], TYOP [0, 35, 38], TYOP [0, 7, 7], TYOP [0, 6, 3],
   TYOP [0, 41, 40], TYOP [0, 7, 1], TYOP [0, 43, 43], TYOP [0, 31, 31],
   TYOP [0, 0, 1], TYOP [0, 46, 46], TYOP [0, 20, 1], TYOP [0, 48, 48],
   TYOP [0, 14, 1], TYOP [0, 13, 1], TYOP [0, 13, 51], TYOP [0, 52, 50],
   TYOP [0, 15, 1], TYOP [0, 13, 50], TYOP [0, 55, 54], TYOP [0, 16, 1],
   TYOP [0, 13, 54], TYOP [0, 58, 57], TYOP [0, 17, 1], TYOP [0, 13, 57],
   TYOP [0, 61, 60], TYOP [0, 18, 1], TYOP [0, 13, 60], TYOP [0, 64, 63],
   TYOP [0, 19, 1], TYOP [0, 13, 63], TYOP [0, 67, 66], TYOP [0, 13, 66],
   TYOP [0, 69, 48], TYOP [0, 6, 0], TYOP [0, 6, 21], TYOP [0, 21, 1],
   TYOP [0, 73, 1], TYOP [1, 21], TYOP [0, 75, 74], TYOP [0, 22, 1],
   TYOP [0, 77, 1], TYOP [1, 22], TYOP [0, 79, 78], TYOP [0, 37, 1],
   TYOP [0, 6, 43], TYOP [0, 82, 1], TYOP [0, 1, 83], TYOP [0, 7, 84],
   TYOP [0, 21, 75], TYOP [0, 0, 86], TYOP [0, 0, 87], TYOP [0, 20, 73],
   TYOP [0, 89, 1], TYOP [0, 22, 90], TYOP [0, 21, 79], TYOP [7, 12],
   TYOP [7, 93], TYOP [7, 94], TYOP [3, 3, 95], TYOP [0, 13, 96],
   TYOP [0, 13, 97], TYOP [0, 13, 98], TYOP [0, 13, 99], TYOP [0, 13, 100],
   TYOP [0, 13, 101], TYOP [0, 13, 102], TYOP [0, 13, 103], TYOP [0, 4, 0],
   TYOP [0, 96, 0]]
  end
  val _ = Theory.incorporate_consts "abi_power64" tyvector
     [("abi_power64_compute_program_entry_point", 8)];

  local open SharingTables
  in
  val tmvector = build_term_vector idvector tyvector
  [TMV("b1", 13), TMV("b2", 13), TMV("b3", 13), TMV("b4", 13),
   TMV("b5", 13), TMV("b6", 13), TMV("b7", 13), TMV("b8", 13),
   TMV("base", 0), TMV("bytes", 20), TMV("bytes'", 21), TMV("entry", 4),
   TMV("entry", 0), TMV("filtered", 7), TMV("p", 22), TMV("rebase", 0),
   TMV("seg", 6), TMV("segs", 7), TMV("size1", 0), TMV("v1", 21),
   TMV("v3", 7), TMV("v6", 6), TMV("v7", 7), TMV("x", 6), TMC(11, 24),
   TMC(11, 26), TMC(12, 28), TMC(13, 28), TMC(14, 30), TMC(15, 32),
   TMC(16, 34), TMC(17, 27), TMC(18, 27), TMC(19, 36), TMC(21, 39),
   TMC(22, 42), TMC(23, 44), TMC(23, 45), TMC(23, 47), TMC(23, 49),
   TMC(24, 37), TMC(25, 27), TMC(26, 53), TMC(26, 56), TMC(26, 59),
   TMC(26, 62), TMC(26, 65), TMC(26, 68), TMC(26, 70), TMC(27, 0),
   TMC(28, 8), TMC(29, 71), TMC(30, 72), TMC(31, 71), TMC(32, 76),
   TMC(32, 80), TMC(33, 81), TMC(34, 85), TMC(35, 88), TMC(36, 91),
   TMC(37, 92), TMC(38, 46), TMC(39, 104), TMC(40, 105), TMC(40, 106)]
  end
  local
  val DT = Thm.disk_thm val read = Term.read_raw tmvector
  in
  fun op abi_power64_compute_program_entry_point_def x = x
    val op abi_power64_compute_program_entry_point_def =
    DT(((("abi_power64",0),[]),[]),
       [read||@|@|@|@|@|@|@@$1@||@|@|@|||@||@|@%35%16%37%8%37%18%28%29$1@$3@@%29$3@%26$1@$0@@@|@%53$1@@|@%51$0@@|@$2@@|@%63$0@@@|@|@"])
  end
  val _ = DB.bindl "abi_power64"
  [("abi_power64_compute_program_entry_point_def",
    abi_power64_compute_program_entry_point_def,
    DB.Def)]

  local open GrammarSpecials Parse
    fun UTOFF f = Feedback.trace("Parse.unicode_trace_off_complaints",0)f
  in
  val _ = mk_local_grms [("elf_fileTheory.elf_file_grammars",
                          elf_fileTheory.elf_file_grammars)]
  val _ = List.app (update_grms reveal) []
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("abi_power64_compute_program_entry_point", (Term.prim_mk_const { Name = "abi_power64_compute_program_entry_point", Thy = "abi_power64"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("abi_power64_compute_program_entry_point", (Term.prim_mk_const { Name = "abi_power64_compute_program_entry_point", Thy = "abi_power64"}))
  val abi_power64_grammars = Parse.current_lgrms()
  end
  val _ = Theory.LoadableThyData.temp_encoded_update {
    thy = "abi_power64",
    thydataty = "compute",
    data = "abi_power64.abi_power64_compute_program_entry_point_def"
  }

val _ = if !Globals.print_thy_loads then print "done\n" else ()
val _ = Theory.load_complete "abi_power64"
end
