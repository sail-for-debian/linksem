(*Generated by Lem from multimap.lem.*)
open HolKernel Parse boolLib bossLib;
open lem_numTheory lem_listTheory lem_setTheory lem_functionTheory lem_basic_classesTheory lem_boolTheory lem_maybeTheory lem_stringTheory lem_assert_extraTheory showTheory lem_set_extraTheory missing_pervasivesTheory multimapTheory;

val _ = numLib.prefer_num();



open lemLib;
(* val _ = lemLib.run_interactive := true; *)
val _ = new_theory "multimapAuxiliary"


(****************************************************)
(*                                                  *)
(* Assertions                                       *)
(*                                                  *)
(****************************************************)

val _ = lem_assertion "lowest_simple" ``findLowestKVWithKEquivTo 
  instance_Basic_classes_Ord_Num_natural_dict instance_Basic_classes_Ord_Num_natural_dict(( 4:num)) testEquiv 
({ (( 1:num),( 0:num)); (( 2:num),( 0:num)); (( 3:num),( 0:num)); (( 4:num),( 0:num)); (( 5:num),( 0:num)); (( 6:num),( 0:num)) } : (num # num) set) NONE = SOME (( 3:num),( 0:num))``;

val _ = lem_assertion "lowest_kv" ``findLowestKVWithKEquivTo 
  instance_Basic_classes_Ord_Num_natural_dict instance_Basic_classes_Ord_Num_natural_dict(( 4:num)) testEquiv 
({ (( 1:num),( 0:num)); (( 2:num),( 0:num)); (( 3:num),( 0:num)); (( 3:num),( 1:num)); (( 4:num),( 0:num)); (( 5:num),( 0:num)); (( 6:num),( 0:num)) } : (num # num) set) NONE = SOME (( 3:num),( 0:num))``;

val _ = lem_assertion "lowest_empty" ``findLowestKVWithKEquivTo 
  instance_Basic_classes_Ord_Num_natural_dict instance_Basic_classes_Ord_Num_natural_dict(( 4:num)) testEquiv
({} : (num # num) set) NONE = NONE``;

val _ = lem_assertion "lowest_onepast" ``findLowestKVWithKEquivTo 
  instance_Basic_classes_Ord_Num_natural_dict instance_Basic_classes_Ord_Num_natural_dict(( 4:num)) testEquiv
({ (( 6:num),( 0:num)) } : (num # num) set) NONE = NONE``;

val _ = lem_assertion "lowest_oneprev" ``findLowestKVWithKEquivTo 
  instance_Basic_classes_Ord_Num_natural_dict instance_Basic_classes_Ord_Num_natural_dict(( 4:num)) testEquiv 
({ (( 2:num),( 0:num)) } : (num # num) set) NONE = NONE``;

val _ = lem_assertion "highest_simple" ``findHighestKVWithKEquivTo 
  instance_Basic_classes_Ord_Num_natural_dict instance_Basic_classes_Ord_Num_natural_dict(( 4:num)) testEquiv
({ (( 1:num),( 0:num)); (( 2:num),( 0:num)); (( 3:num),( 0:num)); (( 4:num),( 0:num)); (( 5:num),( 0:num)); (( 6:num),( 0:num)) } : (num # num) set) NONE = SOME (( 5:num),( 0:num))``;

val _ = lem_assertion "highest_kv" ``findHighestKVWithKEquivTo 
  instance_Basic_classes_Ord_Num_natural_dict instance_Basic_classes_Ord_Num_natural_dict(( 4:num)) testEquiv
({ (( 1:num),( 0:num)); (( 2:num),( 0:num)); (( 3:num),( 0:num)); (( 4:num),( 0:num)); (( 5:num),( 0:num)); (( 5:num),( 1:num)); (( 6:num),( 0:num)) } : (num # num) set) NONE = SOME (( 5:num),( 1:num))``;

val _ = lem_assertion "highest_empty" ``findHighestKVWithKEquivTo 
  instance_Basic_classes_Ord_Num_natural_dict instance_Basic_classes_Ord_Num_natural_dict(( 4:num)) testEquiv
({} : (num # num) set) NONE = NONE``;

val _ = lem_assertion "highest_onepast" ``findHighestKVWithKEquivTo 
  instance_Basic_classes_Ord_Num_natural_dict instance_Basic_classes_Ord_Num_natural_dict(( 4:num)) testEquiv 
({ (( 6:num),( 0:num)) } : (num # num) set) NONE = NONE``;

val _ = lem_assertion "highest_oneprev" ``findHighestKVWithKEquivTo 
  instance_Basic_classes_Ord_Num_natural_dict instance_Basic_classes_Ord_Num_natural_dict(( 4:num)) testEquiv
({ (( 2:num),( 0:num)) } : (num # num) set) NONE = NONE``;

val _ = lem_assertion "lookup_simple" ``lookupBy0 
  instance_Basic_classes_Ord_Num_natural_dict instance_Basic_classes_Ord_Num_natural_dict testEquiv(( 4:num)) ({ (( 1:num),( 0:num)); (( 2:num),( 0:num)); (( 3:num),( 0:num)); (( 4:num),( 0:num)); (( 5:num),( 0:num)); (( 6:num),( 0:num)) } : (num # num) set)
= ([(( 3:num),( 0:num)); (( 4:num),( 0:num)); (( 5:num),( 0:num))] : (num # num) list)``;

val _ = lem_assertion "lookup_kv" ``lookupBy0 
  instance_Basic_classes_Ord_Num_natural_dict instance_Basic_classes_Ord_Num_natural_dict testEquiv(( 4:num)) ({ (( 1:num),( 0:num)); (( 2:num),( 0:num)); (( 3:num),( 0:num)); (( 4:num),( 0:num)); (( 4:num),( 1:num)); (( 5:num),( 0:num)); (( 6:num),( 0:num)) } : (num # num) set)
= ([(( 3:num),( 0:num)); (( 4:num),( 0:num)); (( 4:num),( 1:num)); (( 5:num),( 0:num))] : (num # num) list)``;

val _ = lem_assertion "lookup_empty" ``lookupBy0 
  instance_Basic_classes_Ord_Num_natural_dict instance_Basic_classes_Ord_Num_natural_dict testEquiv(( 4:num)) ({} : (num # num) set) = ([]: (num # num) list)``;

val _ = lem_assertion "lookup_singleton" ``lookupBy0 
  instance_Basic_classes_Ord_Num_natural_dict instance_Basic_classes_Ord_Num_natural_dict testEquiv(( 4:num)) ({(( 5:num),( 0:num))} : (num # num) set) = ([(( 5:num),( 0:num))]: (num # num) list)``;

val _ = lem_assertion "lookup_onepast" ``lookupBy0 
  instance_Basic_classes_Ord_Num_natural_dict instance_Basic_classes_Ord_Num_natural_dict testEquiv(( 4:num)) ({ (( 6:num),( 0:num)) } : (num # num) set) = ([] : (num # num) list)``;

val _ = lem_assertion "lookup_oneprev" ``lookupBy0 
  instance_Basic_classes_Ord_Num_natural_dict instance_Basic_classes_Ord_Num_natural_dict testEquiv(( 4:num)) ({ (( 2:num),( 0:num)) } : (num # num) set) = ([] : (num # num) list)``;


(****************************************************)
(*                                                  *)
(* Termination Proofs                               *)
(*                                                  *)
(****************************************************)

(* val gst = Defn.tgoal_no_defn (findLowestKVWithKEquivTo_def, findLowestKVWithKEquivTo_ind) *)
val (findLowestKVWithKEquivTo_rw, findLowestKVWithKEquivTo_ind_rw) =
  Defn.tprove_no_defn ((findLowestKVWithKEquivTo_def, findLowestKVWithKEquivTo_ind),
    cheat (* the termination proof *)
  )
val findLowestKVWithKEquivTo_rw = save_thm ("findLowestKVWithKEquivTo_rw", findLowestKVWithKEquivTo_rw);
val findLowestKVWithKEquivTo_ind_rw = save_thm ("findLowestKVWithKEquivTo_ind_rw", findLowestKVWithKEquivTo_ind_rw);


(* val gst = Defn.tgoal_no_defn (findHighestKVWithKEquivTo_def, findHighestKVWithKEquivTo_ind) *)
val (findHighestKVWithKEquivTo_rw, findHighestKVWithKEquivTo_ind_rw) =
  Defn.tprove_no_defn ((findHighestKVWithKEquivTo_def, findHighestKVWithKEquivTo_ind),
    cheat (* the termination proof *)
  )
val findHighestKVWithKEquivTo_rw = save_thm ("findHighestKVWithKEquivTo_rw", findHighestKVWithKEquivTo_rw);
val findHighestKVWithKEquivTo_ind_rw = save_thm ("findHighestKVWithKEquivTo_ind_rw", findHighestKVWithKEquivTo_ind_rw);




val _ = export_theory()

