structure abi_power64_dynamicTheory :> abi_power64_dynamicTheory =
struct
  val _ = if !Globals.print_thy_loads then print "Loading abi_power64_dynamicTheory ... " else ()
  open Type Term Thm
  infixr -->

  fun C s t ty = mk_thy_const{Name=s,Thy=t,Ty=ty}
  fun T s t A = mk_thy_type{Tyop=s, Thy=t,Args=A}
  fun V s q = mk_var(s,q)
  val U     = mk_vartype
  (*  Parents *)
  local open elf_dynamicTheory
  in end;
  val _ = Theory.link_parents
          ("abi_power64_dynamic",
          Arbnum.fromString "1471355342",
          Arbnum.fromString "551115")
          [("elf_dynamic",
           Arbnum.fromString "1471355307",
           Arbnum.fromString "153517")];
  val _ = Theory.incorporate_types "abi_power64_dynamic" [];

  val idvector = 
    let fun ID(thy,oth) = {Thy = thy, Other = oth}
    in Vector.fromList
  [ID("min", "fun"), ID("list", "list"), ID("string", "char"),
   ID("num", "num"), ID("error", "error"),
   ID("elf_dynamic", "tag_correspondence"), ID("elf_dynamic", "dyn_value"),
   ID("fcp", "cart"), ID("fcp", "bit0"), ID("one", "one"),
   ID("min", "bool"), ID("elf_dynamic", "elf64_dyn"),
   ID("byte_sequence", "byte_sequence"), ID("bool", "!"),
   ID("arithmetic", "*"), ID("min", "="), ID("integer", "ABS"),
   ID("integer", "int"), ID("elf_dynamic", "Address"),
   ID("arithmetic", "BIT1"), ID("arithmetic", "BIT2"), ID("string", "CHR"),
   ID("bool", "COND"), ID("list", "CONS"), ID("elf_dynamic", "C_Ptr"),
   ID("bool", "LET"), ID("list", "NIL"), ID("arithmetic", "NUMERAL"),
   ID("integer", "Num"), ID("arithmetic", "ZERO"),
   ID("abi_power64_dynamic", "abi_power64_dt_ppcgot"),
   ID("abi_power64_dynamic", "abi_power64_elf64_value_of_elf64_dyn"),
   ID("abi_power64_dynamic", "abi_power64_tag_correspondence_of_tag"),
   ID("elf_dynamic", "dyn_union_CASE"), ID("elf_dynamic", "dyn_union"),
   ID("elf_dynamic", "elf64_dyn_elf64_dyn_d_un"),
   ID("elf_dynamic", "elf64_dyn_elf64_dyn_tag"), ID("error", "error_bind"),
   ID("error", "fail0"), ID("error", "return"),
   ID("abi_power64_dynamic", "string_of_abi_power64_dynamic_tag"),
   ID("integer_word", "w2i")]
  end;
  local open SharingTables
  in
  val tyvector = build_type_vector idvector
  [TYOP [2], TYOP [1, 0], TYOP [3], TYOP [0, 2, 1], TYOP [5], TYOP [4, 4],
   TYOP [0, 2, 5], TYV "'a", TYOP [9], TYOP [8, 8], TYOP [8, 9],
   TYOP [8, 10], TYOP [8, 11], TYOP [8, 12], TYOP [8, 13], TYOP [10],
   TYOP [7, 15, 14], TYOP [6, 16, 7], TYOP [4, 17], TYV "'b",
   TYOP [0, 19, 18], TYOP [11], TYOP [0, 21, 20], TYOP [12],
   TYOP [0, 19, 15], TYOP [0, 24, 15], TYOP [0, 21, 15], TYOP [0, 26, 15],
   TYOP [0, 2, 15], TYOP [0, 28, 15], TYOP [0, 2, 2], TYOP [0, 2, 30],
   TYOP [0, 18, 15], TYOP [0, 18, 32], TYOP [0, 5, 15], TYOP [0, 5, 34],
   TYOP [0, 1, 15], TYOP [0, 1, 36], TYOP [0, 2, 28], TYOP [17],
   TYOP [0, 39, 39], TYOP [0, 16, 17], TYOP [0, 2, 0], TYOP [0, 18, 18],
   TYOP [0, 18, 43], TYOP [0, 15, 44], TYOP [0, 5, 5], TYOP [0, 5, 46],
   TYOP [0, 15, 47], TYOP [0, 1, 1], TYOP [0, 1, 49], TYOP [0, 15, 50],
   TYOP [0, 0, 49], TYOP [0, 2, 18], TYOP [0, 53, 53], TYOP [0, 39, 2],
   TYOP [4, 16], TYOP [0, 23, 56], TYOP [0, 57, 56], TYOP [0, 16, 56],
   TYOP [0, 59, 58], TYOP [0, 59, 60], TYOP [34, 16, 16], TYOP [0, 62, 61],
   TYOP [0, 21, 62], TYOP [0, 21, 16], TYOP [0, 16, 18], TYOP [0, 66, 18],
   TYOP [0, 56, 67], TYOP [0, 1, 56], TYOP [0, 1, 18], TYOP [0, 1, 5],
   TYOP [0, 17, 18], TYOP [0, 4, 5], TYOP [0, 16, 39]]
  end
  val _ = Theory.incorporate_consts "abi_power64_dynamic" tyvector
     [("string_of_abi_power64_dynamic_tag", 3),
      ("abi_power64_tag_correspondence_of_tag", 6),
      ("abi_power64_elf64_value_of_elf64_dyn", 22),
      ("abi_power64_dt_ppcgot", 2)];

  local open SharingTables
  in
  val tmvector = build_term_vector idvector tyvector
  [TMV("addr", 16), TMV("dyn", 21), TMV("i", 23), TMV("m", 2),
   TMV("p", 16), TMV("stbl", 19), TMV("tag", 2), TMV("v", 16), TMC(13, 25),
   TMC(13, 27), TMC(13, 29), TMC(14, 31), TMC(15, 33), TMC(15, 35),
   TMC(15, 37), TMC(15, 38), TMC(16, 40), TMC(18, 41), TMC(19, 30),
   TMC(20, 30), TMC(21, 42), TMC(22, 45), TMC(22, 48), TMC(22, 51),
   TMC(23, 52), TMC(24, 4), TMC(25, 54), TMC(26, 1), TMC(27, 30),
   TMC(28, 55), TMC(29, 2), TMC(30, 2), TMC(31, 22), TMC(32, 6),
   TMC(33, 63), TMC(35, 64), TMC(36, 65), TMC(37, 68), TMC(38, 69),
   TMC(38, 70), TMC(38, 71), TMC(39, 59), TMC(39, 72), TMC(39, 73),
   TMC(40, 3), TMC(41, 74)]
  end
  local
  val DT = Thm.disk_thm val read = Term.read_raw tmvector
  in
  fun op abi_power64_dt_ppcgot_def x = x
    val op abi_power64_dt_ppcgot_def =
    DT(((("abi_power64_dynamic",0),[]),[]),
       [read"%15%31@%11%28%19%18%18%18%18%18%18%18%18%18%18%18%18%18%18%18%18%18%18%18%18%18%18%18%18%18%18%19%19%30@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%28%19%30@@@@"])
  fun op string_of_abi_power64_dynamic_tag_def x = x
    val op string_of_abi_power64_dynamic_tag_def =
    DT(((("abi_power64_dynamic",1),[]),[]),
       [read"%10%3%14%44$0@@%23%15$0@%31@@%24%20%28%19%18%18%18%19%18%30@@@@@@@@@%24%20%28%19%18%18%18%19%18%30@@@@@@@@@%24%20%28%18%18%19%18%18%18%30@@@@@@@@@%24%20%28%19%19%19%18%19%30@@@@@@@@%24%20%28%19%18%19%18%19%30@@@@@@@@%24%20%28%18%18%18%18%18%19%30@@@@@@@@@%24%20%28%18%18%18%19%18%18%30@@@@@@@@@%24%20%28%19%18%19%19%18%18%30@@@@@@@@@%24%20%28%18%19%18%19%18%18%30@@@@@@@@@%24%20%28%19%19%19%19%18%18%30@@@@@@@@@%24%20%28%18%18%19%19%18%18%30@@@@@@@@@%27@@@@@@@@@@@@%24%20%28%18%19%18%19%18%18%30@@@@@@@@@%24%20%28%19%19%19%19%18%19%30@@@@@@@@@%24%20%28%19%19%19%18%19%19%30@@@@@@@@@%24%20%28%18%19%18%18%18%19%30@@@@@@@@@%24%20%28%19%18%19%19%18%19%30@@@@@@@@@%24%20%28%18%19%18%19%18%19%30@@@@@@@@@%24%20%28%19%18%19%18%18%19%30@@@@@@@@@%24%20%28%19%18%18%18%18%30@@@@@@@@%24%20%28%19%18%18%18%19%18%30@@@@@@@@@%24%20%28%18%18%18%18%19%19%30@@@@@@@@@%24%20%28%18%18%18%19%19%19%30@@@@@@@@@%24%20%28%18%19%19%18%18%19%30@@@@@@@@@%24%20%28%19%19%18%18%19%19%30@@@@@@@@@%24%20%28%19%19%19%18%19%30@@@@@@@@%24%20%28%19%18%19%18%19%30@@@@@@@@%24%20%28%19%18%18%18%18%30@@@@@@@@%24%20%28%19%18%19%18%18%19%30@@@@@@@@@%24%20%28%18%19%18%19%19%19%30@@@@@@@@@%24%20%28%19%19%19%19%18%19%30@@@@@@@@@%24%20%28%18%19%18%18%18%19%30@@@@@@@@@%24%20%28%18%19%19%19%18%19%30@@@@@@@@@%24%20%28%18%19%18%19%18%19%30@@@@@@@@@%24%20%28%18%18%19%18%18%19%30@@@@@@@@@%24%20%28%19%18%18%18%18%30@@@@@@@@%24%20%28%19%18%19%18%19%19%30@@@@@@@@@%24%20%28%18%19%18%18%18%19%30@@@@@@@@@%24%20%28%18%18%18%19%18%19%30@@@@@@@@@%27@@@@@@@@@@@@@@@@@@@@@@@@@@@@@|@"])
  fun op abi_power64_tag_correspondence_of_tag_def x = x
    val op abi_power64_tag_correspondence_of_tag_def =
    DT(((("abi_power64_dynamic",2),[]),[]),
       [read|@"])
  fun op abi_power64_elf64_value_of_elf64_dyn_def x = x
    val op abi_power64_elf64_value_of_elf64_dyn_def =
    DT(((("abi_power64_dynamic",3),[]),[]),
       [read|@%4%41$0@||@@%0%42%17$0@@||@%29%16%45%36$1@@@@@@|@|@"])
  end
  val _ = DB.bindl "abi_power64_dynamic"
  [("abi_power64_dt_ppcgot_def",abi_power64_dt_ppcgot_def,DB.Def),
   ("string_of_abi_power64_dynamic_tag_def",
    string_of_abi_power64_dynamic_tag_def,
    DB.Def),
   ("abi_power64_tag_correspondence_of_tag_def",
    abi_power64_tag_correspondence_of_tag_def,
    DB.Def),
   ("abi_power64_elf64_value_of_elf64_dyn_def",
    abi_power64_elf64_value_of_elf64_dyn_def,
    DB.Def)]

  local open GrammarSpecials Parse
    fun UTOFF f = Feedback.trace("Parse.unicode_trace_off_complaints",0)f
  in
  val _ = mk_local_grms [("elf_dynamicTheory.elf_dynamic_grammars",
                          elf_dynamicTheory.elf_dynamic_grammars)]
  val _ = List.app (update_grms reveal) []
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("abi_power64_dt_ppcgot", (Term.prim_mk_const { Name = "abi_power64_dt_ppcgot", Thy = "abi_power64_dynamic"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("abi_power64_dt_ppcgot", (Term.prim_mk_const { Name = "abi_power64_dt_ppcgot", Thy = "abi_power64_dynamic"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("string_of_abi_power64_dynamic_tag", (Term.prim_mk_const { Name = "string_of_abi_power64_dynamic_tag", Thy = "abi_power64_dynamic"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("string_of_abi_power64_dynamic_tag", (Term.prim_mk_const { Name = "string_of_abi_power64_dynamic_tag", Thy = "abi_power64_dynamic"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("abi_power64_tag_correspondence_of_tag", (Term.prim_mk_const { Name = "abi_power64_tag_correspondence_of_tag", Thy = "abi_power64_dynamic"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("abi_power64_tag_correspondence_of_tag", (Term.prim_mk_const { Name = "abi_power64_tag_correspondence_of_tag", Thy = "abi_power64_dynamic"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("abi_power64_elf64_value_of_elf64_dyn", (Term.prim_mk_const { Name = "abi_power64_elf64_value_of_elf64_dyn", Thy = "abi_power64_dynamic"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("abi_power64_elf64_value_of_elf64_dyn", (Term.prim_mk_const { Name = "abi_power64_elf64_value_of_elf64_dyn", Thy = "abi_power64_dynamic"}))
  val abi_power64_dynamic_grammars = Parse.current_lgrms()
  end
  val _ = Theory.LoadableThyData.temp_encoded_update {
    thy = "abi_power64_dynamic",
    thydataty = "compute",
    data =
        "abi_power64_dynamic.abi_power64_dt_ppcgot_def abi_power64_dynamic.abi_power64_elf64_value_of_elf64_dyn_def abi_power64_dynamic.abi_power64_tag_correspondence_of_tag_def abi_power64_dynamic.string_of_abi_power64_dynamic_tag_def"
  }

val _ = if !Globals.print_thy_loads then print "done\n" else ()
val _ = Theory.load_complete "abi_power64_dynamic"
end
