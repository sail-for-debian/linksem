(*Generated by Lem from abis/power64/abi_power64_dynamic.lem.*)
open HolKernel Parse boolLib bossLib;
open lem_numTheory lem_basic_classesTheory lem_stringTheory showTheory errorTheory elf_types_native_uintTheory string_tableTheory elf_dynamicTheory;

val _ = numLib.prefer_num();



val _ = new_theory "abi_power64_dynamic"

(*open import Basic_classes*)
(*open import Num*)
(*open import String*)

(*open import Error*)
(*open import Show*)
(*open import String_table*)

(*open import Elf_dynamic*)
(*open import Elf_types_native_uint*)

val _ = Define `
 (abi_power64_dt_ppcgot : num=  (( 939524096:num) *( 2:num)))`;
 (* 0x70000000 *)

(*val string_of_abi_power64_dynamic_tag : natural -> string*)
val _ = Define `
 (string_of_abi_power64_dynamic_tag m=  
 (if m = abi_power64_dt_ppcgot then
    "PPC64_GLINK"
  else
    "Invalid Power64 dynamic tag"))`;


(*val abi_power64_tag_correspondence_of_tag : natural -> error tag_correspondence*)
val _ = Define `
 (abi_power64_tag_correspondence_of_tag m=  
 (if m = abi_power64_dt_ppcgot then
    return C_Ptr
  else
    fail0 ("abi_power64_tag_correspondence_of_tag: invalid Power64 dynamic tag")))`;

    
(*val abi_power64_elf64_value_of_elf64_dyn : elf64_dyn -> string_table -> error elf64_dyn_value*)
val _ = Define `
 (abi_power64_elf64_value_of_elf64_dyn dyn stbl=  
 (let tag = (Num (ABS (w2i dyn.elf64_dyn_tag))) in
    if tag = abi_power64_dt_ppcgot then
      (case dyn.elf64_dyn_d_un of
          D_Val     v => fail0 "abi_power64_elf64_value_of_elf64_dyn: PPC_GOT must be a PTR"
        | D_Ptr     p => return p
        | D_Ignored i => fail0 "abi_power64_elf64_value_of_elf64_dyn: PPC_GOT must be a PTR"
      ) >>= (\ addr . 
      return (Address addr))
    else
      fail0 ("abi_power64_elf64_value_of_elf64_dyn: invalid Power64 dynamic tag")))`;

val _ = export_theory()

