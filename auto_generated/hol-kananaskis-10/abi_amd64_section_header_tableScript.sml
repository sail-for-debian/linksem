(*Generated by Lem from abis/amd64/abi_amd64_section_header_table.lem.*)
open HolKernel Parse boolLib bossLib;
open lem_numTheory lem_basic_classesTheory lem_mapTheory elf_section_header_tableTheory;

val _ = numLib.prefer_num();



val _ = new_theory "abi_amd64_section_header_table"

(** [abi_amd64_section_header_table] module contains section header table
  * specific definitions for the AMD64 ABI.
  *)

(*open import Basic_classes*)
(*open import Map*)
(*open import Num*)

(*open import Elf_section_header_table*)

(** AMD64 specific flags.  See Section 4.2.1. *)

val _ = Define `
 (shf_abi_amd64_large : num= (( 67108864:num) *( 4:num)))`;
 (* 0x10000000 *)

(** AMD64 specific section types.  See Section 4.2.2 *)

val _ = Define `
 (sht_abi_amd64_unwind : num=  ((( 939524096:num) *( 2:num)) +( 1:num)))`;
 (* 0x70000001 *)

(** [string_of_abi_amd64_section_type m] produces a string based representation
  * of AMD64 section type [m].
  *)
(*val string_of_abi_amd64_section_type : natural -> string*)
    
(** Special sections *)

(*val abi_amd64_special_sections : Map.map string (natural * natural)*)
val _ = Define `
 (abi_amg64_special_sections=  
 (FUPDATE_LIST FEMPTY [
    (".got", (sht_progbits, (shf_alloc + shf_write)))
  ; (".plt", (sht_progbits, (shf_alloc + shf_execinstr)))
  ; (".eh_frame", (sht_abi_amd64_unwind, shf_alloc))
  ]))`;

  
(*val abi_amd64_special_sections_large_code_model : Map.map string (natural * natural)*)
val _ = Define `
 (abi_amd64_special_sections_large_code_model=  
 (FUPDATE_LIST FEMPTY [
    (".lbss", (sht_nobits, ((shf_alloc + shf_write) + shf_abi_amd64_large)))
  ; (".ldata", (sht_progbits, ((shf_alloc + shf_write) + shf_abi_amd64_large)))
  ; (".ldata1", (sht_progbits, ((shf_alloc + shf_write) + shf_abi_amd64_large)))
  ; (".lgot", (sht_progbits, ((shf_alloc + shf_write) + shf_abi_amd64_large)))
  ; (".lplt", (sht_progbits, ((shf_alloc + shf_execinstr) + shf_abi_amd64_large)))
  ; (".lrodata", (sht_progbits, (shf_alloc + shf_abi_amd64_large)))
  ; (".lrodata1", (sht_progbits, (shf_alloc + shf_abi_amd64_large)))
  ; (".ltext", (sht_progbits, ((shf_alloc + shf_execinstr) + shf_abi_amd64_large)))
  ]))`;

val _ = export_theory()

