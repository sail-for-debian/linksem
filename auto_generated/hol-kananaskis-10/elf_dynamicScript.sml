(*Generated by Lem from elf_dynamic.lem.*)
open HolKernel Parse boolLib bossLib;
open lem_numTheory lem_listTheory lem_basic_classesTheory lem_boolTheory lem_stringTheory showTheory errorTheory byte_sequenceTheory endiannessTheory elf_types_native_uintTheory elf_headerTheory string_tableTheory elf_program_header_tableTheory elf_section_header_tableTheory elf_fileTheory elf_relocationTheory;

val _ = numLib.prefer_num();



val _ = new_theory "elf_dynamic"

(** [elf_dynamic] module exports types and definitions relating to the dynamic
  * section and dynamic linking functionality of an ELF file.
  *)

(*open import Basic_classes*)
(*open import Bool*)
(*open import List*)
(*open import Num*)
(*open import String*)

(*open import Byte_sequence*)
(*open import Endianness*)
(*open import Error*)
(*open import Show*)
(*open import String_table*)

(*open import Elf_file*)
(*open import Elf_header*)
(*open import Elf_relocation*)
(*open import Elf_section_header_table*)
(*open import Elf_program_header_table*)
(*open import Elf_types_native_uint*)

(** Validity checks *)

(** [is_elf32_valid_program_header_table_for_dynamic_linking pht] checks whether
  * a program header table [pht] is a valid program header table for an ELF file
  * that will be potentially dynamically linked.  Returns true if there is exactly
  * one segment header of type [elf_pt_interp], i.e. contains a string pointing
  * to the requested dynamic interpreter.
  *)
(*val is_elf32_valid_program_header_table_for_dynamic_linking : elf32_program_header_table ->
  bool*)
val _ = Define `
 (is_elf32_valid_program_header_table_for_dynamic_linking pht=  
 (LENGTH (FILTER (\ x .  w2n x.elf32_p_type = elf_pt_interp) pht) =( 1 : num)))`;

  
(** [is_elf64_valid_program_header_table_for_dynamic_linking pht] checks whether
  * a program header table [pht] is a valid program header table for an ELF file
  * that will be potentially dynamically linked.  Returns true if there is exactly
  * one segment header of type [elf_pt_interp], i.e. contains a string pointing
  * to the requested dynamic interpreter.
  *)
(*val is_elf64_valid_program_header_table_for_dynamic_linking : elf64_program_header_table ->
  bool*)
val _ = Define `
 (is_elf64_valid_program_header_table_for_dynamic_linking pht=  
 (LENGTH (FILTER (\ x .  w2n x.elf64_p_type = elf_pt_interp) pht) =( 1 : num)))`;


(** Dynamic section entry *)

(** [dyn_union] represents the C-union type used in the definition of [elf32_dyn]
  * and [elf64_dyn] types below.  Some section tags correspond to entries where
  * the fields are either unspecified or ignored, hence the presence of the
  * [D_Ignored] constructor.
  *)
val _ = Hol_datatype `
 dyn_union
  = D_Val of 'a
  | D_Ptr of 'b
  | D_Ignored of byte_sequence`;

  
(** [elf32_dyn] captures the notion of an ELF32 dynamic section entry.
  * Specialises the [dyn_union] type above to using [elf32_word] values and
  * [elf32_addr] pointers.
  *)
val _ = Hol_datatype `
 elf32_dyn =
  <| elf32_dyn_tag  : sint32                     (** The type of the entry. *)
   ; elf32_dyn_d_un : (uint32, uint32) dyn_union (** The value of the entry, stored as a union. *)
   |>`;

   
(** [elf64_dyn] captures the notion of an ELF32 dynamic section entry.
  * Specialises the [dyn_union] type above to using [elf64_xword] values and
  * [elf64_addr] pointers.
  *)
val _ = Hol_datatype `
 elf64_dyn =
  <| elf64_dyn_tag  : sint64                     (** The type of the entry. *)
   ; elf64_dyn_d_un : (uint64, uint64) dyn_union (** The value of the entry, stored as a union. *)
   |>`;


(** Dynamic section tags *)

(** [dt_null] marks the end of the dynamic array *)
val _ = Define `
 (dt_null : num= (( 0:num)))`;

(** [dt_needed] holds the string table offset of a string containing the name of
  * a needed library.
  *)
val _ = Define `
 (dt_needed : num= (( 1:num)))`;

(** [dt_pltrelsz] holds the size in bytes of relocation entries associated with
  * the PLT.
  *)
val _ = Define `
 (dt_pltrelsz : num= (( 2:num)))`;

(** [dt_pltgot] holds an address associated with the PLT or GOT. *)
val _ = Define `
 (dt_pltgot : num= (( 3:num)))`;

(** [dt_hash] holds the address of a symbol-table hash. *)
val _ = Define `
 (dt_hash : num= (( 4:num)))`;

(** [dt_strtab] holds the address of the string table. *)
val _ = Define `
 (dt_strtab : num= (( 5:num)))`;

(** [dt_symtab] holds the address of a symbol table. *)
val _ = Define `
 (dt_symtab : num= (( 6:num)))`;

(** [dt_rela] holds the address of a relocation table. *)
val _ = Define `
 (dt_rela : num= (( 7:num)))`;

(** [dt_relasz] holds the size in bytes of the relocation table. *)
val _ = Define `
 (dt_relasz : num= (( 8:num)))`;

(** [dt_relaent] holds the size in bytes of a relocation table entry. *)
val _ = Define `
 (dt_relaent : num= (( 9:num)))`;

(** [dt_strsz] holds the size in bytes of the string table. *)
val _ = Define `
 (dt_strsz : num= (( 10:num)))`;

(** [dt_syment] holds the size in bytes of a symbol table entry. *)
val _ = Define `
 (dt_syment : num= (( 11:num)))`;

(** [dt_init] holds the address of the initialisation function. *)
val _ = Define `
 (dt_init : num= (( 12:num)))`;

(** [dt_fini] holds the address of the finalisation function. *)
val _ = Define `
 (dt_fini : num= (( 13:num)))`;

(** [dt_soname] holds the string table offset of a string containing the shared-
  * object name.
  *)
val _ = Define `
 (dt_soname : num= (( 14:num)))`;

(** [dt_rpath] holds the string table offset of a string containing the library
  * search path.
  *)
val _ = Define `
 (dt_rpath : num= (( 15:num)))`;

(** [dt_symbolic] alters the linker's symbol resolution algorithm so that names
  * are resolved first from the shared object file itself, rather than the
  * executable file.
  *)
val _ = Define `
 (dt_symbolic : num= (( 16:num)))`;

(** [dt_rel] is similar to [dt_rela] except its table has implicit addends. *)
val _ = Define `
 (dt_rel : num= (( 17:num)))`;

(** [dt_relsz] holds the size in bytes of the [dt_rel] relocation table. *)
val _ = Define `
 (dt_relsz : num= (( 18:num)))`;

(** [dt_relent] holds the size in bytes of a [dt_rel] relocation entry. *)
val _ = Define `
 (dt_relent : num= (( 19:num)))`;

(** [dt_pltrel] specifies the type of relocation entry to which the PLT refers. *)
val _ = Define `
 (dt_pltrel : num= (( 20:num)))`;

(** [dt_debug] is used for debugging and its purpose is not specified in the ABI.
  * Programs using this entry are not ABI-conformant.
  *)
val _ = Define `
 (dt_debug : num= (( 21:num)))`;

(** [dt_textrel] absence of this entry indicates that no relocation entry should
  * cause a modification to a non-writable segment.  Otherwise, if present, one
  * or more relocation entries may request modifications to a non-writable
  * segment.
  *)
val _ = Define `
 (dt_textrel : num= (( 22:num)))`;

(** [dt_jmprel]'s member holds the address of relocation entries associated with
  * the PLT.
  *)
val _ = Define `
 (dt_jmprel : num= (( 23:num)))`;

(** [dt_bindnow] instructs the linker to process all relocations for the object
  * containing the entry before transferring control to the program.
  *)
val _ = Define `
 (dt_bindnow : num= (( 24:num)))`;

(** [dt_init_array] holds the address to the array of pointers to initialisation
  * functions.
  *)
val _ = Define `
 (dt_init_array : num= (( 25:num)))`;

(** [dt_fini_array] holds the address to the array of pointers to finalisation
  * functions.
  *)
val _ = Define `
 (dt_fini_array : num= (( 26:num)))`;

(** [dt_init_arraysz] holds the size in bytes of the array of pointers to
  * initialisation functions.
  *)
val _ = Define `
 (dt_init_arraysz : num= (( 27:num)))`;

(** [dt_fini_arraysz] holds the size in bytes of the array of pointers to
  * finalisation functions.
  *)
val _ = Define `
 (dt_fini_arraysz : num= (( 28:num)))`;

(** [dt_runpath] holds an offset into the string table holding a string containing
  * the library search path.
  *)
val _ = Define `
 (dt_runpath : num= (( 29:num)))`;

(** [dt_flags] holds flag values specific to the object being loaded. *)
val _ = Define `
 (dt_flags : num= (( 30:num)))`;

val _ = Define `
 (dt_encoding : num= (( 32:num)))`;

(** [dt_preinit_array] holds the address to the array of pointers of pre-
  * initialisation functions.
  *)
val _ = Define `
 (dt_preinit_array : num= (( 32:num)))`;

(** [dt_preinit_arraysz] holds the size in bytes of the array of pointers of
  * pre-initialisation functions.
  *)
val _ = Define `
 (dt_preinit_arraysz : num= (( 33:num)))`;

(** [dt_loos] and [dt_hios]: this inclusive range is reserved for OS-specific
  * semantics.
  *)
val _ = Define `
 (dt_loos : num=  ((( 2:num) *( 805306374:num)) +( 1:num)))`;
 (* 0x6000000D *)
val _ = Define `
 (dt_hios : num=  (( 2:num) *( 939522048:num)))`;
 (* 0x6ffff000 *)
(** [dt_loproc] and [dt_hiproc]: this inclusive range is reserved for processor
  * specific semantics.
  *)
val _ = Define `
 (dt_loproc : num=  (( 2:num) *( 939524096:num)))`;
 (* 0x70000000 *)
val _ = Define `
 (dt_hiproc : num=  ((( 2:num) *( 1073741823:num)) +( 1:num)))`;
 (* 0x7fffffff *)

(** [string_of_dynamic_tag so t os proc] produces a string-based representation of
  * dynamic section tag [t].  For tag values between LO_OS and HI_OS [os] is
  * used to produce the resulting value.  For tag values between LO_PROC and
  * HI_PROC [proc] is used to produce the resulting value.  Boolean flag [so]
  * indicates whether the flag in question is derived from a shared object file,
  * which alters the printing of ENCODING and PRE_INITARRAY flags.
  *)
(*val string_of_dynamic_tag : bool -> natural -> (natural -> bool) -> (natural -> string) -> (natural -> string)
  -> string*)
val _ = Define `
 (string_of_dynamic_tag shared_object tag os_additional_ranges os proc=  
 (if tag = dt_null then
    "NULL"
  else if tag = dt_needed then
    "NEEDED"
  else if tag = dt_pltrelsz then
    "PLTRELSZ"
  else if tag = dt_pltgot then
    "PLTGOT"
  else if tag = dt_hash then
    "HASH"
  else if tag = dt_strtab then
    "STRTAB"
  else if tag = dt_symtab then
    "SYMTAB"
  else if tag = dt_rela then
    "RELA"
  else if tag = dt_relasz then
    "RELASZ"
  else if tag = dt_relaent then
    "RELAENT"
  else if tag = dt_strsz then
    "STRSZ"
  else if tag = dt_syment then
    "SYMENT"
  else if tag = dt_init then
    "INIT"
  else if tag = dt_fini then
    "FINI"
  else if tag = dt_soname then
    "SONAME"
  else if tag = dt_rpath then
    "RPATH"
  else if tag = dt_symbolic then
    "SYMBOLIC"
  else if tag = dt_rel then
    "REL"
  else if tag = dt_relsz then
    "RELSZ"
  else if tag = dt_relent then
    "RELENT"
  else if tag = dt_pltrel then
    "PLTREL"
  else if tag = dt_debug then
    "DEBUG"
  else if tag = dt_textrel then
    "TEXTREL"
  else if tag = dt_jmprel then
    "JMPREL"
  else if tag = dt_bindnow then
    "BIND_NOW"
  else if tag = dt_init_array then
    "INIT_ARRAY"
  else if tag = dt_fini_array then
    "FINI_ARRAY"
  else if tag = dt_init_arraysz then
    "INIT_ARRAYSZ"
  else if tag = dt_fini_arraysz then
    "FINI_ARRAYSZ"
  else if tag = dt_runpath then
    "RUNPATH"
  else if tag = dt_flags then
    "FLAGS"
  else if tag = dt_encoding then
    if ~ shared_object then
      "ENCODING"
    else
      "PREINIT_ARRAY"
  else if tag = dt_preinit_arraysz then
    "PREINIT_ARRAYSZ"
  else if (tag >= dt_loproc) /\ (tag <= dt_hiproc) then
    proc tag
  else if (tag >= dt_loos) /\ (tag <= dt_hios) then
    os tag
  else if os_additional_ranges tag then
    os tag
  else
    "Invalid dynamic section tag"))`;

    
(** [tag_correspondence] is a type used to emulate the functionality of a C-union
  * in Lem.  The type records whether the union should be interpreted as a value,
  * a pointer, or a "do not care" value.  An accompanying function will map a
  * dynamic section tag to a [tag_correspondence], so that transcription functions
  * know how to properly use the [dyn_union] value in a dynamic section entry.
  *)
val _ = Hol_datatype `
 tag_correspondence
  = C_Val     (** [dyn_union] should be interpreted as a value. *)
  | C_Ptr     (** [dyn_union] should be interpreted as a pointer. *)
  | C_Ignored`;
 (** [dyn_union] is irrelevant, so we do not care. *)
  
(** [tag_correspondence_of_tag tag os_additional_ranges os proc] produces a
  * [tag_correspondence] value for a given dynamic tag, [tag].  Some tag values
  * are reserved for interpretation by the OS or processor supplement (i.e. the
  * ABI).  We therefore also take in a predicate, [os_additional_ranges], that
  * recognises when a tag is "special" for a given ABI, and a means of interpreting
  * that tag, using [os] and [proc] functions.
  *)
(*val tag_correspondence_of_tag : bool -> natural -> (natural -> bool) -> (natural -> error tag_correspondence) ->
  (natural -> error tag_correspondence) -> error tag_correspondence*)
val _ = Define `
 (tag_correspondence_of_tag shared_object tag os_additional_ranges os proc=  
 (if tag = dt_null then
    return C_Ignored
  else if tag = dt_needed then
    return C_Val
  else if tag = dt_pltrelsz then
    return C_Val
  else if tag = dt_pltgot then
    return C_Ptr
  else if tag = dt_hash then
    return C_Ptr
  else if tag = dt_strtab then
    return C_Ptr
  else if tag = dt_symtab then
    return C_Ptr
  else if tag = dt_rela then
    return C_Ptr
  else if tag = dt_relasz then
    return C_Val
  else if tag = dt_relaent then
    return C_Val
  else if tag = dt_strsz then
    return C_Val
  else if tag = dt_syment then
    return C_Val
  else if tag = dt_init then
    return C_Ptr
  else if tag = dt_fini then
    return C_Ptr
  else if tag = dt_soname then
    return C_Val
  else if tag = dt_rpath then
    return C_Val
  else if tag = dt_symbolic then
    return C_Ignored
  else if tag = dt_rel then
    return C_Ptr
  else if tag = dt_relsz then
    return C_Val
  else if tag = dt_relent then
    return C_Val
  else if tag = dt_pltrel then
    return C_Val
  else if tag = dt_debug then
    return C_Ptr
  else if tag = dt_textrel then
    return C_Ignored
  else if tag = dt_jmprel then
    return C_Ptr
  else if tag = dt_bindnow then
    return C_Ignored
  else if tag = dt_init_array then
    return C_Ptr
  else if tag = dt_fini_array then
    return C_Ptr
  else if tag = dt_init_arraysz then
    return C_Val
  else if tag = dt_fini_arraysz then
    return C_Val
  else if tag = dt_runpath then
    return C_Val
  else if tag = dt_flags then
    return C_Val
  else if tag = dt_encoding then
    if ~ shared_object then
      return C_Ignored
    else
      return C_Ptr
  else if tag = dt_preinit_arraysz then
    return C_Val
  else if (tag >= dt_loproc) /\ (tag <= dt_hiproc) then
    proc tag
  else if (tag >= dt_loos) /\ (tag <= dt_hios) then
    os tag
  else if os_additional_ranges tag then
    os tag
  else
    fail0 ("tag_correspondence_of_tag: invalid dynamic section tag")))`;

    
(** [read_elf32_dyn endian bs0 so os_additional_ranges os proc] reads an [elf32_dyn]
  * record from byte sequence [bs0], assuming endianness [endian].  As mentioned
  * above some ABIs reserve additional tag values for their own purposes.  These
  * are recognised by the predicate [os_additional_ranges] and interpreted by
  * the functions [os] and [proc].  Fails if the transcription of the record from
  * [bs0] fails, or if [os] or [proc] fail.
  *)
(*val read_elf32_dyn : endianness -> byte_sequence -> bool -> (natural -> bool) -> (natural -> error tag_correspondence) ->
  (natural -> error tag_correspondence) -> error (elf32_dyn * byte_sequence)*)
val _ = Define `
 (read_elf32_dyn endian bs0 shared_object os_additional_ranges os proc=  
 (read_elf32_sword endian bs0 >>= (\ (tag0, bs1) . 
  let tag = (Num (ABS (w2i tag0))) in
  tag_correspondence_of_tag shared_object tag os_additional_ranges os proc >>= (\ corr . 
    (case corr of
        C_Ptr =>
        read_elf32_addr endian bs1 >>= (\ (ptr, bs2) . 
        return (<| elf32_dyn_tag := tag0 ; elf32_dyn_d_un := (D_Ptr ptr) |>, bs2))
      | C_Val =>
        read_elf32_word endian bs1 >>= (\ (vl, bs2) . 
        return (<| elf32_dyn_tag := tag0 ; elf32_dyn_d_un := (D_Val vl) |>, bs2))
      | C_Ignored =>
        (case endian of
            Big    =>
            read_4_bytes_be bs1 >>= (\ ((b1, b2, b3, b4), bs2) . 
            let cut = (byte_sequence$from_byte_lists [[b1; b2; b3; b4]]) in
            return (<| elf32_dyn_tag := tag0 ; elf32_dyn_d_un := (D_Ignored cut) |>, bs2))
          | Little =>
            read_4_bytes_le bs1 >>= (\ ((b1, b2, b3, b4), bs2) . 
            let cut = (byte_sequence$from_byte_lists [[b1; b2; b3; b4]]) in
            return (<| elf32_dyn_tag := tag0 ; elf32_dyn_d_un := (D_Ignored cut) |>, bs2))
        )
    )))))`;

    
(** [read_elf64_dyn endian bs0 os_additional_ranges os proc] reads an [elf64_dyn]
  * record from byte sequence [bs0], assuming endianness [endian].  As mentioned
  * above some ABIs reserve additional tag values for their own purposes.  These
  * are recognised by the predicate [os_additional_ranges] and interpreted by
  * the functions [os] and [proc].  Fails if the transcription of the record from
  * [bs0] fails, or if [os] or [proc] fail.
  *)
(*val read_elf64_dyn : endianness -> byte_sequence -> bool -> (natural -> bool) ->
  (natural -> error tag_correspondence) -> (natural -> error tag_correspondence) ->
    error (elf64_dyn * byte_sequence)*)
val _ = Define `
 (read_elf64_dyn endian bs0 shared_object os_additional_ranges os proc=  
 (read_elf64_sxword endian bs0 >>= (\ (tag0, bs1) . 
  let tag = (Num (ABS (w2i tag0))) in
  tag_correspondence_of_tag shared_object tag os_additional_ranges os proc >>= (\ corr . 
    (case corr of
        C_Ptr =>
        read_elf64_addr endian bs1 >>= (\ (ptr, bs2) . 
        return (<| elf64_dyn_tag := tag0 ; elf64_dyn_d_un := (D_Ptr ptr) |>, bs2))
      | C_Val =>
        read_elf64_xword endian bs1 >>= (\ (vl, bs2) . 
        return (<| elf64_dyn_tag := tag0 ; elf64_dyn_d_un := (D_Val vl) |>, bs2))
      | C_Ignored =>
        (case endian of
            Big    =>
            read_8_bytes_be bs1 >>= (\ ((b1, b2, b3, b4, b5, b6, b7, b8), bs2) . 
            let cut = (byte_sequence$from_byte_lists [[b1; b2; b3; b4; b5; b6; b7; b8]]) in
            return (<| elf64_dyn_tag := tag0 ; elf64_dyn_d_un := (D_Ignored cut) |>, bs2))
          | Little =>
            read_8_bytes_le bs1 >>= (\ ((b1, b2, b3, b4, b5, b6, b7, b8), bs2) . 
            let cut = (byte_sequence$from_byte_lists [[b1; b2; b3; b4; b5; b6; b7; b8]]) in
            return (<| elf64_dyn_tag := tag0 ; elf64_dyn_d_un := (D_Ignored cut) |>, bs2))
        )
    )))))`;

    
(** [obtain_elf32_dynamic_section_contents' endian bs0 os_additional_ranges os
  * proc] exhaustively reads in [elf32_dyn] values from byte sequence [bs0],
  * interpreting ABI-specific dynamic tags with [os_additional_ranges], [os], and
  * [proc] as mentioned above.  Fails if [bs0]'s length modulo the size of an
  * [elf32_dyn] entry is not 0.
  *)
(*val obtain_elf32_dynamic_section_contents' : endianness -> byte_sequence ->
  bool -> (natural -> bool) -> (natural -> error tag_correspondence) ->
  (natural -> error tag_correspondence) -> error (list elf32_dyn)*)
 val obtain_elf32_dynamic_section_contents'_defn = Hol_defn "obtain_elf32_dynamic_section_contents'" `
 (obtain_elf32_dynamic_section_contents' endian bs0 shared_object os_additional_ranges os proc=  
 (if byte_sequence$length0 bs0 =( 0:num) then
    return []
  else
    read_elf32_dyn endian bs0 shared_object os_additional_ranges os proc >>= (\ (head, bs0) . 
    if w2i head.elf32_dyn_tag = int_of_num dt_null then (* DT_NULL marks end of array *)
      return [head]
    else
    obtain_elf32_dynamic_section_contents' endian bs0 shared_object os_additional_ranges os proc >>= (\ tail . 
    return (head::tail)))))`;

val _ = Lib.with_flag (computeLib.auto_import_definitions, false) Defn.save_defn obtain_elf32_dynamic_section_contents'_defn;
    
(** [obtain_elf64_dynamic_section_contents' endian bs0 os_additional_ranges os
  * proc] exhaustively reads in [elf64_dyn] values from byte sequence [bs0],
  * interpreting ABI-specific dynamic tags with [os_additional_ranges], [os], and
  * [proc] as mentioned above.  Fails if [bs0]'s length modulo the size of an
  * [elf64_dyn] entry is not 0.
  *)
(*val obtain_elf64_dynamic_section_contents' : endianness -> byte_sequence ->
  bool -> (natural -> bool) -> (natural -> error tag_correspondence) ->
  (natural -> error tag_correspondence) -> error (list elf64_dyn)*)
 val obtain_elf64_dynamic_section_contents'_defn = Hol_defn "obtain_elf64_dynamic_section_contents'" `
 (obtain_elf64_dynamic_section_contents' endian bs0 shared_object os_additional_ranges os proc=  
 (if byte_sequence$length0 bs0 =( 0:num) then
    return []
  else
    read_elf64_dyn endian bs0 shared_object os_additional_ranges os proc >>= (\ (head, bs0) . 
    if w2i head.elf64_dyn_tag = int_of_num dt_null then (* DT_NULL marks end of array *)
      return [head]
    else
      obtain_elf64_dynamic_section_contents' endian bs0 shared_object os_additional_ranges os proc >>= (\ tail . 
      return (head::tail)))))`;

val _ = Lib.with_flag (computeLib.auto_import_definitions, false) Defn.save_defn obtain_elf64_dynamic_section_contents'_defn;

(** [obtain_elf32_dynamic_section_contents' f1 os_additional_ranges os
  * proc bs0] exhaustively reads in [elf32_dyn] values from byte sequence [bs0],
  * obtaining endianness and the section header table from [elf32_file] f1,
  * interpreting ABI-specific dynamic tags with [os_additional_ranges], [os], and
  * [proc] as mentioned above.  Fails if [bs0]'s length modulo the size of an
  * [elf32_dyn] entry is not 0.
  *)
(*val obtain_elf32_dynamic_section_contents : elf32_file ->
  (natural -> bool) -> (natural -> error tag_correspondence) ->
  (natural -> error tag_correspondence) -> byte_sequence -> error (list elf32_dyn)*)
val _ = Define `
 (obtain_elf32_dynamic_section_contents f1 os_additional_ranges os proc bs0=  
 (let endian = (get_elf32_header_endianness f1.elf32_file_header) in
  let sht = (f1.elf32_file_section_header_table) in
  let shared_object = (is_elf32_shared_object_file f1.elf32_file_header) in
    (case FILTER (\ ent .  w2n ent.elf32_sh_type = sht_dynamic) sht of
        [] => fail0 "obtain_elf32_dynamic_section_contents: no SHT_DYNAMIC section header entries"
      | [dyn] =>
        let off = (w2n dyn.elf32_sh_offset) in
        let siz = (w2n dyn.elf32_sh_size) in
        byte_sequence$offset_and_cut off siz bs0 >>= (\ rel . 
        obtain_elf32_dynamic_section_contents' endian rel shared_object os_additional_ranges os proc)
      | _ => fail0 "obtain_elf32_dynamic_section_contents: multiple SHT_DYNAMIC section header entries"
    )))`;


(** [obtain_elf64_dynamic_section_contents' f1 os_additional_ranges os
  * proc bs0] exhaustively reads in [elf64_dyn] values from byte sequence [bs0],
  * obtaining endianness and the section header table from [elf64_file] f1,
  * interpreting ABI-specific dynamic tags with [os_additional_ranges], [os], and
  * [proc] as mentioned above.  Fails if [bs0]'s length modulo the size of an
  * [elf64_dyn] entry is not 0.
  *)
(*val obtain_elf64_dynamic_section_contents : elf64_file ->
  (natural -> bool) -> (natural -> error tag_correspondence) ->
  (natural -> error tag_correspondence) -> byte_sequence -> error (list elf64_dyn)*)
val _ = Define `
 (obtain_elf64_dynamic_section_contents f1 os_additional_ranges os proc bs0=  
 (let endian = (get_elf64_header_endianness f1.elf64_file_header) in
  let sht = (f1.elf64_file_section_header_table) in
  let shared_object = (is_elf64_shared_object_file f1.elf64_file_header) in
    (case FILTER (\ ent .  w2n ent.elf64_sh_type = sht_dynamic) sht of
        [] => fail0 "obtain_elf64_dynamic_section_contents: no SHT_DYNAMIC section header entries"
      | [dyn] =>
        let off = (w2n dyn.elf64_sh_offset) in
        let siz = (w2n dyn.elf64_sh_size) in
        byte_sequence$offset_and_cut off siz bs0 >>= (\ rel . 
        obtain_elf64_dynamic_section_contents' endian rel shared_object os_additional_ranges os proc)
      | _ => fail0 "obtain_elf64_dynamic_section_contents: multiple SHT_DYNAMIC section header entries"
    )))`;


(** DT Flags values *)

(** [df_origin] specific that the object being loaded may make reference to the
  * $(ORIGIN) substitution string.
  *)
val _ = Define `
 (df_origin : num= (( 1:num)))`;
 (* 0x1 *)
(** [df_symbolic] changes the linker's symbol resolution algorithm, resolving
  * symbols first from the shared object file rather than the executable file.
  *)
val _ = Define `
 (df_symbolic : num= (( 2:num)))`;
 (* 0x2 *)
(** [df_textrel] if this flag is not set then no relocation entry should cause
  * modification to a non-writable segment.
  *)
val _ = Define `
 (df_textrel : num= (( 4:num)))`;
 (* 0x4 *)
(** [df_bindnow] if set this instructs the linker to process all relocation entries
  * of the containing object before transferring control to the program.
  *)
val _ = Define `
 (df_bindnow : num= (( 8:num)))`;
 (* 0x8 *)
(** [df_static_tls] if set instructs the linker to reject all attempts to load
  * the containing file dynamically.
  *)
val _ = Define `
 (df_static_tls : num= (( 16:num)))`;
 (* 0x10 *)

(** [check_flag] is a utility function for testing whether a flag is set.
  * TODO: so simple it is probably unneccessary now.
  *)
(*val check_flag : natural -> natural -> bool*)
val _ = Define `
 (check_flag m pos=  (m = pos))`;


(** [string_of_dt_flag f] produces a string-based representation of dynamic
  * section flag [f].
  *)
(*val string_of_dt_flag : natural -> string*)
val _ = Define `
 (string_of_dt_flag flag=  
 (if check_flag flag(( 0:num)) then
    "None"
  else if check_flag flag df_origin then
    "ORIGIN"
  else if check_flag flag df_bindnow then
    "BIND_NOW"
  else if check_flag flag df_symbolic then
    "SYMBOLIC"
  else if check_flag flag df_textrel then
    "TEXTREL"
  else if check_flag flag df_static_tls then
    "STATIC_TLS"
  else if check_flag flag (df_bindnow + df_static_tls) then
    "BIND_NOW STATIC_TLS"
  else if check_flag flag (df_static_tls + df_symbolic) then
    "SYMBOLIC STATIC_TLS"
  else (* XXX: add more as needed *)
    "Invalid dynamic section flag"))`;

    
(** [rel_type] represents the two types of relocation records potentially present
  * in an ELF file: relocation, and relocation with addends.
  *)
val _ = Hol_datatype `
 rel_type
  = Rel  (** Plain relocation type. *)
  | RelA`;
 (** Relocation with addends type. *)
  
(** [string_of_rel_type r] produces a string-based representation of [rel_type],
  * [r].
  *)
(*val string_of_rel_type : rel_type -> string*)
val _ = Define `
 (string_of_rel_type r=  
 ((case r of
      Rel  => "REL"
    | RelA => "RELA"
  )))`;

    
(** Type [dyn_value] represents the value of an ELF dynamic section entry.  Values
  * can represent various different types of objects (e.g. paths to libraries, or
  * flags, or sizes of other entries in a file), and this type collates them all.
  * Parameterised over two type variables so the type can be shared between ELF32
  * and ELF64.
  *)
val _ = Hol_datatype `
 dyn_value
  = Address   of 'addr    (** An address. *)
  | Size      of 'size    (** A size (in bytes). *)
  | FName     of string   (** A filename. *)
  | SOName    of string   (** A shared object name. *)
  | Path      of string   (** A path to some directory. *)
  | RPath     of string   (** A "run path". *)
  | RunPath   of string   (** A "run path". *)
  | Library   of string   (** A library path. *)
  | Flags1    of num  (** Flags. *)
  | Flags     of num  (** Flags. *)
  | Numeric   of num  (** An uninterpreted numeric value. *)
  | Checksum  of num  (** A checksum value *)
  | RelType   of rel_type (** A relocation entry type. *)
  | Timestamp of num  (** A timestamp value. *)
  | Null                  (** A null (0) value. *)
  | Ignored`;
               (** An ignored value. *)
  
(** [elf32_dyn_value] and [elf64_dyn_value] are specialisations of [dyn_value]
  * fixing the correct types for the ['addr] and ['size] type variables.
  *)
val _ = type_abbrev( "elf32_dyn_value" , ``: (uint32, uint32) dyn_value``);
val _ = type_abbrev( "elf64_dyn_value" , ``: (uint64, uint64) dyn_value``);

(** [get_string_table_of_elf32_dyn_section endian dyns sht bs0] searches through
  * dynamic section entries [dyns] looking for one pointing to a string table, looks
  * up the corresponding section header [sht] pointed to by that dynamic
  * section entry, finds the section in [bs0] and decodes a string table from that
  * section assuming endianness [endian].  May fail.
  *)
(*val get_string_table_of_elf32_dyn_section : endianness -> list elf32_dyn ->
  elf32_section_header_table -> byte_sequence -> error string_table*)
val _ = Define `
 (get_string_table_of_elf32_dyn_section endian dyns sht bs0=  
 (let strtabs =    
(FILTER (\ x . 
      w2i x.elf32_dyn_tag = int_of_num dt_strtab
    ) dyns)
  in
    (case strtabs of
        [strtab] =>
        (case strtab.elf32_dyn_d_un of
            D_Val     v => fail0 "get_string_table_of_elf32_dyn_section: STRTAB must be a PTR"
          | D_Ptr     p =>
            let sect =              
(FILTER (\ s .                 
(s.elf32_sh_addr = p) /\                  
(s.elf32_sh_type = (n2w : num -> uint32) sht_strtab)
              ) sht)
            in
              (case sect of
                  []  => fail0 "get_string_table_of_elf32_dyn_section: no section entry with same address as STRTAB"
                | [s] =>
                  let off = (w2n  s.elf32_sh_offset) in
                  let siz = (w2n s.elf32_sh_size) in
                  byte_sequence$offset_and_cut off siz bs0 >>= (\ rel . 
                  let strings  = (byte_sequence$string_of_byte_sequence rel) in
                  return (string_table$mk_string_table strings ((CHR 0))))
                | _   => fail0 "get_string_table_of_elf32_dyn_section: multiple section entries with same address as STRTAB"
              )
          | D_Ignored i => fail0 "get_string_table_of_elf32_dyn_section: STRTAB must be a PTR"
        )
      | []       => fail0 "get_string_table_of_elf32_dyn_section: no string table entry"
      | _        => fail0 "get_string_table_of_elf32_dyn_section: multiple string table entries"
    )))`;

    
(** [get_string_table_of_elf64_dyn_section endian dyns sht bs0] searches through
  * dynamic section entries [dyns] looking for one pointing to a string table, looks
  * up the corresponding section header [sht] pointed to by that dynamic
  * section entry, finds the section in [bs0] and decodes a string table from that
  * section assuming endianness [endian].  May fail.
  *)
(*val get_string_table_of_elf64_dyn_section : endianness -> list elf64_dyn ->
  elf64_section_header_table -> byte_sequence -> error string_table*)
val _ = Define `
 (get_string_table_of_elf64_dyn_section endian dyns sht bs0=  
 (let strtabs =    
(FILTER (\ x . 
      w2i x.elf64_dyn_tag = int_of_num dt_strtab
    ) dyns)
  in
    (case strtabs of
        [strtab] =>
        (case strtab.elf64_dyn_d_un of
            D_Val     v => fail0 "get_string_table_of_elf64_dyn_section: STRTAB must be a PTR"
          | D_Ptr     p =>
            let sect =              
(FILTER (\ s .                 
(s.elf64_sh_addr = p) /\                  
(s.elf64_sh_type = (n2w : num -> uint32) sht_strtab)
              ) sht)
            in
              (case sect of
                  []  => fail0 "get_string_table_of_elf64_dyn_section: no section entry with same address as STRTAB"
                | [s] =>
                  let off = (w2n  s.elf64_sh_offset) in
                  let siz = (w2n s.elf64_sh_size) in
                  byte_sequence$offset_and_cut off siz bs0 >>= (\ rel . 
                  let strings  = (byte_sequence$string_of_byte_sequence rel) in
                  return (string_table$mk_string_table strings (CHR 0)))
                | _   => fail0 "get_string_table_of_elf64_dyn_section: multiple section entries with same address as STRTAB"
              )
          | D_Ignored i => fail0 "get_string_table_of_elf64_dyn_section: STRTAB must be a PTR"
        )
      | []       => fail0 "get_string_table_of_elf64_dyn_section: no string table entry"
      | _        => fail0 "get_string_table_of_elf64_dyn_section: multiple string table entries"
    )))`;

    
(** [get_value_of_elf32_dyn so dyn os_additional_ranges os proc stab] returns the value
  * stored in a dynamic section entry [dyn], using [os_additional_ranges] and
  * [os] to decode ABI-reserved tags.  String table [stab] is used to correctly
  * decode library and run paths, etc.
  * May fail.
  *)
(*val get_value_of_elf32_dyn : bool -> elf32_dyn -> (natural -> bool) ->
  (elf32_dyn -> string_table -> error elf32_dyn_value) ->
    (elf32_dyn -> string_table -> error elf32_dyn_value) ->
    string_table -> error elf32_dyn_value*)
val _ = Define `
 (get_value_of_elf32_dyn shared_object dyn os_additional_ranges os proc stab=  
 (let tag = (Num (ABS (w2i dyn.elf32_dyn_tag))) in
    if tag = dt_null then
      return Null
    else if tag = dt_needed then
      (case dyn.elf32_dyn_d_un of
          D_Val v     => return v
        | D_Ptr p     => fail0 "get_value_of_elf32_dyn_entry: NEEDED must be a Val"
        | D_Ignored i => fail0 "get_value_of_elf32_dyn_entry: NEEDED must be a Val"
      ) >>= (\ off . 
        let off = (w2n off) in
        string_table$get_string_at off stab >>= (\ str . 
        return (Library str)))
    else if tag = dt_pltrelsz then
      (case dyn.elf32_dyn_d_un of
          D_Val     v => return v
        | D_Ptr     p => fail0 "get_value_of_elf32_dyn_entry: PLTRELSZ must be a Val"
        | D_Ignored i => fail0 "get_value_of_elf32_dyn_entry: PLTRELSZ must be a Val"
      ) >>= (\ sz . 
      return (Size sz))
    else if tag = dt_pltgot then
      (case dyn.elf32_dyn_d_un of
          D_Val     v => fail0 "get_value_of_elf32_dyn_entry: PLTGOT must be a PTR"
        | D_Ptr     p => return p
        | D_Ignored i => fail0 "get_value_of_elf32_dyn_entry: PLTGOT must be a PTR"
      ) >>= (\ ptr . 
      return (Address ptr))
    else if tag = dt_hash then
      (case dyn.elf32_dyn_d_un of
          D_Val     v => fail0 "get_value_of_elf32_dyn_entry: HASH must be a PTR"
        | D_Ptr     p => return p
        | D_Ignored i => fail0 "get_value_of_elf32_dyn_entry: HASH must be a PTR"
      ) >>= (\ ptr . 
      return (Address ptr))
    else if tag = dt_strtab then
      (case dyn.elf32_dyn_d_un of
          D_Val     v => fail0 "get_value_of_elf32_dyn_entry: STRTAB must be a PTR"
        | D_Ptr     p => return p
        | D_Ignored i => fail0 "get_value_of_elf32_dyn_entry: STRTAB must be a PTR"
      ) >>= (\ ptr . 
      return (Address ptr))
    else if tag = dt_symtab then
      (case dyn.elf32_dyn_d_un of
          D_Val     v => fail0 "get_value_of_elf32_dyn_entry: SYMTAB must be a PTR"
        | D_Ptr     p => return p
        | D_Ignored i => fail0 "get_value_of_elf32_dyn_entry: SYMTAB must be a PTR"
      ) >>= (\ ptr . 
      return (Address ptr))
    else if tag = dt_rela then
      (case dyn.elf32_dyn_d_un of
          D_Val     v => fail0 "get_value_of_elf32_dyn_entry: RELA must be a PTR"
        | D_Ptr     p => return p
        | D_Ignored i => fail0 "get_value_of_elf32_dyn_entry: RELA must be a PTR"
      ) >>= (\ ptr . 
      return (Address ptr))
    else if tag = dt_relasz then
      (case dyn.elf32_dyn_d_un of
          D_Val     v => return v
        | D_Ptr     p => fail0 "get_value_of_elf32_dyn_entry: RELASZ must be a VAL"
        | D_Ignored i => fail0 "get_value_of_elf32_dyn_entry: RELASZ must be a VAL"
      ) >>= (\ sz . 
      return (Size sz))
    else if tag = dt_relaent then
      (case dyn.elf32_dyn_d_un of
          D_Val     v => return v
        | D_Ptr     p => fail0 "get_value_of_elf32_dyn_entry: RELAENT must be a VAL"
        | D_Ignored i => fail0 "get_value_of_elf32_dyn_entry: RELAENT must be a VAL"
      ) >>= (\ sz . 
      return (Size sz))
    else if tag = dt_strsz then
      (case dyn.elf32_dyn_d_un of
          D_Val     v => return v
        | D_Ptr     p => fail0 "get_value_of_elf32_dyn_entry: STRSZ must be a VAL"
        | D_Ignored i => fail0 "get_value_of_elf32_dyn_entry: STRSZ must be a VAL"
      ) >>= (\ sz . 
      return (Size sz))
    else if tag = dt_syment then
      (case dyn.elf32_dyn_d_un of
          D_Val     v => return v
        | D_Ptr     p => fail0 "get_value_of_elf32_dyn_entry: SYMENT must be a VAL"
        | D_Ignored i => fail0 "get_value_of_elf32_dyn_entry: SYMENT must be a VAL"
      ) >>= (\ sz . 
      return (Size sz))
    else if tag = dt_init then
      (case dyn.elf32_dyn_d_un of
          D_Val     v => fail0 "get_value_of_elf32_dyn_entry: INIT must be a PTR"
        | D_Ptr     p => return p
        | D_Ignored i => fail0 "get_value_of_elf32_dyn_entry: INIT must be a PTR"
      ) >>= (\ ptr . 
      return (Address ptr))
    else if tag = dt_fini then
      (case dyn.elf32_dyn_d_un of
          D_Val     v => fail0 "get_value_of_elf32_dyn_entry: FINI must be a PTR"
        | D_Ptr     p => return p
        | D_Ignored i => fail0 "get_value_of_elf32_dyn_entry: FINI must be a PTR"
      ) >>= (\ ptr . 
      return (Address ptr))
    else if tag = dt_soname then
      (case dyn.elf32_dyn_d_un of
          D_Val v     => return v
        | D_Ptr p     => fail0 "get_value_of_elf32_dyn_entry: SONAME must be a Val"
        | D_Ignored i => fail0 "get_value_of_elf32_dyn_entry: SONAME must be a Val"
      ) >>= (\ off . 
        let off = (w2n off) in
        string_table$get_string_at off stab >>= (\ str . 
        return (SOName str)))
    else if tag = dt_rpath then
      (case dyn.elf32_dyn_d_un of
          D_Val v     => return v
        | D_Ptr p     => fail0 "get_value_of_elf32_dyn_entry: RPATH must be a Val"
        | D_Ignored i => fail0 "get_value_of_elf32_dyn_entry: RPATH must be a Val"
      ) >>= (\ off . 
        let off = (w2n off) in
        string_table$get_string_at off stab >>= (\ str . 
        return (RPath str)))
    else if tag = dt_symbolic then
      return Null
    else if tag = dt_rel then
      (case dyn.elf32_dyn_d_un of
          D_Val     v => fail0 "get_value_of_elf32_dyn_entry: REL must be a PTR"
        | D_Ptr     p => return p
        | D_Ignored i => fail0 "get_value_of_elf32_dyn_entry: REL must be a PTR"
      ) >>= (\ ptr . 
      return (Address ptr))
    else if tag = dt_relsz then
      (case dyn.elf32_dyn_d_un of
          D_Val     v => return v
        | D_Ptr     p => fail0 "get_value_of_elf32_dyn_entry: RELSZ must be a VAL"
        | D_Ignored i => fail0 "get_value_of_elf32_dyn_entry: RELSZ must be a VAL"
      ) >>= (\ sz . 
      return (Size sz))
    else if tag = dt_relent then
      (case dyn.elf32_dyn_d_un of
          D_Val     v => return v
        | D_Ptr     p => fail0 "get_value_of_elf32_dyn_entry: RELENT must be a VAL"
        | D_Ignored i => fail0 "get_value_of_elf32_dyn_entry: RELENT must be a VAL"
      ) >>= (\ sz . 
      return (Size sz))
    else if tag = dt_pltrel then
      (case dyn.elf32_dyn_d_un of
          D_Val     v => return v
        | D_Ptr     p => fail0 "get_value_of_elf32_dyn_entry: PLTREL must be a VAL"
        | D_Ignored i => fail0 "get_value_of_elf32_dyn_entry: PLTREL must be a VAL"
      ) >>= (\ r . 
        if w2n r = dt_rel then
          return (RelType Rel)
        else if w2n r = dt_rela then
          return (RelType RelA)
        else
          fail0 "get_value_of_elf32_dyn_entry: PLTREL neither REL nor RELA")
    else if tag = dt_debug then
      return Null
    else if tag = dt_textrel then
      return Null
    else if tag = dt_jmprel then
      (case dyn.elf32_dyn_d_un of
          D_Val     v => fail0 "get_value_of_elf32_dyn_entry: JMPREL must be a PTR"
        | D_Ptr     p => return p
        | D_Ignored i => fail0 "get_value_of_elf32_dyn_entry: JMPREL must be a PTR"
      ) >>= (\ ptr . 
      return (Address ptr))
    else if tag = dt_bindnow then
      return Ignored
    else if tag = dt_init_array then
      (case dyn.elf32_dyn_d_un of
          D_Val     v => fail0 "get_value_of_elf32_dyn_entry: INIT_ARRAY must be a PTR"
        | D_Ptr     p => return p
        | D_Ignored i => fail0 "get_value_of_elf32_dyn_entry: INIT_ARRAY must be a PTR"
      ) >>= (\ ptr . 
      return (Address ptr))
    else if tag = dt_fini_array then
      (case dyn.elf32_dyn_d_un of
          D_Val     v => fail0 "get_value_of_elf32_dyn_entry: FINI_ARRAY must be a PTR"
        | D_Ptr     p => return p
        | D_Ignored i => fail0 "get_value_of_elf32_dyn_entry: FINI_ARRAY must be a PTR"
      ) >>= (\ ptr . 
      return (Address ptr))
    else if tag = dt_init_arraysz then
      (case dyn.elf32_dyn_d_un of
          D_Val     v => return v
        | D_Ptr     p => fail0 "get_value_of_elf32_dyn_entry: INIT_ARRAYSZ must be a VAL"
        | D_Ignored i => fail0 "get_value_of_elf32_dyn_entry: INIT_ARRAYSZ must be a VAL"
      ) >>= (\ sz . 
      return (Size sz))
    else if tag = dt_fini_arraysz then
      (case dyn.elf32_dyn_d_un of
          D_Val     v => return v
        | D_Ptr     p => fail0 "get_value_of_elf32_dyn_entry: FINI_ARRAYSZ must be a VAL"
        | D_Ignored i => fail0 "get_value_of_elf32_dyn_entry: FINI_ARRAYSZ must be a VAL"
      ) >>= (\ sz . 
      return (Size sz))
    else if tag = dt_runpath then
      (case dyn.elf32_dyn_d_un of
          D_Val v     => return v
        | D_Ptr p     => fail0 "get_value_of_elf32_dyn_entry: RUNPATH must be a Val"
        | D_Ignored i => fail0 "get_value_of_elf32_dyn_entry: RUNPATH must be a Val"
      ) >>= (\ off . 
        let off = (w2n off) in
        string_table$get_string_at off stab >>= (\ str . 
        return (RunPath str)))
    else if tag = dt_flags then
      (case dyn.elf32_dyn_d_un of
          D_Val v     => return v
        | D_Ptr p     => fail0 "get_value_of_elf32_dyn_entry: FLAGS must be a Val"
        | D_Ignored i => fail0 "get_value_of_elf32_dyn_entry: FLAGS must be a Val"
      ) >>= (\ flags . 
        return (Flags (w2n flags)))
    else if tag = dt_encoding then
      if ~ shared_object then
        return Ignored
      else
        (case dyn.elf32_dyn_d_un of
            D_Val     v => fail0 "get_value_of_elf32_dyn_entry: PREINIT_ARRAY must be a PTR"
          | D_Ptr     p => return p
          | D_Ignored i => fail0 "get_value_of_elf32_dyn_entry: PREINIT_ARRAY must be a PTR"
        ) >>= (\ ptr . 
        return (Address ptr))
    else if tag = dt_preinit_arraysz then
      (case dyn.elf32_dyn_d_un of
          D_Val     v => return v
        | D_Ptr     p => fail0 "get_value_of_elf32_dyn_entry: PREINIT_ARRAYSZ must be a VAL"
        | D_Ignored i => fail0 "get_value_of_elf32_dyn_entry: PREINIT_ARRAYSZ must be a VAL"
      ) >>= (\ sz . 
      return (Checksum (w2n sz))) (** XXX: bug in readelf does not print this as a size! *)
    else if (tag >= dt_loproc) /\ (tag <= dt_hiproc) then
      proc dyn stab
    else if (tag >= dt_loos) /\ (tag <= dt_hios) then
      os dyn stab
    else if os_additional_ranges tag then
      os dyn stab
    else
      fail0 "get_value_of_elf32_dyn: unrecognised tag type"))`;

      
(** [get_value_of_elf64_dyn dyn os_additional_ranges os proc stab] returns the value
  * stored in a dynamic section entry [dyn], using [os_additional_ranges] and
  * [os] to decode ABI-reserved tags.  String table [stab] is used to correctly
  * decode library and run paths, etc.
  * May fail.
  *)
(*val get_value_of_elf64_dyn : bool -> elf64_dyn -> (natural -> bool) ->
  (elf64_dyn -> string_table -> error elf64_dyn_value) ->
    (elf64_dyn -> string_table -> error elf64_dyn_value) ->
    string_table -> error elf64_dyn_value*)
val _ = Define `
 (get_value_of_elf64_dyn shared_object dyn os_additional_ranges os_dyn proc_dyn stab=  
 (let tag = (Num (ABS (w2i dyn.elf64_dyn_tag))) in
    if tag = dt_null then
      return Null
    else if tag = dt_needed then
      (case dyn.elf64_dyn_d_un of
          D_Val v     => return v
        | D_Ptr p     => fail0 "get_value_of_elf64_dyn_entry: NEEDED must be a Val"
        | D_Ignored i => fail0 "get_value_of_elf64_dyn_entry: NEEDED must be a Val"
      ) >>= (\ off . 
        let off = (w2n off) in
        string_table$get_string_at off stab >>= (\ str . 
        return (Library str)))
    else if tag = dt_pltrelsz then
      (case dyn.elf64_dyn_d_un of
          D_Val     v => return v
        | D_Ptr     p => fail0 "get_value_of_elf64_dyn_entry: PLTRELSZ must be a Val"
        | D_Ignored i => fail0 "get_value_of_elf64_dyn_entry: PLTRELSZ must be a Val"
      ) >>= (\ sz . 
      return (Size sz))
    else if tag = dt_pltgot then
      (case dyn.elf64_dyn_d_un of
          D_Val     v => fail0 "get_value_of_elf64_dyn_entry: PLTGOT must be a PTR"
        | D_Ptr     p => return p
        | D_Ignored i => fail0 "get_value_of_elf64_dyn_entry: PLTGOT must be a PTR"
      ) >>= (\ ptr . 
      return (Address ptr))
    else if tag = dt_hash then
      (case dyn.elf64_dyn_d_un of
          D_Val     v => fail0 "get_value_of_elf64_dyn_entry: HASH must be a PTR"
        | D_Ptr     p => return p
        | D_Ignored i => fail0 "get_value_of_elf64_dyn_entry: HASH must be a PTR"
      ) >>= (\ ptr . 
      return (Address ptr))
    else if tag = dt_strtab then
      (case dyn.elf64_dyn_d_un of
          D_Val     v => fail0 "get_value_of_elf64_dyn_entry: STRTAB must be a PTR"
        | D_Ptr     p => return p
        | D_Ignored i => fail0 "get_value_of_elf64_dyn_entry: STRTAB must be a PTR"
      ) >>= (\ ptr . 
      return (Address ptr))
    else if tag = dt_symtab then
      (case dyn.elf64_dyn_d_un of
          D_Val     v => fail0 "get_value_of_elf64_dyn_entry: SYMTAB must be a PTR"
        | D_Ptr     p => return p
        | D_Ignored i => fail0 "get_value_of_elf64_dyn_entry: SYMTAB must be a PTR"
      ) >>= (\ ptr . 
      return (Address ptr))
    else if tag = dt_rela then
      (case dyn.elf64_dyn_d_un of
          D_Val     v => fail0 "get_value_of_elf64_dyn_entry: RELA must be a PTR"
        | D_Ptr     p => return p
        | D_Ignored i => fail0 "get_value_of_elf64_dyn_entry: RELA must be a PTR"
      ) >>= (\ ptr . 
      return (Address ptr))
    else if tag = dt_relasz then
      (case dyn.elf64_dyn_d_un of
          D_Val     v => return v
        | D_Ptr     p => fail0 "get_value_of_elf64_dyn_entry: RELASZ must be a VAL"
        | D_Ignored i => fail0 "get_value_of_elf64_dyn_entry: RELASZ must be a VAL"
      ) >>= (\ sz . 
      return (Size sz))
    else if tag = dt_relaent then
      (case dyn.elf64_dyn_d_un of
          D_Val     v => return v
        | D_Ptr     p => fail0 "get_value_of_elf64_dyn_entry: RELAENT must be a VAL"
        | D_Ignored i => fail0 "get_value_of_elf64_dyn_entry: RELAENT must be a VAL"
      ) >>= (\ sz . 
      return (Size sz))
    else if tag = dt_strsz then
      (case dyn.elf64_dyn_d_un of
          D_Val     v => return v
        | D_Ptr     p => fail0 "get_value_of_elf64_dyn_entry: STRSZ must be a VAL"
        | D_Ignored i => fail0 "get_value_of_elf64_dyn_entry: STRSZ must be a VAL"
      ) >>= (\ sz . 
      return (Size sz))
    else if tag = dt_syment then
      (case dyn.elf64_dyn_d_un of
          D_Val     v => return v
        | D_Ptr     p => fail0 "get_value_of_elf64_dyn_entry: SYMENT must be a VAL"
        | D_Ignored i => fail0 "get_value_of_elf64_dyn_entry: SYMENT must be a VAL"
      ) >>= (\ sz . 
      return (Size sz))
    else if tag = dt_init then
      (case dyn.elf64_dyn_d_un of
          D_Val     v => fail0 "get_value_of_elf64_dyn_entry: INIT must be a PTR"
        | D_Ptr     p => return p
        | D_Ignored i => fail0 "get_value_of_elf64_dyn_entry: INIT must be a PTR"
      ) >>= (\ ptr . 
      return (Address ptr))
    else if tag = dt_fini then
      (case dyn.elf64_dyn_d_un of
          D_Val     v => fail0 "get_value_of_elf64_dyn_entry: FINI must be a PTR"
        | D_Ptr     p => return p
        | D_Ignored i => fail0 "get_value_of_elf64_dyn_entry: FINI must be a PTR"
      ) >>= (\ ptr . 
      return (Address ptr))
    else if tag = dt_soname then
      (case dyn.elf64_dyn_d_un of
          D_Val v     => return v
        | D_Ptr p     => fail0 "get_value_of_elf64_dyn_entry: SONAME must be a Val"
        | D_Ignored i => fail0 "get_value_of_elf64_dyn_entry: SONAME must be a Val"
      ) >>= (\ off . 
        let off = (w2n off) in
        string_table$get_string_at off stab >>= (\ str . 
        return (SOName str)))
    else if tag = dt_rpath then
      (case dyn.elf64_dyn_d_un of
          D_Val v     => return v
        | D_Ptr p     => fail0 "get_value_of_elf64_dyn_entry: RPATH must be a Val"
        | D_Ignored i => fail0 "get_value_of_elf64_dyn_entry: RPATH must be a Val"
      ) >>= (\ off . 
        let off = (w2n off) in
        string_table$get_string_at off stab >>= (\ str . 
        return (RPath str)))
    else if tag = dt_symbolic then
      return Null
    else if tag = dt_rel then
      (case dyn.elf64_dyn_d_un of
          D_Val     v => fail0 "get_value_of_elf64_dyn_entry: REL must be a PTR"
        | D_Ptr     p => return p
        | D_Ignored i => fail0 "get_value_of_elf64_dyn_entry: REL must be a PTR"
      ) >>= (\ ptr . 
      return (Address ptr))
    else if tag = dt_relsz then
      (case dyn.elf64_dyn_d_un of
          D_Val     v => return v
        | D_Ptr     p => fail0 "get_value_of_elf64_dyn_entry: RELSZ must be a VAL"
        | D_Ignored i => fail0 "get_value_of_elf64_dyn_entry: RELSZ must be a VAL"
      ) >>= (\ sz . 
      return (Size sz))
    else if tag = dt_relent then
      (case dyn.elf64_dyn_d_un of
          D_Val     v => return v
        | D_Ptr     p => fail0 "get_value_of_elf64_dyn_entry: RELENT must be a VAL"
        | D_Ignored i => fail0 "get_value_of_elf64_dyn_entry: RELENT must be a VAL"
      ) >>= (\ sz . 
      return (Size sz))
    else if tag = dt_pltrel then
      (case dyn.elf64_dyn_d_un of
          D_Val     v => return v
        | D_Ptr     p => fail0 "get_value_of_elf64_dyn_entry: PLTREL must be a VAL"
        | D_Ignored i => fail0 "get_value_of_elf64_dyn_entry: PLTREL must be a VAL"
      ) >>= (\ r . 
        if w2n r = dt_rel then
          return (RelType Rel)
        else if w2n r = dt_rela then
          return (RelType RelA)
        else
          fail0 "get_value_of_elf64_dyn_entry: PLTREL neither REL nor RELA")
    else if tag = dt_debug then
      return Null
    else if tag = dt_textrel then
      return Null
    else if tag = dt_jmprel then
      (case dyn.elf64_dyn_d_un of
          D_Val     v => fail0 "get_value_of_elf64_dyn_entry: JMPREL must be a PTR"
        | D_Ptr     p => return p
        | D_Ignored i => fail0 "get_value_of_elf64_dyn_entry: JMPREL must be a PTR"
      ) >>= (\ ptr . 
      return (Address ptr))
    else if tag = dt_bindnow then
      return Ignored
    else if tag = dt_init_array then
      (case dyn.elf64_dyn_d_un of
          D_Val     v => fail0 "get_value_of_elf64_dyn_entry: INIT_ARRAY must be a PTR"
        | D_Ptr     p => return p
        | D_Ignored i => fail0 "get_value_of_elf64_dyn_entry: INIT_ARRAY must be a PTR"
      ) >>= (\ ptr . 
      return (Address ptr))
    else if tag = dt_fini_array then
      (case dyn.elf64_dyn_d_un of
          D_Val     v => fail0 "get_value_of_elf64_dyn_entry: FINI_ARRAY must be a PTR"
        | D_Ptr     p => return p
        | D_Ignored i => fail0 "get_value_of_elf64_dyn_entry: FINI_ARRAY must be a PTR"
      ) >>= (\ ptr . 
      return (Address ptr))
    else if tag = dt_init_arraysz then
      (case dyn.elf64_dyn_d_un of
          D_Val     v => return v
        | D_Ptr     p => fail0 "get_value_of_elf64_dyn_entry: INIT_ARRAYSZ must be a VAL"
        | D_Ignored i => fail0 "get_value_of_elf64_dyn_entry: INIT_ARRAYSZ must be a VAL"
      ) >>= (\ sz . 
      return (Size sz))
    else if tag = dt_fini_arraysz then
      (case dyn.elf64_dyn_d_un of
          D_Val     v => return v
        | D_Ptr     p => fail0 "get_value_of_elf64_dyn_entry: FINI_ARRAYSZ must be a VAL"
        | D_Ignored i => fail0 "get_value_of_elf64_dyn_entry: FINI_ARRAYSZ must be a VAL"
      ) >>= (\ sz . 
      return (Size sz))
    else if tag = dt_runpath then
      (case dyn.elf64_dyn_d_un of
          D_Val v     => return v
        | D_Ptr p     => fail0 "get_value_of_elf64_dyn_entry: RUNPATH must be a Val"
        | D_Ignored i => fail0 "get_value_of_elf64_dyn_entry: RUNPATH must be a Val"
      ) >>= (\ off . 
        let off = (w2n off) in
        string_table$get_string_at off stab >>= (\ str . 
        return (RunPath str)))
    else if tag = dt_flags then
      (case dyn.elf64_dyn_d_un of
          D_Val v     => return v
        | D_Ptr p     => fail0 "get_value_of_elf64_dyn_entry: FLAGS must be a Val"
        | D_Ignored i => fail0 "get_value_of_elf64_dyn_entry: FLAGS must be a Val"
      ) >>= (\ flags . 
        return (Flags (w2n flags)))
    else if tag = dt_encoding then
      if ~ shared_object then
        return Ignored
      else
        (case dyn.elf64_dyn_d_un of
            D_Val     v => fail0 "get_value_of_elf64_dyn_entry: PREINIT_ARRAY must be a PTR"
          | D_Ptr     p => return p
          | D_Ignored i => fail0 "get_value_of_elf64_dyn_entry: PREINIT_ARRAY must be a PTR"
        ) >>= (\ ptr . 
        return (Address ptr))
    else if tag = dt_preinit_arraysz then
      (case dyn.elf64_dyn_d_un of
          D_Val     v => return v
        | D_Ptr     p => fail0 "get_value_of_elf64_dyn_entry: PREINIT_ARRAYSZ must be a VAL"
        | D_Ignored i => fail0 "get_value_of_elf64_dyn_entry: PREINIT_ARRAYSZ must be a VAL"
      ) >>= (\ sz . 
      return (Checksum (w2n sz))) (** XXX: bug in readelf does not print this as a size! *)
    else if (tag >= dt_loproc) /\ (tag <= dt_hiproc) then
      proc_dyn dyn stab
    else if (tag >= dt_loos) /\ (tag <= dt_hios) then
      os_dyn dyn stab
    else if os_additional_ranges tag then
      os_dyn dyn stab
    else
      fail0 "get_value_of_elf64_dyn: unrecognised tag type"))`;

val _ = export_theory()

