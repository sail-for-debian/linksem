(* Generated by Lem from elf_interpreted_segment.lem. *)

Require Import Arith.
Require Import Bool.
Require Import List.
Require Import String.
Require Import Program.Wf.

Require Import coqharness.

Open Scope nat_scope.
Open Scope string_scope.

(** [elf_interpreted_segment] defines interpreted segments, i.e. the contents of
  * a program header table entry converted to more amenable types, and operations
  * built on top of them.
  *)

Require Import lem_basic_classes.
Require Export lem_basic_classes.

Require Import lem_bool.
Require Export lem_bool.

Require Import lem_num.
Require Export lem_num.

Require Import lem_string.
Require Export lem_string.


Require Import elf_types_native_uint.
Require Export elf_types_native_uint.


Require Import byte_sequence.
Require Export byte_sequence.

Require Import missing_pervasives.
Require Export missing_pervasives.

Require Import show.
Require Export show.


(** [elf32_interpreted_segment] represents an ELF32 interpreted segment, i.e. the
  * contents of an ELF program header table entry converted into more amenable
  * (infinite precision) types, for manipulation.
  * Invariant: the nth entry of the program header table corresponds to the nth
  * entry of the list of interpreted segments in an [elf32_file] record.  The
  * lengths of the two lists are exactly the same.
  *)
Record elf32_interpreted_segment : Type :=
  { elf32_segment_body  : byte_sequence         (** Body of the segment *)
   ; elf32_segment_type  : nat               (** Type of the segment *)
   ; elf32_segment_size  : nat               (** Size of the segment in bytes *)
   ; elf32_segment_memsz : nat               (** Size of the segment in memory in bytes *)
   ; elf32_segment_base  : nat               (** Base address of the segment *)
   ; elf32_segment_paddr : nat               (** Physical address of segment *)
   ; elf32_segment_align : nat               (** Alignment of the segment *)
   ; elf32_segment_offset : nat              (** Offset of the segment *)
   ; elf32_segment_flags : ((bool  * bool  * bool ) % type) (** READ, WRITE, EXECUTE flags. *)
   }.
Notation "{[ r 'with' 'elf32_segment_body' := e ]}" := ({| elf32_segment_body := e; elf32_segment_type := elf32_segment_type r; elf32_segment_size := elf32_segment_size r; elf32_segment_memsz := elf32_segment_memsz r; elf32_segment_base := elf32_segment_base r; elf32_segment_paddr := elf32_segment_paddr r; elf32_segment_align := elf32_segment_align r; elf32_segment_offset := elf32_segment_offset r; elf32_segment_flags := elf32_segment_flags r |}).
Notation "{[ r 'with' 'elf32_segment_type' := e ]}" := ({| elf32_segment_type := e; elf32_segment_body := elf32_segment_body r; elf32_segment_size := elf32_segment_size r; elf32_segment_memsz := elf32_segment_memsz r; elf32_segment_base := elf32_segment_base r; elf32_segment_paddr := elf32_segment_paddr r; elf32_segment_align := elf32_segment_align r; elf32_segment_offset := elf32_segment_offset r; elf32_segment_flags := elf32_segment_flags r |}).
Notation "{[ r 'with' 'elf32_segment_size' := e ]}" := ({| elf32_segment_size := e; elf32_segment_body := elf32_segment_body r; elf32_segment_type := elf32_segment_type r; elf32_segment_memsz := elf32_segment_memsz r; elf32_segment_base := elf32_segment_base r; elf32_segment_paddr := elf32_segment_paddr r; elf32_segment_align := elf32_segment_align r; elf32_segment_offset := elf32_segment_offset r; elf32_segment_flags := elf32_segment_flags r |}).
Notation "{[ r 'with' 'elf32_segment_memsz' := e ]}" := ({| elf32_segment_memsz := e; elf32_segment_body := elf32_segment_body r; elf32_segment_type := elf32_segment_type r; elf32_segment_size := elf32_segment_size r; elf32_segment_base := elf32_segment_base r; elf32_segment_paddr := elf32_segment_paddr r; elf32_segment_align := elf32_segment_align r; elf32_segment_offset := elf32_segment_offset r; elf32_segment_flags := elf32_segment_flags r |}).
Notation "{[ r 'with' 'elf32_segment_base' := e ]}" := ({| elf32_segment_base := e; elf32_segment_body := elf32_segment_body r; elf32_segment_type := elf32_segment_type r; elf32_segment_size := elf32_segment_size r; elf32_segment_memsz := elf32_segment_memsz r; elf32_segment_paddr := elf32_segment_paddr r; elf32_segment_align := elf32_segment_align r; elf32_segment_offset := elf32_segment_offset r; elf32_segment_flags := elf32_segment_flags r |}).
Notation "{[ r 'with' 'elf32_segment_paddr' := e ]}" := ({| elf32_segment_paddr := e; elf32_segment_body := elf32_segment_body r; elf32_segment_type := elf32_segment_type r; elf32_segment_size := elf32_segment_size r; elf32_segment_memsz := elf32_segment_memsz r; elf32_segment_base := elf32_segment_base r; elf32_segment_align := elf32_segment_align r; elf32_segment_offset := elf32_segment_offset r; elf32_segment_flags := elf32_segment_flags r |}).
Notation "{[ r 'with' 'elf32_segment_align' := e ]}" := ({| elf32_segment_align := e; elf32_segment_body := elf32_segment_body r; elf32_segment_type := elf32_segment_type r; elf32_segment_size := elf32_segment_size r; elf32_segment_memsz := elf32_segment_memsz r; elf32_segment_base := elf32_segment_base r; elf32_segment_paddr := elf32_segment_paddr r; elf32_segment_offset := elf32_segment_offset r; elf32_segment_flags := elf32_segment_flags r |}).
Notation "{[ r 'with' 'elf32_segment_offset' := e ]}" := ({| elf32_segment_offset := e; elf32_segment_body := elf32_segment_body r; elf32_segment_type := elf32_segment_type r; elf32_segment_size := elf32_segment_size r; elf32_segment_memsz := elf32_segment_memsz r; elf32_segment_base := elf32_segment_base r; elf32_segment_paddr := elf32_segment_paddr r; elf32_segment_align := elf32_segment_align r; elf32_segment_flags := elf32_segment_flags r |}).
Notation "{[ r 'with' 'elf32_segment_flags' := e ]}" := ({| elf32_segment_flags := e; elf32_segment_body := elf32_segment_body r; elf32_segment_type := elf32_segment_type r; elf32_segment_size := elf32_segment_size r; elf32_segment_memsz := elf32_segment_memsz r; elf32_segment_base := elf32_segment_base r; elf32_segment_paddr := elf32_segment_paddr r; elf32_segment_align := elf32_segment_align r; elf32_segment_offset := elf32_segment_offset r |}).
Definition elf32_interpreted_segment_default: elf32_interpreted_segment  := {| elf32_segment_body := byte_sequence_default; elf32_segment_type := nat_default; elf32_segment_size := nat_default; elf32_segment_memsz := nat_default; elf32_segment_base := nat_default; elf32_segment_paddr := nat_default; elf32_segment_align := nat_default; elf32_segment_offset := nat_default; elf32_segment_flags := (bool_default, bool_default, bool_default) |}.

(** [elf64_interpreted_segment] represents an ELF64 interpreted segment, i.e. the
  * contents of an ELF program header table entry converted into more amenable
  * (infinite precision) types, for manipulation.
  * Invariant: the nth entry of the program header table corresponds to the nth
  * entry of the list of interpreted segments in an [elf64_file] record.  The
  * lengths of the two lists are exactly the same.
  *)
Record elf64_interpreted_segment : Type :=
  { elf64_segment_body  : byte_sequence         (** Body of the segment *)
   ; elf64_segment_type  : nat               (** Type of the segment *)
   ; elf64_segment_size  : nat               (** Size of the segment in bytes *)
   ; elf64_segment_memsz : nat               (** Size of the segment in memory in bytes *)
   ; elf64_segment_base  : nat               (** Base address of the segment *)
   ; elf64_segment_paddr : nat               (** Physical address of segment *)
   ; elf64_segment_align : nat               (** Alignment of the segment *)
   ; elf64_segment_offset : nat              (** Offset of the segment *)
   ; elf64_segment_flags : ((bool  * bool  * bool ) % type) (** READ, WRITE, EXECUTE flags. *)
   }.
Notation "{[ r 'with' 'elf64_segment_body' := e ]}" := ({| elf64_segment_body := e; elf64_segment_type := elf64_segment_type r; elf64_segment_size := elf64_segment_size r; elf64_segment_memsz := elf64_segment_memsz r; elf64_segment_base := elf64_segment_base r; elf64_segment_paddr := elf64_segment_paddr r; elf64_segment_align := elf64_segment_align r; elf64_segment_offset := elf64_segment_offset r; elf64_segment_flags := elf64_segment_flags r |}).
Notation "{[ r 'with' 'elf64_segment_type' := e ]}" := ({| elf64_segment_type := e; elf64_segment_body := elf64_segment_body r; elf64_segment_size := elf64_segment_size r; elf64_segment_memsz := elf64_segment_memsz r; elf64_segment_base := elf64_segment_base r; elf64_segment_paddr := elf64_segment_paddr r; elf64_segment_align := elf64_segment_align r; elf64_segment_offset := elf64_segment_offset r; elf64_segment_flags := elf64_segment_flags r |}).
Notation "{[ r 'with' 'elf64_segment_size' := e ]}" := ({| elf64_segment_size := e; elf64_segment_body := elf64_segment_body r; elf64_segment_type := elf64_segment_type r; elf64_segment_memsz := elf64_segment_memsz r; elf64_segment_base := elf64_segment_base r; elf64_segment_paddr := elf64_segment_paddr r; elf64_segment_align := elf64_segment_align r; elf64_segment_offset := elf64_segment_offset r; elf64_segment_flags := elf64_segment_flags r |}).
Notation "{[ r 'with' 'elf64_segment_memsz' := e ]}" := ({| elf64_segment_memsz := e; elf64_segment_body := elf64_segment_body r; elf64_segment_type := elf64_segment_type r; elf64_segment_size := elf64_segment_size r; elf64_segment_base := elf64_segment_base r; elf64_segment_paddr := elf64_segment_paddr r; elf64_segment_align := elf64_segment_align r; elf64_segment_offset := elf64_segment_offset r; elf64_segment_flags := elf64_segment_flags r |}).
Notation "{[ r 'with' 'elf64_segment_base' := e ]}" := ({| elf64_segment_base := e; elf64_segment_body := elf64_segment_body r; elf64_segment_type := elf64_segment_type r; elf64_segment_size := elf64_segment_size r; elf64_segment_memsz := elf64_segment_memsz r; elf64_segment_paddr := elf64_segment_paddr r; elf64_segment_align := elf64_segment_align r; elf64_segment_offset := elf64_segment_offset r; elf64_segment_flags := elf64_segment_flags r |}).
Notation "{[ r 'with' 'elf64_segment_paddr' := e ]}" := ({| elf64_segment_paddr := e; elf64_segment_body := elf64_segment_body r; elf64_segment_type := elf64_segment_type r; elf64_segment_size := elf64_segment_size r; elf64_segment_memsz := elf64_segment_memsz r; elf64_segment_base := elf64_segment_base r; elf64_segment_align := elf64_segment_align r; elf64_segment_offset := elf64_segment_offset r; elf64_segment_flags := elf64_segment_flags r |}).
Notation "{[ r 'with' 'elf64_segment_align' := e ]}" := ({| elf64_segment_align := e; elf64_segment_body := elf64_segment_body r; elf64_segment_type := elf64_segment_type r; elf64_segment_size := elf64_segment_size r; elf64_segment_memsz := elf64_segment_memsz r; elf64_segment_base := elf64_segment_base r; elf64_segment_paddr := elf64_segment_paddr r; elf64_segment_offset := elf64_segment_offset r; elf64_segment_flags := elf64_segment_flags r |}).
Notation "{[ r 'with' 'elf64_segment_offset' := e ]}" := ({| elf64_segment_offset := e; elf64_segment_body := elf64_segment_body r; elf64_segment_type := elf64_segment_type r; elf64_segment_size := elf64_segment_size r; elf64_segment_memsz := elf64_segment_memsz r; elf64_segment_base := elf64_segment_base r; elf64_segment_paddr := elf64_segment_paddr r; elf64_segment_align := elf64_segment_align r; elf64_segment_flags := elf64_segment_flags r |}).
Notation "{[ r 'with' 'elf64_segment_flags' := e ]}" := ({| elf64_segment_flags := e; elf64_segment_body := elf64_segment_body r; elf64_segment_type := elf64_segment_type r; elf64_segment_size := elf64_segment_size r; elf64_segment_memsz := elf64_segment_memsz r; elf64_segment_base := elf64_segment_base r; elf64_segment_paddr := elf64_segment_paddr r; elf64_segment_align := elf64_segment_align r; elf64_segment_offset := elf64_segment_offset r |}).
Definition elf64_interpreted_segment_default: elf64_interpreted_segment  := {| elf64_segment_body := byte_sequence_default; elf64_segment_type := nat_default; elf64_segment_size := nat_default; elf64_segment_memsz := nat_default; elf64_segment_base := nat_default; elf64_segment_paddr := nat_default; elf64_segment_align := nat_default; elf64_segment_offset := nat_default; elf64_segment_flags := (bool_default, bool_default, bool_default) |}.
(* [?]: removed value specification. *)

Definition compare_elf64_interpreted_segment  (s1 : elf64_interpreted_segment ) (s2 : elf64_interpreted_segment )  : ordering :=   
 (tripleCompare compare_byte_sequence (lem_list.lexicographicCompareBy (genericCompare nat_ltb beq_nat)) (lem_list.lexicographicCompareBy (genericCompare nat_ltb beq_nat)) 
    ((elf64_segment_bodys1),
    [(elf64_segment_types1)  ;(elf64_segment_size
     s1)  ;(elf64_segment_memsz
     s1) ;(elf64_segment_base
     s1)  ;(elf64_segment_paddr
     s1) ;(elf64_segment_align
     s1) ;(elf64_segment_offset
     s1)], match ((elf64_segment_flags s1)) with (f1,  f2,  f3) =>
   List.map natural_of_bool [f1; f2; f3] end)
    ((elf64_segment_bodys2),
    [(elf64_segment_types2)  ;(elf64_segment_size
     s2)  ;(elf64_segment_memsz
     s2) ;(elf64_segment_base
     s2)  ;(elf64_segment_paddr
     s2) ;(elf64_segment_align
     s2) ;(elf64_segment_offset
     s2)], match ((elf64_segment_flags s2)) with (f1,  f2,  f3) =>
   List.map natural_of_bool [f1; f2; f3] end)).

Instance x70_Ord : Ord elf64_interpreted_segment := {
     compare  :=  compare_elf64_interpreted_segment;
     isLess  :=  fun  f1 => (fun  f2 => ( (ordering_equal (compare_elf64_interpreted_segment f1 f2) LT)));
     isLessEqual  :=  fun  f1 => (fun  f2 => let result := compare_elf64_interpreted_segment f1 f2 in (ordering_equal result LT) || (ordering_equal result EQ));
     isGreater  :=  fun  f1 => (fun  f2 => ( (ordering_equal (compare_elf64_interpreted_segment f1 f2) GT)));
     isGreaterEqual  :=  fun  f1 => (fun  f2 => let result := compare_elf64_interpreted_segment f1 f2 in (ordering_equal result GT) || (ordering_equal result EQ))
}.


Definition elf32_interpreted_segments : Type :=  list  elf32_interpreted_segment .
Definition elf32_interpreted_segments_default: elf32_interpreted_segments  := DAEMON.
Definition elf64_interpreted_segments : Type :=  list  elf64_interpreted_segment .
Definition elf64_interpreted_segments_default: elf64_interpreted_segments  := DAEMON.
(* [?]: removed value specification. *)

Definition elf32_interpret_program_header_flags  (flags : elf32_word )  : (bool *bool *bool ) % type:= 
  let zero := elf32_word_of_nat( 0) in
  let one  := elf32_word_of_nat( 1) in
  let two  := elf32_word_of_nat( 2) in
  let four := elf32_word_of_nat( 4) in
    (negb ( elf32_word_equal(elf32_word_land flags one) zero),
      negb ( elf32_word_equal(elf32_word_land flags two) zero),
      negb ( elf32_word_equal(elf32_word_land flags four) zero)).
(* [?]: removed value specification. *)

Definition elf64_interpret_program_header_flags  (flags : elf64_word )  : (bool *bool *bool ) % type:= 
  let zero := elf64_word_of_nat( 0) in
  let one  := elf64_word_of_nat( 1) in
  let two  := elf64_word_of_nat( 2) in
  let four := elf64_word_of_nat( 4) in
    (negb ( elf64_word_equal(elf64_word_land flags one) zero),
      negb ( elf64_word_equal(elf64_word_land flags two) zero),
      negb ( elf64_word_equal(elf64_word_land flags four) zero)).
(* [?]: removed value specification. *)

(* [?]: removed value specification. *)

(* [?]: removed value specification. *)

