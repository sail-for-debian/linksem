(* Generated by Lem from gnu_extensions/gnu_ext_symbol_versioning.lem. *)

Require Import Arith.
Require Import Bool.
Require Import List.
Require Import String.
Require Import Program.Wf.

Require Import coqharness.

Open Scope nat_scope.
Open Scope string_scope.

(** The [gnu_ext_symbol_versioning] defines constants, types and functions
  * relating to the GNU symbol versioning extensions (i.e. contents of
  * GNU_VERSYM sections).
  *
  * TODO: work out what is going on with symbol versioning.  The specification
  * is completely opaque.
  *)

Require Import lem_basic_classes.
Require Export lem_basic_classes.

Require Import lem_bool.
Require Export lem_bool.

Require Import lem_list.
Require Export lem_list.

Require Import lem_maybe.
Require Export lem_maybe.

Require Import lem_num.
Require Export lem_num.

Require Import lem_string.
Require Export lem_string.


Require Import byte_sequence.
Require Export byte_sequence.

Require Import endianness.
Require Export endianness.

Require Import error.
Require Export error.


Require Import elf_dynamic.
Require Export elf_dynamic.

Require Import elf_file.
Require Export elf_file.

Require Import elf_header.
Require Export elf_header.

Require Import elf_section_header_table.
Require Export elf_section_header_table.

Require Import elf_symbol_table.
Require Export elf_symbol_table.

Require Import elf_types_native_uint.
Require Export elf_types_native_uint.


Require Import missing_pervasives.
Require Export missing_pervasives.

Require Import show.
Require Export show.


Require Import gnu_ext_dynamic.
Require Export gnu_ext_dynamic.

Require Import gnu_ext_section_header_table.
Require Export gnu_ext_section_header_table.


(** [gnu_ext_elf32_symbol_version_table] is an array (linked list, here) of
  * [elf32_half] entries.
  *)
Definition gnu_ext_elf32_symbol_version_table : Type := 
  list  elf32_half .
Definition gnu_ext_elf32_symbol_version_table_default: gnu_ext_elf32_symbol_version_table  := DAEMON.
  
Definition gnu_ext_elf64_symbol_version_table : Type := 
  list  elf64_half .
Definition gnu_ext_elf64_symbol_version_table_default: gnu_ext_elf64_symbol_version_table  := DAEMON.
(* [?]: removed value specification. *)

Definition obtain_gnu_ext_elf32_symbol_version_table  (f1 : elf32_file ) (bs0 : byte_sequence )  : error (list (elf32_half )):= 
  let sht :=(elf32_file_section_header_table f1) in
  let endian := get_elf32_header_endianness(elf32_file_header f1) in
  let vers := List.filter (fun (ent : elf32_section_header_table_entry ) => elf32_word_equal(elf32_sh_type
    ent) (elf32_word_of_nat sht_gnu_versym)
  ) sht
  in
    match ( vers) with 
      | []    => return0 []
      | [ver] =>
        let off := nat_of_elf32_off(elf32_sh_offset  ver) in
        let siz := nat_of_elf32_word(elf32_sh_size ver) in
        let lnk := nat_of_elf32_word(elf32_sh_link ver) in
        get_elf32_symbol_table_by_index f1 lnk >>= (fun (symtab : list (elf32_symbol_table_entry )) =>
        let dlen :=  (List.length symtab) in
        byte_sequence.offset_and_cut off siz bs0         >>= (fun (ver : byte_sequence )      =>
        error.repeatM' dlen bs0 (read_elf32_half endian) >>= 
  (fun (p : (list (elf32_half )*byte_sequence ) % type) =>
     match ( (p) ) with ( (ver,  _)) => return0 ver end)))
      | _     => fail0 "obtain_gnu_ext_elf32_symbol_version_table: multiple sections of type .gnu_versym present in file"
    end.
(* [?]: removed value specification. *)

Definition obtain_gnu_ext_elf64_symbol_version_table  (endian : endianness ) (sht : list (elf64_section_header_table_entry )) (dynsym : list (elf64_symbol_table_entry )) (bs0 : byte_sequence )  : error (list (elf64_half )):= 
  let dlen :=  (List.length dynsym) in
    if beq_nat dlen( 0) then
      return0 []
    else
      let vers := List.filter (fun (ent : elf64_section_header_table_entry ) => elf64_word_equal(elf64_sh_type
          ent) (elf64_word_of_nat sht_gnu_versym)
        ) sht
      in
        match ( vers) with 
          | []    => return0 []
          | [ver] =>
            let off := nat_of_elf64_off(elf64_sh_offset   ver) in
            let siz := nat_of_elf64_xword(elf64_sh_size ver) in
            byte_sequence.offset_and_cut off siz bs0         >>= (fun (ver : byte_sequence )      =>
            error.repeatM' dlen bs0 (read_elf64_half endian) >>= 
  (fun (p : (list (elf64_half )*byte_sequence ) % type) =>
     match ( (p) ) with ( (ver,  _)) => return0 ver end))
          | _     => fail0 "obtain_gnu_ext_elf64_symbol_version_table: multiple sections of type .gnu_versym present in file"
        end.
  
Record gnu_ext_elf32_verdef : Type :=
  { gnu_ext_elf32_vd_version : elf32_half 
   ; gnu_ext_elf32_vd_flags   : elf32_half 
   ; gnu_ext_elf32_vd_ndx     : elf32_half 
   ; gnu_ext_elf32_vd_cnt     : elf32_half 
   ; gnu_ext_elf32_vd_hash    : elf32_word 
   ; gnu_ext_elf32_vd_aux     : elf32_word 
   ; gnu_ext_elf32_vd_next    : elf32_word 
   }.
Notation "{[ r 'with' 'gnu_ext_elf32_vd_version' := e ]}" := ({| gnu_ext_elf32_vd_version := e; gnu_ext_elf32_vd_flags := gnu_ext_elf32_vd_flags r; gnu_ext_elf32_vd_ndx := gnu_ext_elf32_vd_ndx r; gnu_ext_elf32_vd_cnt := gnu_ext_elf32_vd_cnt r; gnu_ext_elf32_vd_hash := gnu_ext_elf32_vd_hash r; gnu_ext_elf32_vd_aux := gnu_ext_elf32_vd_aux r; gnu_ext_elf32_vd_next := gnu_ext_elf32_vd_next r |}).
Notation "{[ r 'with' 'gnu_ext_elf32_vd_flags' := e ]}" := ({| gnu_ext_elf32_vd_flags := e; gnu_ext_elf32_vd_version := gnu_ext_elf32_vd_version r; gnu_ext_elf32_vd_ndx := gnu_ext_elf32_vd_ndx r; gnu_ext_elf32_vd_cnt := gnu_ext_elf32_vd_cnt r; gnu_ext_elf32_vd_hash := gnu_ext_elf32_vd_hash r; gnu_ext_elf32_vd_aux := gnu_ext_elf32_vd_aux r; gnu_ext_elf32_vd_next := gnu_ext_elf32_vd_next r |}).
Notation "{[ r 'with' 'gnu_ext_elf32_vd_ndx' := e ]}" := ({| gnu_ext_elf32_vd_ndx := e; gnu_ext_elf32_vd_version := gnu_ext_elf32_vd_version r; gnu_ext_elf32_vd_flags := gnu_ext_elf32_vd_flags r; gnu_ext_elf32_vd_cnt := gnu_ext_elf32_vd_cnt r; gnu_ext_elf32_vd_hash := gnu_ext_elf32_vd_hash r; gnu_ext_elf32_vd_aux := gnu_ext_elf32_vd_aux r; gnu_ext_elf32_vd_next := gnu_ext_elf32_vd_next r |}).
Notation "{[ r 'with' 'gnu_ext_elf32_vd_cnt' := e ]}" := ({| gnu_ext_elf32_vd_cnt := e; gnu_ext_elf32_vd_version := gnu_ext_elf32_vd_version r; gnu_ext_elf32_vd_flags := gnu_ext_elf32_vd_flags r; gnu_ext_elf32_vd_ndx := gnu_ext_elf32_vd_ndx r; gnu_ext_elf32_vd_hash := gnu_ext_elf32_vd_hash r; gnu_ext_elf32_vd_aux := gnu_ext_elf32_vd_aux r; gnu_ext_elf32_vd_next := gnu_ext_elf32_vd_next r |}).
Notation "{[ r 'with' 'gnu_ext_elf32_vd_hash' := e ]}" := ({| gnu_ext_elf32_vd_hash := e; gnu_ext_elf32_vd_version := gnu_ext_elf32_vd_version r; gnu_ext_elf32_vd_flags := gnu_ext_elf32_vd_flags r; gnu_ext_elf32_vd_ndx := gnu_ext_elf32_vd_ndx r; gnu_ext_elf32_vd_cnt := gnu_ext_elf32_vd_cnt r; gnu_ext_elf32_vd_aux := gnu_ext_elf32_vd_aux r; gnu_ext_elf32_vd_next := gnu_ext_elf32_vd_next r |}).
Notation "{[ r 'with' 'gnu_ext_elf32_vd_aux' := e ]}" := ({| gnu_ext_elf32_vd_aux := e; gnu_ext_elf32_vd_version := gnu_ext_elf32_vd_version r; gnu_ext_elf32_vd_flags := gnu_ext_elf32_vd_flags r; gnu_ext_elf32_vd_ndx := gnu_ext_elf32_vd_ndx r; gnu_ext_elf32_vd_cnt := gnu_ext_elf32_vd_cnt r; gnu_ext_elf32_vd_hash := gnu_ext_elf32_vd_hash r; gnu_ext_elf32_vd_next := gnu_ext_elf32_vd_next r |}).
Notation "{[ r 'with' 'gnu_ext_elf32_vd_next' := e ]}" := ({| gnu_ext_elf32_vd_next := e; gnu_ext_elf32_vd_version := gnu_ext_elf32_vd_version r; gnu_ext_elf32_vd_flags := gnu_ext_elf32_vd_flags r; gnu_ext_elf32_vd_ndx := gnu_ext_elf32_vd_ndx r; gnu_ext_elf32_vd_cnt := gnu_ext_elf32_vd_cnt r; gnu_ext_elf32_vd_hash := gnu_ext_elf32_vd_hash r; gnu_ext_elf32_vd_aux := gnu_ext_elf32_vd_aux r |}).
Definition gnu_ext_elf32_verdef_default: gnu_ext_elf32_verdef  := {| gnu_ext_elf32_vd_version := elf32_half_default; gnu_ext_elf32_vd_flags := elf32_half_default; gnu_ext_elf32_vd_ndx := elf32_half_default; gnu_ext_elf32_vd_cnt := elf32_half_default; gnu_ext_elf32_vd_hash := elf32_word_default; gnu_ext_elf32_vd_aux := elf32_word_default; gnu_ext_elf32_vd_next := elf32_word_default |}.
   
Record gnu_ext_elf64_verdef : Type :=
  { gnu_ext_elf64_vd_version : elf64_half 
   ; gnu_ext_elf64_vd_flags   : elf64_half 
   ; gnu_ext_elf64_vd_ndx     : elf64_half 
   ; gnu_ext_elf64_vd_cnt     : elf64_half 
   ; gnu_ext_elf64_vd_hash    : elf64_word 
   ; gnu_ext_elf64_vd_aux     : elf64_word 
   ; gnu_ext_elf64_vd_next    : elf64_word 
   }.
Notation "{[ r 'with' 'gnu_ext_elf64_vd_version' := e ]}" := ({| gnu_ext_elf64_vd_version := e; gnu_ext_elf64_vd_flags := gnu_ext_elf64_vd_flags r; gnu_ext_elf64_vd_ndx := gnu_ext_elf64_vd_ndx r; gnu_ext_elf64_vd_cnt := gnu_ext_elf64_vd_cnt r; gnu_ext_elf64_vd_hash := gnu_ext_elf64_vd_hash r; gnu_ext_elf64_vd_aux := gnu_ext_elf64_vd_aux r; gnu_ext_elf64_vd_next := gnu_ext_elf64_vd_next r |}).
Notation "{[ r 'with' 'gnu_ext_elf64_vd_flags' := e ]}" := ({| gnu_ext_elf64_vd_flags := e; gnu_ext_elf64_vd_version := gnu_ext_elf64_vd_version r; gnu_ext_elf64_vd_ndx := gnu_ext_elf64_vd_ndx r; gnu_ext_elf64_vd_cnt := gnu_ext_elf64_vd_cnt r; gnu_ext_elf64_vd_hash := gnu_ext_elf64_vd_hash r; gnu_ext_elf64_vd_aux := gnu_ext_elf64_vd_aux r; gnu_ext_elf64_vd_next := gnu_ext_elf64_vd_next r |}).
Notation "{[ r 'with' 'gnu_ext_elf64_vd_ndx' := e ]}" := ({| gnu_ext_elf64_vd_ndx := e; gnu_ext_elf64_vd_version := gnu_ext_elf64_vd_version r; gnu_ext_elf64_vd_flags := gnu_ext_elf64_vd_flags r; gnu_ext_elf64_vd_cnt := gnu_ext_elf64_vd_cnt r; gnu_ext_elf64_vd_hash := gnu_ext_elf64_vd_hash r; gnu_ext_elf64_vd_aux := gnu_ext_elf64_vd_aux r; gnu_ext_elf64_vd_next := gnu_ext_elf64_vd_next r |}).
Notation "{[ r 'with' 'gnu_ext_elf64_vd_cnt' := e ]}" := ({| gnu_ext_elf64_vd_cnt := e; gnu_ext_elf64_vd_version := gnu_ext_elf64_vd_version r; gnu_ext_elf64_vd_flags := gnu_ext_elf64_vd_flags r; gnu_ext_elf64_vd_ndx := gnu_ext_elf64_vd_ndx r; gnu_ext_elf64_vd_hash := gnu_ext_elf64_vd_hash r; gnu_ext_elf64_vd_aux := gnu_ext_elf64_vd_aux r; gnu_ext_elf64_vd_next := gnu_ext_elf64_vd_next r |}).
Notation "{[ r 'with' 'gnu_ext_elf64_vd_hash' := e ]}" := ({| gnu_ext_elf64_vd_hash := e; gnu_ext_elf64_vd_version := gnu_ext_elf64_vd_version r; gnu_ext_elf64_vd_flags := gnu_ext_elf64_vd_flags r; gnu_ext_elf64_vd_ndx := gnu_ext_elf64_vd_ndx r; gnu_ext_elf64_vd_cnt := gnu_ext_elf64_vd_cnt r; gnu_ext_elf64_vd_aux := gnu_ext_elf64_vd_aux r; gnu_ext_elf64_vd_next := gnu_ext_elf64_vd_next r |}).
Notation "{[ r 'with' 'gnu_ext_elf64_vd_aux' := e ]}" := ({| gnu_ext_elf64_vd_aux := e; gnu_ext_elf64_vd_version := gnu_ext_elf64_vd_version r; gnu_ext_elf64_vd_flags := gnu_ext_elf64_vd_flags r; gnu_ext_elf64_vd_ndx := gnu_ext_elf64_vd_ndx r; gnu_ext_elf64_vd_cnt := gnu_ext_elf64_vd_cnt r; gnu_ext_elf64_vd_hash := gnu_ext_elf64_vd_hash r; gnu_ext_elf64_vd_next := gnu_ext_elf64_vd_next r |}).
Notation "{[ r 'with' 'gnu_ext_elf64_vd_next' := e ]}" := ({| gnu_ext_elf64_vd_next := e; gnu_ext_elf64_vd_version := gnu_ext_elf64_vd_version r; gnu_ext_elf64_vd_flags := gnu_ext_elf64_vd_flags r; gnu_ext_elf64_vd_ndx := gnu_ext_elf64_vd_ndx r; gnu_ext_elf64_vd_cnt := gnu_ext_elf64_vd_cnt r; gnu_ext_elf64_vd_hash := gnu_ext_elf64_vd_hash r; gnu_ext_elf64_vd_aux := gnu_ext_elf64_vd_aux r |}).
Definition gnu_ext_elf64_verdef_default: gnu_ext_elf64_verdef  := {| gnu_ext_elf64_vd_version := elf64_half_default; gnu_ext_elf64_vd_flags := elf64_half_default; gnu_ext_elf64_vd_ndx := elf64_half_default; gnu_ext_elf64_vd_cnt := elf64_half_default; gnu_ext_elf64_vd_hash := elf64_word_default; gnu_ext_elf64_vd_aux := elf64_word_default; gnu_ext_elf64_vd_next := elf64_word_default |}.
(* [?]: removed value specification. *)

(* [?]: removed value specification. *)

(* [?]: removed value specification. *)

Definition read_gnu_ext_elf32_verdef  (endian : endianness ) (bs0 : byte_sequence )  : error ((gnu_ext_elf32_verdef *byte_sequence ) % type):= 
  read_elf32_half endian bs0 >>= 
  (fun (p : (elf32_half *byte_sequence ) % type) =>
     match ( (p) ) with ( (ver,  bs0)) =>
       read_elf32_half endian bs0 >>=
       (fun (p : (elf32_half *byte_sequence ) % type) =>
          match ( (p) ) with ( (flg,  bs0)) =>
            read_elf32_half endian bs0 >>=
            (fun (p : (elf32_half *byte_sequence ) % type) =>
               match ( (p) ) with ( (ndx,  bs0)) =>
                 read_elf32_half endian bs0 >>=
                 (fun (p : (elf32_half *byte_sequence ) % type) =>
                    match ( (p) ) with ( (cnt,  bs0)) =>
                      read_elf32_word endian bs0 >>=
                      (fun (p : (elf32_word *byte_sequence ) % type) =>
                         match ( (p) ) with ( (hsh,  bs0)) =>
                           read_elf32_word endian bs0 >>=
                           (fun (p : (elf32_word *byte_sequence ) % type) =>
                              match ( (p) ) with ( (aux,  bs0)) =>
                                read_elf32_word endian bs0 >>=
                                (fun (p : (elf32_word *byte_sequence ) % type) =>
                                   match ( (p) ) with ( (nxt,  bs0)) =>
                                     return0
                                       ({|gnu_ext_elf32_vd_version := ver;gnu_ext_elf32_vd_flags := flg;gnu_ext_elf32_vd_ndx := ndx;gnu_ext_elf32_vd_cnt := cnt;gnu_ext_elf32_vd_hash := hsh;gnu_ext_elf32_vd_aux := aux;gnu_ext_elf32_vd_next := nxt |}, bs0)
                                   end) end) end) end) end) end) end).
(* [?]: removed value specification. *)

Definition read_gnu_ext_elf64_verdef  (endian : endianness ) (bs0 : byte_sequence )  : error ((gnu_ext_elf64_verdef *byte_sequence ) % type):= 
  read_elf64_half endian bs0 >>= 
  (fun (p : (elf64_half *byte_sequence ) % type) =>
     match ( (p) ) with ( (ver,  bs0)) =>
       read_elf64_half endian bs0 >>=
       (fun (p : (elf64_half *byte_sequence ) % type) =>
          match ( (p) ) with ( (flg,  bs0)) =>
            read_elf64_half endian bs0 >>=
            (fun (p : (elf64_half *byte_sequence ) % type) =>
               match ( (p) ) with ( (ndx,  bs0)) =>
                 read_elf64_half endian bs0 >>=
                 (fun (p : (elf64_half *byte_sequence ) % type) =>
                    match ( (p) ) with ( (cnt,  bs0)) =>
                      read_elf64_word endian bs0 >>=
                      (fun (p : (elf64_word *byte_sequence ) % type) =>
                         match ( (p) ) with ( (hsh,  bs0)) =>
                           read_elf64_word endian bs0 >>=
                           (fun (p : (elf64_word *byte_sequence ) % type) =>
                              match ( (p) ) with ( (aux,  bs0)) =>
                                read_elf64_word endian bs0 >>=
                                (fun (p : (elf64_word *byte_sequence ) % type) =>
                                   match ( (p) ) with ( (nxt,  bs0)) =>
                                     return0
                                       ({|gnu_ext_elf64_vd_version := ver;gnu_ext_elf64_vd_flags := flg;gnu_ext_elf64_vd_ndx := ndx;gnu_ext_elf64_vd_cnt := cnt;gnu_ext_elf64_vd_hash := hsh;gnu_ext_elf64_vd_aux := aux;gnu_ext_elf64_vd_next := nxt |}, bs0)
                                   end) end) end) end) end) end) end).
(* [?]: removed value specification. *)

Definition gnu_ext_elf32_verdef_size   : nat :=  160.
(* [?]: removed value specification. *)

Definition gnu_ext_elf64_verdef_size   : nat :=  256.
   
Record gnu_ext_elf32_veraux : Type :=
  { gnu_ext_elf32_vda_name : elf32_word 
   ; gnu_ext_elf32_vda_next : elf32_word 
   }.
Notation "{[ r 'with' 'gnu_ext_elf32_vda_name' := e ]}" := ({| gnu_ext_elf32_vda_name := e; gnu_ext_elf32_vda_next := gnu_ext_elf32_vda_next r |}).
Notation "{[ r 'with' 'gnu_ext_elf32_vda_next' := e ]}" := ({| gnu_ext_elf32_vda_next := e; gnu_ext_elf32_vda_name := gnu_ext_elf32_vda_name r |}).
Definition gnu_ext_elf32_veraux_default: gnu_ext_elf32_veraux  := {| gnu_ext_elf32_vda_name := elf32_word_default; gnu_ext_elf32_vda_next := elf32_word_default |}.
   
Record gnu_ext_elf64_veraux : Type :=
  { gnu_ext_elf64_vda_name : elf64_word 
   ; gnu_ext_elf64_vda_next : elf64_word 
   }.
Notation "{[ r 'with' 'gnu_ext_elf64_vda_name' := e ]}" := ({| gnu_ext_elf64_vda_name := e; gnu_ext_elf64_vda_next := gnu_ext_elf64_vda_next r |}).
Notation "{[ r 'with' 'gnu_ext_elf64_vda_next' := e ]}" := ({| gnu_ext_elf64_vda_next := e; gnu_ext_elf64_vda_name := gnu_ext_elf64_vda_name r |}).
Definition gnu_ext_elf64_veraux_default: gnu_ext_elf64_veraux  := {| gnu_ext_elf64_vda_name := elf64_word_default; gnu_ext_elf64_vda_next := elf64_word_default |}.
(* [?]: removed value specification. *)

Definition gnu_ext_elf32_veraux_size   : nat :=  64.
(* [?]: removed value specification. *)

Definition gnu_ext_elf64_veraux_size   : nat :=  128.
(* [?]: removed value specification. *)

Definition read_gnu_ext_elf32_veraux  (endian : endianness ) (bs0 : byte_sequence )  : error ((gnu_ext_elf32_veraux *byte_sequence ) % type):= 
  read_elf32_word endian bs0 >>= 
  (fun (p : (elf32_word *byte_sequence ) % type) =>
     match ( (p) ) with ( (nme,  bs0)) =>
       read_elf32_word endian bs0 >>=
       (fun (p : (elf32_word *byte_sequence ) % type) =>
          match ( (p) ) with ( (nxt,  bs0)) =>
            return0
              ({|gnu_ext_elf32_vda_name := nme;gnu_ext_elf32_vda_next := nxt |}, bs0)
          end) end).
(* [?]: removed value specification. *)

Definition read_gnu_ext_elf64_veraux  (endian : endianness ) (bs0 : byte_sequence )  : error ((gnu_ext_elf64_veraux *byte_sequence ) % type):= 
  read_elf64_word endian bs0 >>= 
  (fun (p : (elf64_word *byte_sequence ) % type) =>
     match ( (p) ) with ( (nme,  bs0)) =>
       read_elf64_word endian bs0 >>=
       (fun (p : (elf64_word *byte_sequence ) % type) =>
          match ( (p) ) with ( (nxt,  bs0)) =>
            return0
              ({|gnu_ext_elf64_vda_name := nme;gnu_ext_elf64_vda_next := nxt |}, bs0)
          end) end).
   
Record gnu_ext_elf32_verneed : Type :=
  { gnu_ext_elf32_vn_version : elf32_half 
   ; gnu_ext_elf32_vn_cnt     : elf32_half 
   ; gnu_ext_elf32_vn_file    : elf32_word 
   ; gnu_ext_elf32_vn_aux     : elf32_word 
   ; gnu_ext_elf32_vn_next    : elf32_word 
   }.
Notation "{[ r 'with' 'gnu_ext_elf32_vn_version' := e ]}" := ({| gnu_ext_elf32_vn_version := e; gnu_ext_elf32_vn_cnt := gnu_ext_elf32_vn_cnt r; gnu_ext_elf32_vn_file := gnu_ext_elf32_vn_file r; gnu_ext_elf32_vn_aux := gnu_ext_elf32_vn_aux r; gnu_ext_elf32_vn_next := gnu_ext_elf32_vn_next r |}).
Notation "{[ r 'with' 'gnu_ext_elf32_vn_cnt' := e ]}" := ({| gnu_ext_elf32_vn_cnt := e; gnu_ext_elf32_vn_version := gnu_ext_elf32_vn_version r; gnu_ext_elf32_vn_file := gnu_ext_elf32_vn_file r; gnu_ext_elf32_vn_aux := gnu_ext_elf32_vn_aux r; gnu_ext_elf32_vn_next := gnu_ext_elf32_vn_next r |}).
Notation "{[ r 'with' 'gnu_ext_elf32_vn_file' := e ]}" := ({| gnu_ext_elf32_vn_file := e; gnu_ext_elf32_vn_version := gnu_ext_elf32_vn_version r; gnu_ext_elf32_vn_cnt := gnu_ext_elf32_vn_cnt r; gnu_ext_elf32_vn_aux := gnu_ext_elf32_vn_aux r; gnu_ext_elf32_vn_next := gnu_ext_elf32_vn_next r |}).
Notation "{[ r 'with' 'gnu_ext_elf32_vn_aux' := e ]}" := ({| gnu_ext_elf32_vn_aux := e; gnu_ext_elf32_vn_version := gnu_ext_elf32_vn_version r; gnu_ext_elf32_vn_cnt := gnu_ext_elf32_vn_cnt r; gnu_ext_elf32_vn_file := gnu_ext_elf32_vn_file r; gnu_ext_elf32_vn_next := gnu_ext_elf32_vn_next r |}).
Notation "{[ r 'with' 'gnu_ext_elf32_vn_next' := e ]}" := ({| gnu_ext_elf32_vn_next := e; gnu_ext_elf32_vn_version := gnu_ext_elf32_vn_version r; gnu_ext_elf32_vn_cnt := gnu_ext_elf32_vn_cnt r; gnu_ext_elf32_vn_file := gnu_ext_elf32_vn_file r; gnu_ext_elf32_vn_aux := gnu_ext_elf32_vn_aux r |}).
Definition gnu_ext_elf32_verneed_default: gnu_ext_elf32_verneed  := {| gnu_ext_elf32_vn_version := elf32_half_default; gnu_ext_elf32_vn_cnt := elf32_half_default; gnu_ext_elf32_vn_file := elf32_word_default; gnu_ext_elf32_vn_aux := elf32_word_default; gnu_ext_elf32_vn_next := elf32_word_default |}.
   
Record gnu_ext_elf64_verneed : Type :=
  { gnu_ext_elf64_vn_version : elf64_half 
   ; gnu_ext_elf64_vn_cnt     : elf64_half 
   ; gnu_ext_elf64_vn_file    : elf64_word 
   ; gnu_ext_elf64_vn_aux     : elf64_word 
   ; gnu_ext_elf64_vn_next    : elf64_word 
   }.
Notation "{[ r 'with' 'gnu_ext_elf64_vn_version' := e ]}" := ({| gnu_ext_elf64_vn_version := e; gnu_ext_elf64_vn_cnt := gnu_ext_elf64_vn_cnt r; gnu_ext_elf64_vn_file := gnu_ext_elf64_vn_file r; gnu_ext_elf64_vn_aux := gnu_ext_elf64_vn_aux r; gnu_ext_elf64_vn_next := gnu_ext_elf64_vn_next r |}).
Notation "{[ r 'with' 'gnu_ext_elf64_vn_cnt' := e ]}" := ({| gnu_ext_elf64_vn_cnt := e; gnu_ext_elf64_vn_version := gnu_ext_elf64_vn_version r; gnu_ext_elf64_vn_file := gnu_ext_elf64_vn_file r; gnu_ext_elf64_vn_aux := gnu_ext_elf64_vn_aux r; gnu_ext_elf64_vn_next := gnu_ext_elf64_vn_next r |}).
Notation "{[ r 'with' 'gnu_ext_elf64_vn_file' := e ]}" := ({| gnu_ext_elf64_vn_file := e; gnu_ext_elf64_vn_version := gnu_ext_elf64_vn_version r; gnu_ext_elf64_vn_cnt := gnu_ext_elf64_vn_cnt r; gnu_ext_elf64_vn_aux := gnu_ext_elf64_vn_aux r; gnu_ext_elf64_vn_next := gnu_ext_elf64_vn_next r |}).
Notation "{[ r 'with' 'gnu_ext_elf64_vn_aux' := e ]}" := ({| gnu_ext_elf64_vn_aux := e; gnu_ext_elf64_vn_version := gnu_ext_elf64_vn_version r; gnu_ext_elf64_vn_cnt := gnu_ext_elf64_vn_cnt r; gnu_ext_elf64_vn_file := gnu_ext_elf64_vn_file r; gnu_ext_elf64_vn_next := gnu_ext_elf64_vn_next r |}).
Notation "{[ r 'with' 'gnu_ext_elf64_vn_next' := e ]}" := ({| gnu_ext_elf64_vn_next := e; gnu_ext_elf64_vn_version := gnu_ext_elf64_vn_version r; gnu_ext_elf64_vn_cnt := gnu_ext_elf64_vn_cnt r; gnu_ext_elf64_vn_file := gnu_ext_elf64_vn_file r; gnu_ext_elf64_vn_aux := gnu_ext_elf64_vn_aux r |}).
Definition gnu_ext_elf64_verneed_default: gnu_ext_elf64_verneed  := {| gnu_ext_elf64_vn_version := elf64_half_default; gnu_ext_elf64_vn_cnt := elf64_half_default; gnu_ext_elf64_vn_file := elf64_word_default; gnu_ext_elf64_vn_aux := elf64_word_default; gnu_ext_elf64_vn_next := elf64_word_default |}.
(* [?]: removed value specification. *)

Definition gnu_ext_elf32_verneed_size   : nat :=  128.
(* [?]: removed value specification. *)

Definition gnu_ext_elf64_verneed_size   : nat :=  224.
(* [?]: removed value specification. *)

Definition read_gnu_ext_elf32_verneed  (endian : endianness ) (bs0 : byte_sequence )  : error ((gnu_ext_elf32_verneed *byte_sequence ) % type):= 
  read_elf32_half endian bs0 >>= 
  (fun (p : (elf32_half *byte_sequence ) % type) =>
     match ( (p) ) with ( (ver,  bs0)) =>
       read_elf32_half endian bs0 >>=
       (fun (p : (elf32_half *byte_sequence ) % type) =>
          match ( (p) ) with ( (cnt,  bs0)) =>
            read_elf32_word endian bs0 >>=
            (fun (p : (elf32_word *byte_sequence ) % type) =>
               match ( (p) ) with ( (fle,  bs0)) =>
                 read_elf32_word endian bs0 >>=
                 (fun (p : (elf32_word *byte_sequence ) % type) =>
                    match ( (p) ) with ( (aux,  bs0)) =>
                      read_elf32_word endian bs0 >>=
                      (fun (p : (elf32_word *byte_sequence ) % type) =>
                         match ( (p) ) with ( (nxt,  bs0)) =>
                           return0
                             ({|gnu_ext_elf32_vn_version := ver;gnu_ext_elf32_vn_cnt := cnt;gnu_ext_elf32_vn_file := fle;gnu_ext_elf32_vn_aux := aux;gnu_ext_elf32_vn_next := nxt |}, bs0)
                         end) end) end) end) end).
(* [?]: removed value specification. *)

Definition read_gnu_ext_elf64_verneed  (endian : endianness ) (bs0 : byte_sequence )  : error ((gnu_ext_elf64_verneed *byte_sequence ) % type):= 
  read_elf64_half endian bs0 >>= 
  (fun (p : (elf64_half *byte_sequence ) % type) =>
     match ( (p) ) with ( (ver,  bs0)) =>
       read_elf64_half endian bs0 >>=
       (fun (p : (elf64_half *byte_sequence ) % type) =>
          match ( (p) ) with ( (cnt,  bs0)) =>
            read_elf64_word endian bs0 >>=
            (fun (p : (elf64_word *byte_sequence ) % type) =>
               match ( (p) ) with ( (fle,  bs0)) =>
                 read_elf64_word endian bs0 >>=
                 (fun (p : (elf64_word *byte_sequence ) % type) =>
                    match ( (p) ) with ( (aux,  bs0)) =>
                      read_elf64_word endian bs0 >>=
                      (fun (p : (elf64_word *byte_sequence ) % type) =>
                         match ( (p) ) with ( (nxt,  bs0)) =>
                           return0
                             ({|gnu_ext_elf64_vn_version := ver;gnu_ext_elf64_vn_cnt := cnt;gnu_ext_elf64_vn_file := fle;gnu_ext_elf64_vn_aux := aux;gnu_ext_elf64_vn_next := nxt |}, bs0)
                         end) end) end) end) end).
   
Record gnu_ext_elf32_vernaux : Type :=
  { gnu_ext_elf32_vna_hash  : elf32_word 
   ; gnu_ext_elf32_vna_flags : elf32_half 
   ; gnu_ext_elf32_vna_other : elf32_half 
   ; gnu_ext_elf32_vna_name  : elf32_word 
   ; gnu_ext_elf32_vna_next  : elf32_word 
   }.
Notation "{[ r 'with' 'gnu_ext_elf32_vna_hash' := e ]}" := ({| gnu_ext_elf32_vna_hash := e; gnu_ext_elf32_vna_flags := gnu_ext_elf32_vna_flags r; gnu_ext_elf32_vna_other := gnu_ext_elf32_vna_other r; gnu_ext_elf32_vna_name := gnu_ext_elf32_vna_name r; gnu_ext_elf32_vna_next := gnu_ext_elf32_vna_next r |}).
Notation "{[ r 'with' 'gnu_ext_elf32_vna_flags' := e ]}" := ({| gnu_ext_elf32_vna_flags := e; gnu_ext_elf32_vna_hash := gnu_ext_elf32_vna_hash r; gnu_ext_elf32_vna_other := gnu_ext_elf32_vna_other r; gnu_ext_elf32_vna_name := gnu_ext_elf32_vna_name r; gnu_ext_elf32_vna_next := gnu_ext_elf32_vna_next r |}).
Notation "{[ r 'with' 'gnu_ext_elf32_vna_other' := e ]}" := ({| gnu_ext_elf32_vna_other := e; gnu_ext_elf32_vna_hash := gnu_ext_elf32_vna_hash r; gnu_ext_elf32_vna_flags := gnu_ext_elf32_vna_flags r; gnu_ext_elf32_vna_name := gnu_ext_elf32_vna_name r; gnu_ext_elf32_vna_next := gnu_ext_elf32_vna_next r |}).
Notation "{[ r 'with' 'gnu_ext_elf32_vna_name' := e ]}" := ({| gnu_ext_elf32_vna_name := e; gnu_ext_elf32_vna_hash := gnu_ext_elf32_vna_hash r; gnu_ext_elf32_vna_flags := gnu_ext_elf32_vna_flags r; gnu_ext_elf32_vna_other := gnu_ext_elf32_vna_other r; gnu_ext_elf32_vna_next := gnu_ext_elf32_vna_next r |}).
Notation "{[ r 'with' 'gnu_ext_elf32_vna_next' := e ]}" := ({| gnu_ext_elf32_vna_next := e; gnu_ext_elf32_vna_hash := gnu_ext_elf32_vna_hash r; gnu_ext_elf32_vna_flags := gnu_ext_elf32_vna_flags r; gnu_ext_elf32_vna_other := gnu_ext_elf32_vna_other r; gnu_ext_elf32_vna_name := gnu_ext_elf32_vna_name r |}).
Definition gnu_ext_elf32_vernaux_default: gnu_ext_elf32_vernaux  := {| gnu_ext_elf32_vna_hash := elf32_word_default; gnu_ext_elf32_vna_flags := elf32_half_default; gnu_ext_elf32_vna_other := elf32_half_default; gnu_ext_elf32_vna_name := elf32_word_default; gnu_ext_elf32_vna_next := elf32_word_default |}.
   
Record gnu_ext_elf64_vernaux : Type :=
  { gnu_ext_elf64_vna_hash  : elf64_word 
   ; gnu_ext_elf64_vna_flags : elf64_half 
   ; gnu_ext_elf64_vna_other : elf64_half 
   ; gnu_ext_elf64_vna_name  : elf64_word 
   ; gnu_ext_elf64_vna_next  : elf64_word 
   }.
Notation "{[ r 'with' 'gnu_ext_elf64_vna_hash' := e ]}" := ({| gnu_ext_elf64_vna_hash := e; gnu_ext_elf64_vna_flags := gnu_ext_elf64_vna_flags r; gnu_ext_elf64_vna_other := gnu_ext_elf64_vna_other r; gnu_ext_elf64_vna_name := gnu_ext_elf64_vna_name r; gnu_ext_elf64_vna_next := gnu_ext_elf64_vna_next r |}).
Notation "{[ r 'with' 'gnu_ext_elf64_vna_flags' := e ]}" := ({| gnu_ext_elf64_vna_flags := e; gnu_ext_elf64_vna_hash := gnu_ext_elf64_vna_hash r; gnu_ext_elf64_vna_other := gnu_ext_elf64_vna_other r; gnu_ext_elf64_vna_name := gnu_ext_elf64_vna_name r; gnu_ext_elf64_vna_next := gnu_ext_elf64_vna_next r |}).
Notation "{[ r 'with' 'gnu_ext_elf64_vna_other' := e ]}" := ({| gnu_ext_elf64_vna_other := e; gnu_ext_elf64_vna_hash := gnu_ext_elf64_vna_hash r; gnu_ext_elf64_vna_flags := gnu_ext_elf64_vna_flags r; gnu_ext_elf64_vna_name := gnu_ext_elf64_vna_name r; gnu_ext_elf64_vna_next := gnu_ext_elf64_vna_next r |}).
Notation "{[ r 'with' 'gnu_ext_elf64_vna_name' := e ]}" := ({| gnu_ext_elf64_vna_name := e; gnu_ext_elf64_vna_hash := gnu_ext_elf64_vna_hash r; gnu_ext_elf64_vna_flags := gnu_ext_elf64_vna_flags r; gnu_ext_elf64_vna_other := gnu_ext_elf64_vna_other r; gnu_ext_elf64_vna_next := gnu_ext_elf64_vna_next r |}).
Notation "{[ r 'with' 'gnu_ext_elf64_vna_next' := e ]}" := ({| gnu_ext_elf64_vna_next := e; gnu_ext_elf64_vna_hash := gnu_ext_elf64_vna_hash r; gnu_ext_elf64_vna_flags := gnu_ext_elf64_vna_flags r; gnu_ext_elf64_vna_other := gnu_ext_elf64_vna_other r; gnu_ext_elf64_vna_name := gnu_ext_elf64_vna_name r |}).
Definition gnu_ext_elf64_vernaux_default: gnu_ext_elf64_vernaux  := {| gnu_ext_elf64_vna_hash := elf64_word_default; gnu_ext_elf64_vna_flags := elf64_half_default; gnu_ext_elf64_vna_other := elf64_half_default; gnu_ext_elf64_vna_name := elf64_word_default; gnu_ext_elf64_vna_next := elf64_word_default |}.
(* [?]: removed value specification. *)

(* [?]: removed value specification. *)

(* [?]: removed value specification. *)

Definition gnu_ext_elf32_vernaux_size   : nat :=  16.
(* [?]: removed value specification. *)

Definition gnu_ext_elf64_vernaux_size   : nat :=  224.
(* [?]: removed value specification. *)

Definition read_gnu_ext_elf32_vernaux  (endian : endianness ) (bs0 : byte_sequence )  : error ((gnu_ext_elf32_vernaux *byte_sequence ) % type):= 
  read_elf32_word endian bs0 >>= 
  (fun (p : (elf32_word *byte_sequence ) % type) =>
     match ( (p) ) with ( (hsh,  bs0)) =>
       read_elf32_half endian bs0 >>=
       (fun (p : (elf32_half *byte_sequence ) % type) =>
          match ( (p) ) with ( (flg,  bs0)) =>
            read_elf32_half endian bs0 >>=
            (fun (p : (elf32_half *byte_sequence ) % type) =>
               match ( (p) ) with ( (otr,  bs0)) =>
                 read_elf32_word endian bs0 >>=
                 (fun (p : (elf32_word *byte_sequence ) % type) =>
                    match ( (p) ) with ( (nme,  bs0)) =>
                      read_elf32_word endian bs0 >>=
                      (fun (p : (elf32_word *byte_sequence ) % type) =>
                         match ( (p) ) with ( (nxt,  bs0)) =>
                           return0
                             ({|gnu_ext_elf32_vna_hash := hsh;gnu_ext_elf32_vna_flags := flg;gnu_ext_elf32_vna_other := otr;gnu_ext_elf32_vna_name := nme;gnu_ext_elf32_vna_next := nxt |}, bs0)
                         end) end) end) end) end).
(* [?]: removed value specification. *)

Definition read_gnu_ext_elf64_vernaux  (endian : endianness ) (bs0 : byte_sequence )  : error ((gnu_ext_elf64_vernaux *byte_sequence ) % type):= 
  read_elf64_word endian bs0 >>= 
  (fun (p : (elf64_word *byte_sequence ) % type) =>
     match ( (p) ) with ( (hsh,  bs0)) =>
       read_elf64_half endian bs0 >>=
       (fun (p : (elf64_half *byte_sequence ) % type) =>
          match ( (p) ) with ( (flg,  bs0)) =>
            read_elf64_half endian bs0 >>=
            (fun (p : (elf64_half *byte_sequence ) % type) =>
               match ( (p) ) with ( (otr,  bs0)) =>
                 read_elf64_word endian bs0 >>=
                 (fun (p : (elf64_word *byte_sequence ) % type) =>
                    match ( (p) ) with ( (nme,  bs0)) =>
                      read_elf64_word endian bs0 >>=
                      (fun (p : (elf64_word *byte_sequence ) % type) =>
                         match ( (p) ) with ( (nxt,  bs0)) =>
                           return0
                             ({|gnu_ext_elf64_vna_hash := hsh;gnu_ext_elf64_vna_flags := flg;gnu_ext_elf64_vna_other := otr;gnu_ext_elf64_vna_name := nme;gnu_ext_elf64_vna_next := nxt |}, bs0)
                         end) end) end) end) end).
