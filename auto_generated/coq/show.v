(* Generated by Lem from show.lem. *)

Require Import Arith.
Require Import Bool.
Require Import List.
Require Import String.
Require Import Program.Wf.

Require Import coqharness.

Open Scope nat_scope.
Open Scope string_scope.

(** [show.lem] exports the typeclass [Show] and associated functions for pretty
  * printing arbitrary values.
  *)

Require Import lem_function.
Require Export lem_function.

Require Import lem_list.
Require Export lem_list.

Require Import lem_maybe.
Require Export lem_maybe.

Require Import lem_num.
Require Export lem_num.

Require Import lem_string.
Require Export lem_string.

(* 

Class Show (a: Type): Type := {
  show: a -> string
}.
 *)
(* [?]: removed value specification. *)

(* 

Instance x9_Show : Show unit := {
   show  :=  string_of_unit
}.
 *)
(* [?]: removed value specification. *)

(* 

Instance x8_Show : Show bool := {
   show  :=  string_of_bool
}.
 *)
(* [?]: removed value specification. *)

(* 

Instance x7_Show : Show string := {
   show  :=  string_of_string
}.
 *)
(* [?]: removed value specification. *)

(* 

Instance x6_Show{a b: Type} `{Show a} `{Show b}: Show ((a * b) % type):= {
   show  :=  string_of_pair
}.
 *)
(* [?]: removed value specification. *)

(* 

Instance x5_Show{a b c: Type} `{Show a} `{Show b} `{Show c}: Show ((a * b * c) % type):= {
   show  :=  string_of_triple
}.
 *)
(* [?]: removed value specification. *)

(* 

Instance x4_Show{a b c d: Type} `{Show a} `{Show b} `{Show c} `{Show d}: Show ((a * b * c * d) % type):= {
   show  :=  string_of_quad
}.
 *)
(* [?]: removed value specification. *)

(* 

Instance x3_Show{a: Type} `{Show a}: Show (option  a ):= {
   show  :=  string_of_maybe
}.
 *)
(* [?]: removed value specification. *)

(* [?]: removed value specification. *)

(* 

Instance x2_Show : Show nat := {
	 show  :=  string_of_nat
}.
 *)
(* 

Instance x1_Show : Show nat := {
   show  :=  stringFromNatural
}.
 *)
(* [?]: removed value specification. *)

(* 

Instance x0_Show : Show Z := {
   show  :=  string_of_integer
}.
 *)
