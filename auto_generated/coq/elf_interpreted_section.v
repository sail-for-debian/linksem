(* Generated by Lem from elf_interpreted_section.lem. *)

Require Import Arith.
Require Import Bool.
Require Import List.
Require Import String.
Require Import Program.Wf.

Require Import coqharness.

Open Scope nat_scope.
Open Scope string_scope.

(** Module [elf_interpreted_section] provides a record of "interpreted" sections,
  * i.e. the data stored in the section header table converted to more amenable
  * infinite precision types, and operation on those records.
  *)

Require Import lem_basic_classes.
Require Export lem_basic_classes.

Require Import lem_bool.
Require Export lem_bool.

Require Import lem_list.
Require Export lem_list.

Require Import lem_maybe.
Require Export lem_maybe.

Require Import lem_num.
Require Export lem_num.

Require Import lem_string.
Require Export lem_string.


Require Import byte_sequence.
Require Export byte_sequence.

Require Import error.
Require Export error.

Require Import string_table.
Require Export string_table.


Require Import elf_types_native_uint.
Require Export elf_types_native_uint.

Require Import elf_section_header_table.
Require Export elf_section_header_table.


Require Import missing_pervasives.
Require Export missing_pervasives.

Require Import show.
Require Export show.


(** [elf32_interpreted_section] exactly mirrors the structure of a section header
  * table entry, barring the conversion of all fields to more amenable types.
  *)
Record elf32_interpreted_section : Type :=
  { elf32_section_name    : nat        (** Name of the section *)
   ; elf32_section_type    : nat        (** Type of the section *)
   ; elf32_section_flags   : nat        (** Flags associated with the section *)
   ; elf32_section_addr    : nat        (** Base address of the section in memory *)
   ; elf32_section_offset  : nat        (** Offset from beginning of file *)
   ; elf32_section_size    : nat        (** Section size in bytes *)
   ; elf32_section_link    : nat        (** Section header table index link *)
   ; elf32_section_info    : nat        (** Extra information, depends on section type *)
   ; elf32_section_align   : nat        (** Alignment constraints for section *)
   ; elf32_section_entsize : nat        (** Size of each entry in table, if section is one *)
   ; elf32_section_body    : byte_sequence  (** Body of section *)
   ; elf32_section_name_as_string : string  (** Name of the section, as a string; "" for no name (name = 0) *)
   }.
Notation "{[ r 'with' 'elf32_section_name' := e ]}" := ({| elf32_section_name := e; elf32_section_type := elf32_section_type r; elf32_section_flags := elf32_section_flags r; elf32_section_addr := elf32_section_addr r; elf32_section_offset := elf32_section_offset r; elf32_section_size := elf32_section_size r; elf32_section_link := elf32_section_link r; elf32_section_info := elf32_section_info r; elf32_section_align := elf32_section_align r; elf32_section_entsize := elf32_section_entsize r; elf32_section_body := elf32_section_body r; elf32_section_name_as_string := elf32_section_name_as_string r |}).
Notation "{[ r 'with' 'elf32_section_type' := e ]}" := ({| elf32_section_type := e; elf32_section_name := elf32_section_name r; elf32_section_flags := elf32_section_flags r; elf32_section_addr := elf32_section_addr r; elf32_section_offset := elf32_section_offset r; elf32_section_size := elf32_section_size r; elf32_section_link := elf32_section_link r; elf32_section_info := elf32_section_info r; elf32_section_align := elf32_section_align r; elf32_section_entsize := elf32_section_entsize r; elf32_section_body := elf32_section_body r; elf32_section_name_as_string := elf32_section_name_as_string r |}).
Notation "{[ r 'with' 'elf32_section_flags' := e ]}" := ({| elf32_section_flags := e; elf32_section_name := elf32_section_name r; elf32_section_type := elf32_section_type r; elf32_section_addr := elf32_section_addr r; elf32_section_offset := elf32_section_offset r; elf32_section_size := elf32_section_size r; elf32_section_link := elf32_section_link r; elf32_section_info := elf32_section_info r; elf32_section_align := elf32_section_align r; elf32_section_entsize := elf32_section_entsize r; elf32_section_body := elf32_section_body r; elf32_section_name_as_string := elf32_section_name_as_string r |}).
Notation "{[ r 'with' 'elf32_section_addr' := e ]}" := ({| elf32_section_addr := e; elf32_section_name := elf32_section_name r; elf32_section_type := elf32_section_type r; elf32_section_flags := elf32_section_flags r; elf32_section_offset := elf32_section_offset r; elf32_section_size := elf32_section_size r; elf32_section_link := elf32_section_link r; elf32_section_info := elf32_section_info r; elf32_section_align := elf32_section_align r; elf32_section_entsize := elf32_section_entsize r; elf32_section_body := elf32_section_body r; elf32_section_name_as_string := elf32_section_name_as_string r |}).
Notation "{[ r 'with' 'elf32_section_offset' := e ]}" := ({| elf32_section_offset := e; elf32_section_name := elf32_section_name r; elf32_section_type := elf32_section_type r; elf32_section_flags := elf32_section_flags r; elf32_section_addr := elf32_section_addr r; elf32_section_size := elf32_section_size r; elf32_section_link := elf32_section_link r; elf32_section_info := elf32_section_info r; elf32_section_align := elf32_section_align r; elf32_section_entsize := elf32_section_entsize r; elf32_section_body := elf32_section_body r; elf32_section_name_as_string := elf32_section_name_as_string r |}).
Notation "{[ r 'with' 'elf32_section_size' := e ]}" := ({| elf32_section_size := e; elf32_section_name := elf32_section_name r; elf32_section_type := elf32_section_type r; elf32_section_flags := elf32_section_flags r; elf32_section_addr := elf32_section_addr r; elf32_section_offset := elf32_section_offset r; elf32_section_link := elf32_section_link r; elf32_section_info := elf32_section_info r; elf32_section_align := elf32_section_align r; elf32_section_entsize := elf32_section_entsize r; elf32_section_body := elf32_section_body r; elf32_section_name_as_string := elf32_section_name_as_string r |}).
Notation "{[ r 'with' 'elf32_section_link' := e ]}" := ({| elf32_section_link := e; elf32_section_name := elf32_section_name r; elf32_section_type := elf32_section_type r; elf32_section_flags := elf32_section_flags r; elf32_section_addr := elf32_section_addr r; elf32_section_offset := elf32_section_offset r; elf32_section_size := elf32_section_size r; elf32_section_info := elf32_section_info r; elf32_section_align := elf32_section_align r; elf32_section_entsize := elf32_section_entsize r; elf32_section_body := elf32_section_body r; elf32_section_name_as_string := elf32_section_name_as_string r |}).
Notation "{[ r 'with' 'elf32_section_info' := e ]}" := ({| elf32_section_info := e; elf32_section_name := elf32_section_name r; elf32_section_type := elf32_section_type r; elf32_section_flags := elf32_section_flags r; elf32_section_addr := elf32_section_addr r; elf32_section_offset := elf32_section_offset r; elf32_section_size := elf32_section_size r; elf32_section_link := elf32_section_link r; elf32_section_align := elf32_section_align r; elf32_section_entsize := elf32_section_entsize r; elf32_section_body := elf32_section_body r; elf32_section_name_as_string := elf32_section_name_as_string r |}).
Notation "{[ r 'with' 'elf32_section_align' := e ]}" := ({| elf32_section_align := e; elf32_section_name := elf32_section_name r; elf32_section_type := elf32_section_type r; elf32_section_flags := elf32_section_flags r; elf32_section_addr := elf32_section_addr r; elf32_section_offset := elf32_section_offset r; elf32_section_size := elf32_section_size r; elf32_section_link := elf32_section_link r; elf32_section_info := elf32_section_info r; elf32_section_entsize := elf32_section_entsize r; elf32_section_body := elf32_section_body r; elf32_section_name_as_string := elf32_section_name_as_string r |}).
Notation "{[ r 'with' 'elf32_section_entsize' := e ]}" := ({| elf32_section_entsize := e; elf32_section_name := elf32_section_name r; elf32_section_type := elf32_section_type r; elf32_section_flags := elf32_section_flags r; elf32_section_addr := elf32_section_addr r; elf32_section_offset := elf32_section_offset r; elf32_section_size := elf32_section_size r; elf32_section_link := elf32_section_link r; elf32_section_info := elf32_section_info r; elf32_section_align := elf32_section_align r; elf32_section_body := elf32_section_body r; elf32_section_name_as_string := elf32_section_name_as_string r |}).
Notation "{[ r 'with' 'elf32_section_body' := e ]}" := ({| elf32_section_body := e; elf32_section_name := elf32_section_name r; elf32_section_type := elf32_section_type r; elf32_section_flags := elf32_section_flags r; elf32_section_addr := elf32_section_addr r; elf32_section_offset := elf32_section_offset r; elf32_section_size := elf32_section_size r; elf32_section_link := elf32_section_link r; elf32_section_info := elf32_section_info r; elf32_section_align := elf32_section_align r; elf32_section_entsize := elf32_section_entsize r; elf32_section_name_as_string := elf32_section_name_as_string r |}).
Notation "{[ r 'with' 'elf32_section_name_as_string' := e ]}" := ({| elf32_section_name_as_string := e; elf32_section_name := elf32_section_name r; elf32_section_type := elf32_section_type r; elf32_section_flags := elf32_section_flags r; elf32_section_addr := elf32_section_addr r; elf32_section_offset := elf32_section_offset r; elf32_section_size := elf32_section_size r; elf32_section_link := elf32_section_link r; elf32_section_info := elf32_section_info r; elf32_section_align := elf32_section_align r; elf32_section_entsize := elf32_section_entsize r; elf32_section_body := elf32_section_body r |}).
Definition elf32_interpreted_section_default: elf32_interpreted_section  := {| elf32_section_name := nat_default; elf32_section_type := nat_default; elf32_section_flags := nat_default; elf32_section_addr := nat_default; elf32_section_offset := nat_default; elf32_section_size := nat_default; elf32_section_link := nat_default; elf32_section_info := nat_default; elf32_section_align := nat_default; elf32_section_entsize := nat_default; elf32_section_body := byte_sequence_default; elf32_section_name_as_string := string_default |}.
(* [?]: removed value specification. *)

Definition elf32_interpreted_section_equal  (x : elf32_interpreted_section ) (y : elf32_interpreted_section )  : bool :=  beq_nat(elf32_section_name
    x)(elf32_section_name y) && (beq_nat(elf32_section_type
    x)(elf32_section_type y) && (beq_nat(elf32_section_flags
    x)(elf32_section_flags y) && (beq_nat(elf32_section_addr
    x)(elf32_section_addr y) && (beq_nat(elf32_section_offset
    x)(elf32_section_offset y) && (beq_nat(elf32_section_size
    x)(elf32_section_size y) && (beq_nat(elf32_section_link
    x)(elf32_section_link y) && (beq_nat(elf32_section_info
    x)(elf32_section_info y) && (beq_nat(elf32_section_align
    x)(elf32_section_align y) && (beq_nat(elf32_section_entsize
    x)(elf32_section_entsize y) && (equal(elf32_section_body
    x)(elf32_section_body y) && (string_equal(elf32_section_name_as_string x)(elf32_section_name_as_string y)))))))))))).

Instance x73_Eq : Eq elf32_interpreted_section := {
	 isEqual       :=  elf32_interpreted_section_equal;
	 isInequal   x  y :=  negb (elf32_interpreted_section_equal x y)
}.


(** [elf64_interpreted_section] exactly mirrors the structure of a section header
  * table entry, barring the conversion of all fields to more amenable types.
  *)
Record elf64_interpreted_section : Type :=
  { elf64_section_name    : nat        (** Name of the section *)
   ; elf64_section_type    : nat        (** Type of the section *)
   ; elf64_section_flags   : nat        (** Flags associated with the section *)
   ; elf64_section_addr    : nat        (** Base address of the section in memory *)
   ; elf64_section_offset  : nat        (** Offset from beginning of file *)
   ; elf64_section_size    : nat        (** Section size in bytes *)
   ; elf64_section_link    : nat        (** Section header table index link *)
   ; elf64_section_info    : nat        (** Extra information, depends on section type *)
   ; elf64_section_align   : nat        (** Alignment constraints for section *)
   ; elf64_section_entsize : nat        (** Size of each entry in table, if section is one *)
   ; elf64_section_body    : byte_sequence  (** Body of section *)
   ; elf64_section_name_as_string : string  (** Name of the section, as a string; "" for no name (name = 0) *)
   }.
Notation "{[ r 'with' 'elf64_section_name' := e ]}" := ({| elf64_section_name := e; elf64_section_type := elf64_section_type r; elf64_section_flags := elf64_section_flags r; elf64_section_addr := elf64_section_addr r; elf64_section_offset := elf64_section_offset r; elf64_section_size := elf64_section_size r; elf64_section_link := elf64_section_link r; elf64_section_info := elf64_section_info r; elf64_section_align := elf64_section_align r; elf64_section_entsize := elf64_section_entsize r; elf64_section_body := elf64_section_body r; elf64_section_name_as_string := elf64_section_name_as_string r |}).
Notation "{[ r 'with' 'elf64_section_type' := e ]}" := ({| elf64_section_type := e; elf64_section_name := elf64_section_name r; elf64_section_flags := elf64_section_flags r; elf64_section_addr := elf64_section_addr r; elf64_section_offset := elf64_section_offset r; elf64_section_size := elf64_section_size r; elf64_section_link := elf64_section_link r; elf64_section_info := elf64_section_info r; elf64_section_align := elf64_section_align r; elf64_section_entsize := elf64_section_entsize r; elf64_section_body := elf64_section_body r; elf64_section_name_as_string := elf64_section_name_as_string r |}).
Notation "{[ r 'with' 'elf64_section_flags' := e ]}" := ({| elf64_section_flags := e; elf64_section_name := elf64_section_name r; elf64_section_type := elf64_section_type r; elf64_section_addr := elf64_section_addr r; elf64_section_offset := elf64_section_offset r; elf64_section_size := elf64_section_size r; elf64_section_link := elf64_section_link r; elf64_section_info := elf64_section_info r; elf64_section_align := elf64_section_align r; elf64_section_entsize := elf64_section_entsize r; elf64_section_body := elf64_section_body r; elf64_section_name_as_string := elf64_section_name_as_string r |}).
Notation "{[ r 'with' 'elf64_section_addr' := e ]}" := ({| elf64_section_addr := e; elf64_section_name := elf64_section_name r; elf64_section_type := elf64_section_type r; elf64_section_flags := elf64_section_flags r; elf64_section_offset := elf64_section_offset r; elf64_section_size := elf64_section_size r; elf64_section_link := elf64_section_link r; elf64_section_info := elf64_section_info r; elf64_section_align := elf64_section_align r; elf64_section_entsize := elf64_section_entsize r; elf64_section_body := elf64_section_body r; elf64_section_name_as_string := elf64_section_name_as_string r |}).
Notation "{[ r 'with' 'elf64_section_offset' := e ]}" := ({| elf64_section_offset := e; elf64_section_name := elf64_section_name r; elf64_section_type := elf64_section_type r; elf64_section_flags := elf64_section_flags r; elf64_section_addr := elf64_section_addr r; elf64_section_size := elf64_section_size r; elf64_section_link := elf64_section_link r; elf64_section_info := elf64_section_info r; elf64_section_align := elf64_section_align r; elf64_section_entsize := elf64_section_entsize r; elf64_section_body := elf64_section_body r; elf64_section_name_as_string := elf64_section_name_as_string r |}).
Notation "{[ r 'with' 'elf64_section_size' := e ]}" := ({| elf64_section_size := e; elf64_section_name := elf64_section_name r; elf64_section_type := elf64_section_type r; elf64_section_flags := elf64_section_flags r; elf64_section_addr := elf64_section_addr r; elf64_section_offset := elf64_section_offset r; elf64_section_link := elf64_section_link r; elf64_section_info := elf64_section_info r; elf64_section_align := elf64_section_align r; elf64_section_entsize := elf64_section_entsize r; elf64_section_body := elf64_section_body r; elf64_section_name_as_string := elf64_section_name_as_string r |}).
Notation "{[ r 'with' 'elf64_section_link' := e ]}" := ({| elf64_section_link := e; elf64_section_name := elf64_section_name r; elf64_section_type := elf64_section_type r; elf64_section_flags := elf64_section_flags r; elf64_section_addr := elf64_section_addr r; elf64_section_offset := elf64_section_offset r; elf64_section_size := elf64_section_size r; elf64_section_info := elf64_section_info r; elf64_section_align := elf64_section_align r; elf64_section_entsize := elf64_section_entsize r; elf64_section_body := elf64_section_body r; elf64_section_name_as_string := elf64_section_name_as_string r |}).
Notation "{[ r 'with' 'elf64_section_info' := e ]}" := ({| elf64_section_info := e; elf64_section_name := elf64_section_name r; elf64_section_type := elf64_section_type r; elf64_section_flags := elf64_section_flags r; elf64_section_addr := elf64_section_addr r; elf64_section_offset := elf64_section_offset r; elf64_section_size := elf64_section_size r; elf64_section_link := elf64_section_link r; elf64_section_align := elf64_section_align r; elf64_section_entsize := elf64_section_entsize r; elf64_section_body := elf64_section_body r; elf64_section_name_as_string := elf64_section_name_as_string r |}).
Notation "{[ r 'with' 'elf64_section_align' := e ]}" := ({| elf64_section_align := e; elf64_section_name := elf64_section_name r; elf64_section_type := elf64_section_type r; elf64_section_flags := elf64_section_flags r; elf64_section_addr := elf64_section_addr r; elf64_section_offset := elf64_section_offset r; elf64_section_size := elf64_section_size r; elf64_section_link := elf64_section_link r; elf64_section_info := elf64_section_info r; elf64_section_entsize := elf64_section_entsize r; elf64_section_body := elf64_section_body r; elf64_section_name_as_string := elf64_section_name_as_string r |}).
Notation "{[ r 'with' 'elf64_section_entsize' := e ]}" := ({| elf64_section_entsize := e; elf64_section_name := elf64_section_name r; elf64_section_type := elf64_section_type r; elf64_section_flags := elf64_section_flags r; elf64_section_addr := elf64_section_addr r; elf64_section_offset := elf64_section_offset r; elf64_section_size := elf64_section_size r; elf64_section_link := elf64_section_link r; elf64_section_info := elf64_section_info r; elf64_section_align := elf64_section_align r; elf64_section_body := elf64_section_body r; elf64_section_name_as_string := elf64_section_name_as_string r |}).
Notation "{[ r 'with' 'elf64_section_body' := e ]}" := ({| elf64_section_body := e; elf64_section_name := elf64_section_name r; elf64_section_type := elf64_section_type r; elf64_section_flags := elf64_section_flags r; elf64_section_addr := elf64_section_addr r; elf64_section_offset := elf64_section_offset r; elf64_section_size := elf64_section_size r; elf64_section_link := elf64_section_link r; elf64_section_info := elf64_section_info r; elf64_section_align := elf64_section_align r; elf64_section_entsize := elf64_section_entsize r; elf64_section_name_as_string := elf64_section_name_as_string r |}).
Notation "{[ r 'with' 'elf64_section_name_as_string' := e ]}" := ({| elf64_section_name_as_string := e; elf64_section_name := elf64_section_name r; elf64_section_type := elf64_section_type r; elf64_section_flags := elf64_section_flags r; elf64_section_addr := elf64_section_addr r; elf64_section_offset := elf64_section_offset r; elf64_section_size := elf64_section_size r; elf64_section_link := elf64_section_link r; elf64_section_info := elf64_section_info r; elf64_section_align := elf64_section_align r; elf64_section_entsize := elf64_section_entsize r; elf64_section_body := elf64_section_body r |}).
Definition elf64_interpreted_section_default: elf64_interpreted_section  := {| elf64_section_name := nat_default; elf64_section_type := nat_default; elf64_section_flags := nat_default; elf64_section_addr := nat_default; elf64_section_offset := nat_default; elf64_section_size := nat_default; elf64_section_link := nat_default; elf64_section_info := nat_default; elf64_section_align := nat_default; elf64_section_entsize := nat_default; elf64_section_body := byte_sequence_default; elf64_section_name_as_string := string_default |}.
(* [?]: removed value specification. *)

Definition compare_elf64_interpreted_section  (s1 : elf64_interpreted_section ) (s2 : elf64_interpreted_section )  : ordering :=    
 (pairCompare (lexicographicCompareBy (genericCompare nat_ltb beq_nat)) compare_byte_sequence 
    ([(elf64_section_names1)    ;(elf64_section_type
      s1)    ;(elf64_section_flags
      s1)   ;(elf64_section_addr
      s1)    ;(elf64_section_offset
      s1)  ;(elf64_section_size
      s1)    ;(elf64_section_link
      s1)    ;(elf64_section_info
      s1)    ;(elf64_section_align
      s1)   ;(elf64_section_entsize
      s1)],(elf64_section_body s1))
    ([(elf64_section_names2)    ;(elf64_section_type
      s2)    ;(elf64_section_flags
      s2)   ;(elf64_section_addr
      s2)    ;(elf64_section_offset
      s2)  ;(elf64_section_size
      s2)    ;(elf64_section_link
      s2)    ;(elf64_section_info
      s2)    ;(elf64_section_align
      s2)   ;(elf64_section_entsize
      s2)],(elf64_section_body s2))).

Instance x72_Ord : Ord elf64_interpreted_section := {
     compare  :=  compare_elf64_interpreted_section;
     isLess  :=  fun  f1 => (fun  f2 => ( (ordering_equal (compare_elf64_interpreted_section f1 f2) LT)));
     isLessEqual  :=  fun  f1 => (fun  f2 => (set_member_by (fun  x  y=>EQ) (compare_elf64_interpreted_section f1 f2) [LT;  EQ]));
     isGreater  :=  fun  f1 => (fun  f2 => ( (ordering_equal (compare_elf64_interpreted_section f1 f2) GT)));
     isGreaterEqual  :=  fun  f1 => (fun  f2 => (set_member_by (fun  x  y=>EQ) (compare_elf64_interpreted_section f1 f2) [GT;  EQ]))
}.

(* [?]: removed value specification. *)

Definition elf64_interpreted_section_equal  (x : elf64_interpreted_section ) (y : elf64_interpreted_section )  : bool :=  beq_nat(elf64_section_name
    x)(elf64_section_name y) && (beq_nat(elf64_section_type
    x)(elf64_section_type y) && (beq_nat(elf64_section_flags
    x)(elf64_section_flags y) && (beq_nat(elf64_section_addr
    x)(elf64_section_addr y) && (beq_nat(elf64_section_offset
    x)(elf64_section_offset y) && (beq_nat(elf64_section_size
    x)(elf64_section_size y) && (beq_nat(elf64_section_link
    x)(elf64_section_link y) && (beq_nat(elf64_section_info
    x)(elf64_section_info y) && (beq_nat(elf64_section_align
    x)(elf64_section_align y) && (beq_nat(elf64_section_entsize
    x)(elf64_section_entsize y) && (equal(elf64_section_body
    x)(elf64_section_body y) && (string_equal(elf64_section_name_as_string x)(elf64_section_name_as_string y)))))))))))).
(* [?]: removed value specification. *)

Definition null_elf32_interpreted_section   : elf32_interpreted_section := 
  {|elf32_section_name :=( 0)
   ;elf32_section_type :=( 0)
   ;elf32_section_flags :=( 0)
   ;elf32_section_addr :=( 0)
   ;elf32_section_offset :=( 0)
   ;elf32_section_size :=( 0)
   ;elf32_section_link :=( 0)
   ;elf32_section_info :=( 0)
   ;elf32_section_align :=( 0)
   ;elf32_section_entsize :=( 0) 
   ;elf32_section_body := byte_sequence.empty
   ;elf32_section_name_as_string := ""
   |}.
(* [?]: removed value specification. *)

Definition null_elf64_interpreted_section   : elf64_interpreted_section := 
  {|elf64_section_name :=( 0)
   ;elf64_section_type :=( 0)
   ;elf64_section_flags :=( 0)
   ;elf64_section_addr :=( 0)
   ;elf64_section_offset :=( 0)
   ;elf64_section_size :=( 0)
   ;elf64_section_link :=( 0)
   ;elf64_section_info :=( 0)
   ;elf64_section_align :=( 0)
   ;elf64_section_entsize :=( 0) 
   ;elf64_section_body := byte_sequence.empty
   ;elf64_section_name_as_string := ""
   |}.

Instance x71_Eq : Eq elf64_interpreted_section := {
	 isEqual       :=  elf64_interpreted_section_equal;
	 isInequal   x  y :=  negb (elf64_interpreted_section_equal x y)
}.

(* [?]: removed value specification. *)

Definition elf64_interpreted_section_matches_section_header  (i : elf64_interpreted_section ) (sh : elf64_section_header_table_entry )  : bool :=  beq_nat(elf64_section_name
  i) (nat_of_elf64_word(elf64_sh_name sh)) && (beq_nat(elf64_section_type
  i) (nat_of_elf64_word(elf64_sh_type sh)) && (beq_nat(elf64_section_flags
  i) (nat_of_elf64_xword(elf64_sh_flags sh)) && (beq_nat(elf64_section_addr
  i) (nat_of_elf64_addr(elf64_sh_addr sh)) && (beq_nat(elf64_section_offset
  i) (nat_of_elf64_off(elf64_sh_offset sh)) && (beq_nat(elf64_section_size
  i) (nat_of_elf64_xword(elf64_sh_size sh)) && (beq_nat(elf64_section_link
  i) (nat_of_elf64_word(elf64_sh_link sh)) && (beq_nat(elf64_section_info
  i) (nat_of_elf64_word(elf64_sh_info sh)) && (beq_nat(elf64_section_align
  i) (nat_of_elf64_xword(elf64_sh_addralign sh)) (* WHY? *) && beq_nat(elf64_section_entsize
  i) (nat_of_elf64_xword(elf64_sh_entsize sh)))))))))).
  (* Don't compare the name as a string, because it's implied by the shshtrtab index. *)
  (* NOTE that we can have multiple sections *indistinguishable*
   * except by their section header table index. Imagine 
   * multiple zero-size bss sections at the same address with the same name.
   * That's why in elf_memory_image we always label each ElfSection
   * with its SHT index.
   *)

Definition elf32_interpreted_sections : Type :=  list  elf32_interpreted_section .
Definition elf32_interpreted_sections_default: elf32_interpreted_sections  := DAEMON.
Definition elf64_interpreted_sections : Type :=  list  elf64_interpreted_section .
Definition elf64_interpreted_sections_default: elf64_interpreted_sections  := DAEMON.
(* [?]: removed value specification. *)

(* [?]: removed value specification. *)

(* [?]: removed value specification. *)

Definition is_valid_elf32_section_header_table_entry  (ent : elf32_interpreted_section ) (stbl : string_table )  : bool := 
  match ( string_table.get_string_at(elf32_section_name ent) stbl) with 
    | Fail    f    => false
    | Success name1 =>
      match ( (fmap_lookup_by (fun (x : string ) (y : string )=>EQ) name1 elf_special_sections)) with 
        | None           => false (* ??? *)
        | Some (typ,  flags) => beq_nat
            typ(elf32_section_type ent) && beq_nat flags(elf32_section_flags ent)
      end
  end.
(* [?]: removed value specification. *)

Definition is_valid_elf64_section_header_table_entry  (ent : elf64_interpreted_section ) (stbl : string_table )  : bool := 
  match ( string_table.get_string_at(elf64_section_name ent) stbl) with 
    | Fail    f    => false
    | Success name1 =>
      match ( (fmap_lookup_by (fun (x : string ) (y : string )=>EQ) name1 elf_special_sections)) with 
        | None           => false (* ??? *)
        | Some (typ,  flags) => beq_nat
            typ(elf64_section_type ent) && beq_nat flags(elf64_section_flags ent)
      end
  end.
(* [?]: removed value specification. *)

Definition is_valid_elf32_section_header_table0  (ents : list (elf32_interpreted_section )) (stbl : string_table )  : bool := 
  List.forallb (fun (x : elf32_interpreted_section ) => is_valid_elf32_section_header_table_entry x stbl) ents.
(* [?]: removed value specification. *)

Definition is_valid_elf64_section_header_table0  (ents : list (elf64_interpreted_section )) (stbl : string_table )  : bool := 
  List.forallb (fun (x : elf64_interpreted_section ) => is_valid_elf64_section_header_table_entry x stbl) ents.   
