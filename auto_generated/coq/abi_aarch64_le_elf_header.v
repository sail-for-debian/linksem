(* Generated by Lem from abis/aarch64/abi_aarch64_le_elf_header.lem. *)

Require Import Arith.
Require Import Bool.
Require Import List.
Require Import String.
Require Import Program.Wf.

Require Import coqharness.

Open Scope nat_scope.
Open Scope string_scope.

(** [abi_aarch64_le_elf_header] contains types and definitions relating to ABI
  * specific ELF header functionality for the AArch64 ABI (little-endian).
  *)

Require Import lem_basic_classes.
Require Export lem_basic_classes.

Require Import lem_bool.
Require Export lem_bool.

Require Import lem_list.
Require Export lem_list.

Require Import lem_num.
Require Export lem_num.

Require Import lem_maybe.
Require Export lem_maybe.

Require Import missing_pervasives.
Require Export missing_pervasives.


Require Import elf_header.
Require Export elf_header.

Require Import elf_types_native_uint.
Require Export elf_types_native_uint.


Require Import endianness.
Require Export endianness.

(* [?]: removed value specification. *)

Definition abi_aarch64_le_data_encoding   : nat :=  elf_data_2lsb.
(* [?]: removed value specification. *)

Definition abi_aarch64_le_endianness   : endianness :=  Little.
(* [?]: removed value specification. *)

Definition abi_aarch64_le_file_class   : nat :=  elf_class_64.
(* [?]: removed value specification. *)

Definition abi_aarch64_le_file_version   : nat :=  elf_ev_current.
(* [?]: removed value specification. *)

Definition abi_aarch64_le_page_size_min   : nat :=  4096.
(* [?]: removed value specification. *)

Definition abi_aarch64_le_page_size_max   : nat :=  65536.
(* [?]: removed value specification. *)

Definition is_valid_abi_aarch64_le_machine_architecture  (m : nat )  : bool :=  beq_nat
  m elf_ma_aarch64.
(* [?]: removed value specification. *)

Definition is_valid_abi_aarch64_le_magic_number  (magic : list (unsigned_char ))  : bool := 
  match ( lem_list.index magic (id elf_ii_class)) with 
    | None  => false
    | Some cls =>
      match ( lem_list.index magic (id elf_ii_data)) with 
        | None   => false
        | Some data =>
            ( beq_nat(nat_of_unsigned_char cls) abi_aarch64_le_file_class) &&
              ( beq_nat(nat_of_unsigned_char data) abi_aarch64_le_data_encoding)
      end
  end.
