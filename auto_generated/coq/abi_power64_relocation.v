(* Generated by Lem from abis/power64/abi_power64_relocation.lem. *)

Require Import Arith.
Require Import Bool.
Require Import List.
Require Import String.
Require Import Program.Wf.

Require Import coqharness.

Open Scope nat_scope.
Open Scope string_scope.

(** [abi_power64_relocation] contains types and definitions specific to
  * relocations in the Power64 ABI
  *)

Require Import lem_basic_classes.
Require Export lem_basic_classes.

Require Import lem_map.
Require Export lem_map.

Require Import lem_maybe.
Require Export lem_maybe.

Require Import lem_num.
Require Export lem_num.

Require Import lem_string.
Require Export lem_string.


Require Import error.
Require Export error.

Require Import missing_pervasives.
Require Export missing_pervasives.


Require Import elf_types_native_uint.
Require Export elf_types_native_uint.

Require Import elf_file.
Require Export elf_file.

Require Import elf_header.
Require Export elf_header.

Require Import elf_relocation.
Require Export elf_relocation.

Require Import elf_symbol_table.
Require Export elf_symbol_table.


Require Import abi_utilities.
Require Export abi_utilities.


(** Power64 relocation types *)

Definition r_ppc64_none    :  nat :=  0.
Definition r_ppc64_addr32    :  nat :=  1.
Definition r_ppc64_addr24    :  nat :=  2.
Definition r_ppc64_addr16    :  nat :=  3.
Definition r_ppc64_addr16_lo    :  nat :=  4.
Definition r_ppc64_addr16_hi    :  nat :=  5.
Definition r_ppc64_addr16_ha    :  nat :=  6.
Definition r_ppc64_addr14    :  nat :=  7.
Definition r_ppc64_addr14_brtaken    :  nat :=  8.
Definition r_ppc64_addr14_brntaken    :  nat :=  9.
Definition r_ppc64_rel24    :  nat :=  10.
Definition r_ppc64_rel14    :  nat :=  11.
Definition r_ppc64_rel14_brtaken    :  nat :=  12.
Definition r_ppc64_rel14_brntaken    :  nat :=  13.
Definition r_ppc64_got16    :  nat :=  14.
Definition r_ppc64_got16_lo    :  nat :=  15.
Definition r_ppc64_got16_hi    :  nat :=  16.
Definition r_ppc64_got16_ha    :  nat :=  17.
Definition r_ppc64_copy    :  nat :=  19.
Definition r_ppc64_glob_dat    :  nat :=  20.
Definition r_ppc64_jmp_slot    :  nat :=  21.
Definition r_ppc64_relative    :  nat :=  22.
Definition r_ppc64_uaddr32    :  nat :=  24.
Definition r_ppc64_uaddr16    :  nat :=  25.
Definition r_ppc64_rel32    :  nat :=  26.
Definition r_ppc64_plt32    :  nat :=  27.
Definition r_ppc64_pltrel32    :  nat :=  28.
Definition r_ppc64_plt16_lo    :  nat :=  29.
Definition r_ppc64_plt16_hi    :  nat :=  30.
Definition r_ppc64_plt16_ha    :  nat :=  31.
Definition r_ppc64_sectoff    :  nat :=  33.
Definition r_ppc64_sectoff_lo    :  nat :=  34.
Definition r_ppc64_sectoff_hi    :  nat :=  35.
Definition r_ppc64_sectoff_ha    :  nat :=  36.
Definition r_ppc64_addr30    :  nat :=  37.
Definition r_ppc64_addr64    :  nat :=  38.
Definition r_ppc64_addr16_higher    :  nat :=  39.
Definition r_ppc64_addr16_highera    :  nat :=  40.
Definition r_ppc64_addr16_highest    :  nat :=  41.
Definition r_ppc64_addr16_highesta    :  nat :=  42.
Definition r_ppc64_uaddr64    :  nat :=  43.
Definition r_ppc64_rel64    :  nat :=  44.
Definition r_ppc64_plt64    :  nat :=  45.
Definition r_ppc64_pltrel64    :  nat :=  46.
Definition r_ppc64_toc16    :  nat :=  47.
Definition r_ppc64_toc16_lo    :  nat :=  48.
Definition r_ppc64_toc16_hi    :  nat :=  49.
Definition r_ppc64_toc16_ha    :  nat :=  50.
Definition r_ppc64_toc    :  nat :=  51.
Definition r_ppc64_pltgot16    :  nat :=  52.
Definition r_ppc64_pltgot16_lo    :  nat :=  53.
Definition r_ppc64_pltgot16_hi    :  nat :=  54.
Definition r_ppc64_pltgot16_ha    :  nat :=  55.
Definition r_ppc64_addr16_ds    :  nat :=  56.
Definition r_ppc64_addr16_lo_ds    :  nat :=  57.
Definition r_ppc64_got16_ds    :  nat :=  58.
Definition r_ppc64_got16_lo_ds    :  nat :=  59.
Definition r_ppc64_plt16_lo_ds    :  nat :=  60.
Definition r_ppc64_sectoff_ds    :  nat :=  61.
Definition r_ppc64_sectoff_lo_ds    :  nat :=  62.
Definition r_ppc64_toc16_ds    :  nat :=  63.
Definition r_ppc64_toc16_lo_ds    :  nat :=  64.
Definition r_ppc64_pltgot16_ds    :  nat :=  65.
Definition r_ppc64_pltgot16_lo_ds    :  nat :=  66.
Definition r_ppc64_tls    :  nat :=  67.
Definition r_ppc64_dtpmod64    :  nat :=  68.
Definition r_ppc64_tprel16    :  nat :=  69.
Definition r_ppc64_tprel16_lo    :  nat :=  60.
Definition r_ppc64_tprel16_hi    :  nat :=  71.
Definition r_ppc64_tprel16_ha    :  nat :=  72.
Definition r_ppc64_tprel64    :  nat :=  73.
Definition r_ppc64_dtprel16    :  nat :=  74.
Definition r_ppc64_dtprel16_lo    :  nat :=  75.
Definition r_ppc64_dtprel16_hi    :  nat :=  76.
Definition r_ppc64_dtprel16_ha    :  nat :=  77.
Definition r_ppc64_dtprel64    :  nat :=  78.
Definition r_ppc64_got_tlsgd16    :  nat :=  79.
Definition r_ppc64_got_tlsgd16_lo    :  nat :=  80.
Definition r_ppc64_got_tlsgd16_hi    :  nat :=  81.
Definition r_ppc64_got_tlsgd16_ha    :  nat :=  82.
Definition r_ppc64_got_tlsld16    :  nat :=  83.
Definition r_ppc64_got_tlsld16_lo    :  nat :=  84.
Definition r_ppc64_got_tlsld16_hi    :  nat :=  85.
Definition r_ppc64_got_tlsld16_ha    :  nat :=  86.
Definition r_ppc64_got_tprel16_ds    :  nat :=  87.
Definition r_ppc64_got_tprel16_lo_ds    :  nat :=  88.
Definition r_ppc64_got_tprel16_hi    :  nat :=  89.
Definition r_ppc64_got_tprel16_ha    :  nat :=  90.
Definition r_ppc64_got_dtprel16_ds    :  nat :=  91.
Definition r_ppc64_got_dtprel16_lo_ds    :  nat :=  92.
Definition r_ppc64_got_dtprel16_hi    :  nat :=  93.
Definition r_ppc64_got_dtprel16_ha    :  nat :=  94.
Definition r_ppc64_tprel16_ds    :  nat :=  95.
Definition r_ppc64_tprel16_lo_ds    :  nat :=  96.
Definition r_ppc64_tprel16_higher    :  nat :=  97.
Definition r_ppc64_tprel16_highera    :  nat :=  98.
Definition r_ppc64_tprel16_highest    :  nat :=  99.
Definition r_ppc64_tprel16_highesta    :  nat :=  100.
Definition r_ppc64_dtprel16_ds    :  nat :=  101.
Definition r_ppc64_dtprel16_lo_ds    :  nat :=  102.
Definition r_ppc64_dtprel16_higher    :  nat :=  103.
Definition r_ppc64_dtprel16_highera    :  nat :=  104.
Definition r_ppc64_dtprel16_highest    :  nat :=  105.
Definition r_ppc64_dtprel16_highesta    :  nat :=  106.
(* [?]: removed value specification. *)

Definition string_of_ppc64_relocation_type  (rel_type1 : nat )  : string := 
  if beq_nat rel_type1 r_ppc64_none then
    "R_PPC64_NONE"
  else if beq_nat rel_type1 r_ppc64_addr32 then
  	"R_PPC64_ADDR32"
  else if beq_nat rel_type1 r_ppc64_addr24 then
    "R_PPC64_ADDR24"
	else if beq_nat rel_type1 r_ppc64_addr16 then
	  "R_PPC64_ADDR16"
  else if beq_nat rel_type1 r_ppc64_addr16_lo then
    "R_PPC64_ADDR16_LO"
  else if beq_nat rel_type1 r_ppc64_addr16_hi then
    "R_PPC64_ADDR16_HI"
  else if beq_nat rel_type1 r_ppc64_addr16_ha then
    "R_PPC64_ADDR16_HA"
  else if beq_nat rel_type1 r_ppc64_addr14 then
    "R_PPC64_ADDR14"
  else if beq_nat rel_type1 r_ppc64_addr14_brtaken then
    "R_PPC64_ADDR14_BRTAKEN"
  else if beq_nat rel_type1 r_ppc64_addr14_brntaken then
    "R_PPC64_ADDR14_BRNTAKEN"
  else if beq_nat rel_type1 r_ppc64_rel24 then
    "R_PPC64_REL24"
  else if beq_nat rel_type1 r_ppc64_rel14 then
    "R_PPC64_REL14"
  else if beq_nat rel_type1 r_ppc64_rel14_brtaken then
    "R_PPC64_REL14_BRTAKEN"
  else if beq_nat rel_type1 r_ppc64_rel14_brntaken then
    "R_PPC64_REL14_BRNTAKEN"
  else if beq_nat rel_type1 r_ppc64_got16 then
    "R_PPC64_GOT16"
  else if beq_nat rel_type1 r_ppc64_got16_lo then
    "R_PPC64_GOT16_LO"
  else if beq_nat rel_type1 r_ppc64_got16_hi then
    "R_PPC64_GOT16_HI"
  else if beq_nat rel_type1 r_ppc64_got16_ha then
    "R_PPC64_GOT16_HA"
  else if beq_nat rel_type1 r_ppc64_copy then
    "R_PPC64_COPY"
  else if beq_nat rel_type1 r_ppc64_glob_dat then
    "R_PPC64_GLOB_DAT"
  else if beq_nat rel_type1 r_ppc64_jmp_slot then
    "R_PPC64_JMP_SLOT"
  else if beq_nat rel_type1 r_ppc64_relative then
    "R_PPC64_RELATIVE"
  else if beq_nat rel_type1 r_ppc64_uaddr32 then
    "R_PPC64_UADDR32"
  else if beq_nat rel_type1 r_ppc64_uaddr16 then
    "R_PPC64_UADDR16"
  else if beq_nat rel_type1 r_ppc64_rel32 then
    "R_PPC64_REL32"
  else if beq_nat rel_type1 r_ppc64_plt32 then
    "R_PPC64_PLT32"
  else if beq_nat rel_type1 r_ppc64_pltrel32 then
    "R_PPC64_PLTREL32"
  else if beq_nat rel_type1 r_ppc64_plt16_lo then
    "R_PPC64_PLT16_LO"
  else if beq_nat rel_type1 r_ppc64_plt16_hi then
    "R_PPC64_PLT16_HI"
  else if beq_nat rel_type1 r_ppc64_plt16_ha then
    "R_PPC64_PLT16_HA"
  else if beq_nat rel_type1 r_ppc64_sectoff then
    "R_PPC64_SECTOFF"
  else if beq_nat rel_type1 r_ppc64_sectoff_lo then
    "R_PPC64_SECTOFF_LO"
  else if beq_nat rel_type1 r_ppc64_sectoff_hi then
    "R_PPC64_SECTOFF_HI"
  else if beq_nat rel_type1 r_ppc64_sectoff_ha then
    "R_PPC64_SECTOFF_HA"
  else if beq_nat rel_type1 r_ppc64_addr30 then
    "R_PPC64_ADDR30"
  else if beq_nat rel_type1 r_ppc64_addr64 then
    "R_PPC64_ADDR64"
  else if beq_nat rel_type1 r_ppc64_addr16_higher then
    "R_PPC64_ADDR16_HIGHER"
  else if beq_nat rel_type1 r_ppc64_addr16_highera then
    "R_PPC64_ADDR16_HIGHERA"
  else if beq_nat rel_type1 r_ppc64_addr16_highest then
    "R_PPC64_ADDR16_HIGHEST"
  else if beq_nat rel_type1 r_ppc64_addr16_highesta then
    "R_PPC64_ADDR16_HIGHESTA"
  else if beq_nat rel_type1 r_ppc64_uaddr64 then
    "R_PPC64_UADDR64"
  else if beq_nat rel_type1 r_ppc64_rel64 then
    "R_PPC64_REL64"
  else if beq_nat rel_type1 r_ppc64_plt64 then
    "R_PPC64_PLT64"
  else if beq_nat rel_type1 r_ppc64_pltrel64 then
    "R_PPC64_PLTREL64"
  else if beq_nat rel_type1 r_ppc64_toc16 then
    "R_PPC64_TOC16"
  else if beq_nat rel_type1 r_ppc64_toc16_lo then
    "R_PPC64_TOC16_LO"
  else if beq_nat rel_type1 r_ppc64_toc16_hi then
    "R_PPC64_TOC16_HI"
  else if beq_nat rel_type1 r_ppc64_toc16_ha then
    "R_PPC64_TOC16_HA"
  else if beq_nat rel_type1 r_ppc64_toc then
    "R_PPC64_TOC"
  else if beq_nat rel_type1 r_ppc64_pltgot16 then
    "R_PPC64_PLTGOT16"
  else if beq_nat rel_type1 r_ppc64_pltgot16_lo then
    "R_PPC64_PLTGOT16_LO"
  else if beq_nat rel_type1 r_ppc64_pltgot16_hi then
    "R_PPC64_PLTGOT16_HI"
  else if beq_nat rel_type1 r_ppc64_pltgot16_ha then
    "R_PPC64_PLTGOT16_HA"
  else if beq_nat rel_type1 r_ppc64_addr16_ds then
    "R_PPC64_ADDR16_DS"
  else if beq_nat rel_type1 r_ppc64_addr16_lo_ds then
    "R_PPC64_ADDR16_DS"
  else if beq_nat rel_type1 r_ppc64_got16_ds then
    "R_PPC64_GOT16_DS"
  else if beq_nat rel_type1 r_ppc64_got16_lo_ds then
    "R_PPC64_GOT16_LO_DS"
  else if beq_nat rel_type1 r_ppc64_plt16_lo_ds then
    "R_PPC64_PLT16_LO_DS"
  else if beq_nat rel_type1 r_ppc64_sectoff_ds then
    "R_PPC64_SECTOFF_DS"
  else if beq_nat rel_type1 r_ppc64_sectoff_lo_ds then
    "R_PPC64_SECTOFF_LO_DS"
  else if beq_nat rel_type1 r_ppc64_toc16_ds then
    "R_PPC64_TOC16_DS"
  else if beq_nat rel_type1 r_ppc64_toc16_lo_ds then
    "R_PPC64_TOC16_LO_DS"
  else if beq_nat rel_type1 r_ppc64_pltgot16_ds then
    "R_PPC64_PLTGOT16_DS"
  else if beq_nat rel_type1 r_ppc64_pltgot16_lo_ds then
    "R_PPC64_PLTGOT16_LO_DS"
  else if beq_nat rel_type1 r_ppc64_tls then
    "R_PPC64_TLS"
  else if beq_nat rel_type1 r_ppc64_dtpmod64 then
    "R_PPC64_DTPMOD64"
  else if beq_nat rel_type1 r_ppc64_tprel16 then
    "R_PPC64_TPREL16"
  else if beq_nat rel_type1 r_ppc64_tprel16_lo then
    "R_PPC64_TPREL16_LO"
  else if beq_nat rel_type1 r_ppc64_tprel16_hi then
    "R_PPC64_TPREL16_HI"
  else if beq_nat rel_type1 r_ppc64_tprel16_ha then
    "R_PPC64_TPREL16_HA"
  else if beq_nat rel_type1 r_ppc64_tprel64 then
    "R_PPC64_TPREL64"
  else if beq_nat rel_type1 r_ppc64_dtprel16 then
    "R_PPC64_DTPREL16"
  else if beq_nat rel_type1 r_ppc64_dtprel16_lo then
    "R_PPC64_DTPREL16_LO"
  else if beq_nat rel_type1 r_ppc64_dtprel16_hi then
    "R_PPC64_DTPREL16_HI"
  else if beq_nat rel_type1 r_ppc64_dtprel16_ha then
    "R_PPC64_DTPREL16_HA"
  else if beq_nat rel_type1 r_ppc64_dtprel64 then
    "R_PPC64_DTPREL64"
  else if beq_nat rel_type1 r_ppc64_got_tlsgd16 then
    "R_PPC64_GOT_TLSGD16"
  else if beq_nat rel_type1 r_ppc64_got_tlsgd16_lo then
    "R_PPC64_GOT_TLSGD16_LO"
  else if beq_nat rel_type1 r_ppc64_got_tlsgd16_hi then
    "R_PPC64_GOT_TLSGD16_HI"
  else if beq_nat rel_type1 r_ppc64_got_tlsgd16_ha then
    "R_PPC64_GOT_TLSGD16_HA"
  else if beq_nat rel_type1 r_ppc64_got_tlsld16 then
    "R_PPC64_GOT_TLSLD16"
  else if beq_nat rel_type1 r_ppc64_got_tlsld16_lo then
    "R_PPC64_GOT_TLSLD16_LO"
  else if beq_nat rel_type1 r_ppc64_got_tlsld16_hi then
    "R_PPC64_GOT_TLSLD16_HI"
  else if beq_nat rel_type1 r_ppc64_got_tlsld16_ha then
    "R_PPC64_GOT_TLSLD16_HA"
  else if beq_nat rel_type1 r_ppc64_got_tprel16_ds then
    "R_PPC64_GOT_TPREL16_DS"
  else if beq_nat rel_type1 r_ppc64_got_tprel16_lo_ds then
    "R_PPC64_GOT_TPREL16_LO_DS"
  else if beq_nat rel_type1 r_ppc64_got_tprel16_hi then
    "R_PPC64_GOT_TPREL16_HI"
  else if beq_nat rel_type1 r_ppc64_got_tprel16_ha then
    "R_PPC64_GOT_TPREL16_HA"
  else if beq_nat rel_type1 r_ppc64_got_dtprel16_ds then
    "R_PPC64_GOT_DTPREL16_DS"
  else if beq_nat rel_type1 r_ppc64_got_dtprel16_lo_ds then
    "R_PPC64_GOT_DTPREL16_LO_DS"
  else if beq_nat rel_type1 r_ppc64_got_dtprel16_hi then
    "R_PPC64_GOT_DTPREL16_HI"
  else if beq_nat rel_type1 r_ppc64_got_dtprel16_ha then
    "R_PPC64_GOT_DTPREL16_HA"
  else if beq_nat rel_type1 r_ppc64_tprel16_ds then
    "R_PPC64_TPREL16_DS"
  else if beq_nat rel_type1 r_ppc64_tprel16_lo_ds then
    "R_PPC64_TPREL16_LO_DS"
  else if beq_nat rel_type1 r_ppc64_tprel16_higher then
    "R_PPC64_TPREL16_HIGHER"
  else if beq_nat rel_type1 r_ppc64_tprel16_highera then
    "R_PPC64_TPREL16_HIGHERA"
  else if beq_nat rel_type1 r_ppc64_tprel16_highest then
    "R_PPC64_TPREL16_HIGHEST"
  else if beq_nat rel_type1 r_ppc64_tprel16_highesta then
    "R_PPC64_TPREL16_HIGHESTA"
  else if beq_nat rel_type1 r_ppc64_dtprel16_ds then
    "R_PPC64_DTPREL16_DS"
  else if beq_nat rel_type1 r_ppc64_dtprel16_lo_ds then
    "R_PPC64_DTPREL16_LO_DS"
  else if beq_nat rel_type1 r_ppc64_dtprel16_higher then
    "R_PPC64_DTPREL16_HIGHER"
  else if beq_nat rel_type1 r_ppc64_dtprel16_highera then
    "R_PPC64_DTPREL16_HIGHERA"
  else if beq_nat rel_type1 r_ppc64_dtprel16_highest then
    "R_PPC64_DTPREL16_HIGHEST"
  else if beq_nat rel_type1 r_ppc64_dtprel16_highesta then
    "R_PPC64_DTPREL16_HIGHESTA"
  else
    "Invalid Power64 relocation type".
(* [?]: removed value specification. *)

Definition abi_ppc64_apply_relocation  (rel : elf64_relocation_a ) (s_val : Z ) (b_val : Z ) (p_val : Z ) (l_val : Z ) (g_val : Z ) (r_val : Z ) (m_val : Z ) (toc_val : Z ) (dtpmod_val : Z ) (tprel_val : Z ) (dtprel_val : Z ) (gottlsgd_val : Z ) (gottlsld_val : Z ) (gottprel_val : Z ) (gotdtprel_val : Z ) (ef : elf64_file )  : error (fmap (elf64_addr ) ((relocation_operator_expression (Z )*integer_bit_width *can_fail (Z )) % type)):= 
  if is_elf64_relocatable_file(elf64_file_header ef) then
    let rel_type1 := extract_elf64_relocation_r_type(elf64_ra_info rel) in
    let a_val    := int_of_elf64_sxword(elf64_ra_addend rel) in
      (** No width, no calculation *)
      if beq_nat rel_type1 r_ppc64_none then
        return0 fmap_empty
      (** Width: 32 Calculation: S + A *)
      else if beq_nat rel_type1 r_ppc64_addr32 then
      	let result := Lift ( Coq.ZArith.BinInt.Zplus s_val a_val) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, I32, CanFail) fmap_empty)
      (** Width: Low24 Calculation: (S + A) >> 2 *)
      else if beq_nat rel_type1 r_ppc64_addr24 then
        let result := RShift (Lift( Coq.ZArith.BinInt.Zplus s_val a_val), 2) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, Low24, CanFail) fmap_empty)
      (** Width: Half16 Calculation: S + A *)
    	else if beq_nat rel_type1 r_ppc64_addr16 then
        let result := Lift ( Coq.ZArith.BinInt.Zplus s_val a_val) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, I16, CanFail) fmap_empty)
      (** Width: Half16 Calculation: #lo(S + A) *)
      else if beq_nat rel_type1 r_ppc64_addr16_lo then
        let result := Apply(Lo, Lift ( Coq.ZArith.BinInt.Zplus s_val a_val)) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, I16, CannotFail) fmap_empty)
      (** Width: Half16 Calculation: #hi(S + A) *)
      else if beq_nat rel_type1 r_ppc64_addr16_hi then
        let result := Apply(Hi, Lift ( Coq.ZArith.BinInt.Zplus s_val a_val)) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, I16, CannotFail) fmap_empty)
      (** Width: Half16 Calculation: #ha(S + A) *)
      else if beq_nat rel_type1 r_ppc64_addr16_ha then
        let result := Apply(Ha, Lift ( Coq.ZArith.BinInt.Zplus s_val a_val)) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, I16, CannotFail) fmap_empty)
      (** Width: Low14 Calculation: (S + A) >> 2 *)
      else if beq_nat rel_type1 r_ppc64_addr14 then
        let result := RShift(Lift( Coq.ZArith.BinInt.Zplus s_val a_val), 2) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, Low14, CanFail) fmap_empty)
      (** Width: Low14 Calculation: (S + A) >> 2 *)
      else if beq_nat rel_type1 r_ppc64_addr14_brtaken then
        let result := RShift(Lift( Coq.ZArith.BinInt.Zplus s_val a_val), 2) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, Low14, CanFail) fmap_empty)
      (** Width: Low14 Calculation: (S + A) >> 2 *)
      else if beq_nat rel_type1 r_ppc64_addr14_brntaken then
        let result := RShift(Lift( Coq.ZArith.BinInt.Zplus s_val a_val), 2) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, Low14, CanFail) fmap_empty)
      (** Width: Low24 Calculation: ((S + A) - P) >> 2 *)
      else if beq_nat rel_type1 r_ppc64_rel24 then
        let result := RShift(Lift ( Coq.ZArith.BinInt.Zminus( Coq.ZArith.BinInt.Zplus s_val a_val) p_val), 2) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, Low24, CanFail) fmap_empty)
      (** Width: Low14 Calculation: ((S + A) - P) >> 2 *)
      else if beq_nat rel_type1 r_ppc64_rel14 then
        let result := RShift(Lift ( Coq.ZArith.BinInt.Zminus( Coq.ZArith.BinInt.Zplus s_val a_val) p_val), 2) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, Low14, CanFail) fmap_empty)
      (** Width: Low14 Calculation: ((S + A) - P) >> 2 *)
      else if beq_nat rel_type1 r_ppc64_rel14_brtaken then
        let result := RShift(Lift ( Coq.ZArith.BinInt.Zminus( Coq.ZArith.BinInt.Zplus s_val a_val) p_val), 2) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, Low14, CanFail) fmap_empty)
      (** Width: Low14 Calculation: ((S + A) - P) >> 2 *)
      else if beq_nat rel_type1 r_ppc64_rel14_brntaken then
        let result := RShift(Lift ( Coq.ZArith.BinInt.Zminus( Coq.ZArith.BinInt.Zplus s_val a_val) p_val), 2) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, Low14, CanFail) fmap_empty)
      (** Width: Half16 Calculation: G *)
      else if beq_nat rel_type1 r_ppc64_got16 then
        let result := Lift g_val in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, I16, CanFail) fmap_empty)
      (** Width: Half16 Calculation: #lo(G) *)
      else if beq_nat rel_type1 r_ppc64_got16_lo then
        let result := Apply(Lo, Lift g_val) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, I16, CannotFail) fmap_empty)
      (** Width: Half16 Calculation: #hi(G) *)
      else if beq_nat rel_type1 r_ppc64_got16_hi then
        let result := Apply(Hi, Lift g_val) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, I16, CannotFail) fmap_empty)
      (** Width: Half16 Calculation: #ha(G) *)
      else if beq_nat rel_type1 r_ppc64_got16_ha then
        let result := Apply(Ha, Lift g_val) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, I16, CannotFail) fmap_empty)
      (** No width, no calculation *)
      else if beq_nat rel_type1 r_ppc64_copy then
        fail0 "abi_ppc64_apply_relocation: r_ppc64_copy not implemented"
      (** Width I64, Calculation: S + A *)
      else if beq_nat rel_type1 r_ppc64_glob_dat then
        let result := Lift( Coq.ZArith.BinInt.Zplus s_val a_val) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, I64, CannotFail) fmap_empty)
      (** No width, dynamic link calculation *)
      else if beq_nat rel_type1 r_ppc64_jmp_slot then
        fail0 "abi_ppc64_apply_relocation: r_ppc64_jmp_slot not implemented"
      (** Width I64, Calculation: B + A *)
      else if beq_nat rel_type1 r_ppc64_relative then
        let result := Lift( Coq.ZArith.BinInt.Zplus b_val a_val) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, I64, CannotFail) fmap_empty)
      (** Width: I32 Calculation: S + A *)
      else if beq_nat rel_type1 r_ppc64_uaddr32 then
        let result := Lift( Coq.ZArith.BinInt.Zplus s_val a_val) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, I32, CanFail) fmap_empty)
      (** Width: Half16 Calculation: S + A *)
      else if beq_nat rel_type1 r_ppc64_uaddr16 then
        let result := Lift( Coq.ZArith.BinInt.Zplus s_val a_val) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, I16, CanFail) fmap_empty)
      (** Width: I32 Calculation: (S + A) - P *)
      else if beq_nat rel_type1 r_ppc64_rel32 then
        let result := Lift ( Coq.ZArith.BinInt.Zminus( Coq.ZArith.BinInt.Zplus s_val a_val) p_val) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, I32, CanFail) fmap_empty)
      (** Width: I32 Calculation: L *)
      else if beq_nat rel_type1 r_ppc64_plt32 then
        let result := Lift l_val in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, I32, CanFail) fmap_empty)
      (** Width: I32 Calculation: L - P *)
      else if beq_nat rel_type1 r_ppc64_pltrel32 then
        let result := Lift ( Coq.ZArith.BinInt.Zminus l_val p_val) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, I32, CanFail) fmap_empty)
      (** Width: Half16 Calculation: #lo(L) *)
      else if beq_nat rel_type1 r_ppc64_plt16_lo then
        let result := Apply(Lo, Lift l_val) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, I16, CannotFail) fmap_empty)
      (** Width: Half16 Calculation: #hi(L) *)
      else if beq_nat rel_type1 r_ppc64_plt16_hi then
        let result := Apply(Hi, Lift l_val) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, I16, CannotFail) fmap_empty)
      (** Width: Half16 Calculation: #ha(L) *)
      else if beq_nat rel_type1 r_ppc64_plt16_ha then
        let result := Apply(Ha, Lift l_val) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, I16, CannotFail) fmap_empty)
      (** Width: Half16 Calculation: R + A *)
      else if beq_nat rel_type1 r_ppc64_sectoff then
        let result := Lift( Coq.ZArith.BinInt.Zplus r_val a_val) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, I16, CanFail) fmap_empty)
      (** Width: Half16 Calculation: #lo(R + A) *)
      else if beq_nat rel_type1 r_ppc64_sectoff_lo then
        let result := Apply(Lo, Lift ( Coq.ZArith.BinInt.Zplus r_val a_val)) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, I16, CannotFail) fmap_empty)
      (** Width: Half16 Calculation: #hi(R + A) *)
      else if beq_nat rel_type1 r_ppc64_sectoff_hi then
        let result := Apply(Hi, Lift ( Coq.ZArith.BinInt.Zplus r_val a_val)) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, I16, CannotFail) fmap_empty)
      (** Width: Half16 Calculation: #ha(R + A) *)
      else if beq_nat rel_type1 r_ppc64_sectoff_ha then
        let result := Apply(Ha, Lift ( Coq.ZArith.BinInt.Zplus r_val a_val)) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, I16, CannotFail) fmap_empty)
      (** Width: Word30 Calculation: ((S + A) - P) >> 2 *)
      else if beq_nat rel_type1 r_ppc64_addr30 then
        let result := RShift(Lift ( Coq.ZArith.BinInt.Zminus( Coq.ZArith.BinInt.Zplus s_val a_val) p_val), 2) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, Word30, CannotFail) fmap_empty)
      (** Width: I64 Calculation: S + A *)
      else if beq_nat rel_type1 r_ppc64_addr64 then
        let result := Lift( Coq.ZArith.BinInt.Zplus s_val a_val) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, I64, CannotFail) fmap_empty)
      (** Width: Half16 Calculation: #higher(S + A) *)
      else if beq_nat rel_type1 r_ppc64_addr16_higher then
        let result := Apply(Higher, Lift ( Coq.ZArith.BinInt.Zplus s_val a_val)) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, I16, CannotFail) fmap_empty)
      (** Width: Half16 Calculation: #highera(S + A) *)
      else if beq_nat rel_type1 r_ppc64_addr16_highera then
        let result := Apply(HigherA, Lift ( Coq.ZArith.BinInt.Zplus s_val a_val)) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, I16, CannotFail) fmap_empty)
      (** Width: Half16 Calculation: #highest(S + A) *)
      else if beq_nat rel_type1 r_ppc64_addr16_highest then
        let result := Apply(Highest, Lift ( Coq.ZArith.BinInt.Zplus s_val a_val)) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, I16, CannotFail) fmap_empty)
      (** Width: Half16 Calculation: #highesta(S + A) *)
      else if beq_nat rel_type1 r_ppc64_addr16_highesta then
        let result := Apply(HighestA, Lift( Coq.ZArith.BinInt.Zplus s_val a_val)) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, I16, CannotFail) fmap_empty)
      (** Width: I64 Calculation: S + A *)
      else if beq_nat rel_type1 r_ppc64_uaddr64 then
        let result := Lift( Coq.ZArith.BinInt.Zplus s_val a_val) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, I64, CannotFail) fmap_empty)
      (** Width: I64 Calculation: (S + A) - P *)
      else if beq_nat rel_type1 r_ppc64_rel64 then
        let result := Lift ( Coq.ZArith.BinInt.Zminus( Coq.ZArith.BinInt.Zplus s_val a_val) p_val) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, I64, CannotFail) fmap_empty)
      (** Width: I64 Calculation: L *)
      else if beq_nat rel_type1 r_ppc64_plt64 then
      	let result := Lift l_val in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, I64, CannotFail) fmap_empty)
      (** Width: I64 Calculation: L - P *)
      else if beq_nat rel_type1 r_ppc64_pltrel64 then
      	let result := Lift( Coq.ZArith.BinInt.Zminus l_val p_val) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, I64, CannotFail) fmap_empty)
      (** Width: Half16 Calculation: (S + A) - TOC *)
      else if beq_nat rel_type1 r_ppc64_toc16 then
      	let result := Lift ( Coq.ZArith.BinInt.Zminus( Coq.ZArith.BinInt.Zplus s_val a_val) toc_val) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, I16, CanFail) fmap_empty)
      (** Width: Half16 Calculation: #lo((S + A) - TOC) *)
      else if beq_nat rel_type1 r_ppc64_toc16_lo then
      	let result := Apply (Lo, Lift ( Coq.ZArith.BinInt.Zminus( Coq.ZArith.BinInt.Zplus s_val a_val) toc_val)) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, I16, CanFail) fmap_empty)
      (** Width: Half16 Calculation: #hi((S + A) - TOC) *)
      else if beq_nat rel_type1 r_ppc64_toc16_hi then
      	let result := Apply(Hi, Lift ( Coq.ZArith.BinInt.Zminus( Coq.ZArith.BinInt.Zplus s_val a_val) toc_val)) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, I16, CanFail) fmap_empty)
      (** Width: Half16 Calculation: #ha((S + A) - TOC) *)
      else if beq_nat rel_type1 r_ppc64_toc16_ha then
      	let result := Apply(Ha, Lift ( Coq.ZArith.BinInt.Zminus( Coq.ZArith.BinInt.Zplus s_val a_val) toc_val)) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, I16, CanFail) fmap_empty)
      (** Width: I64 Calculation: .TOC *)
      else if beq_nat rel_type1 r_ppc64_toc then
      	let result := Lift toc_val in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, I64, CannotFail) fmap_empty)
      (** Width: Half16 Calculation: M *)
      else if beq_nat rel_type1 r_ppc64_pltgot16 then
      	let result := Lift m_val in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, I16, CanFail) fmap_empty)
      (** Width: Half16 Calculation: #lo(M) *)
      else if beq_nat rel_type1 r_ppc64_pltgot16_lo then
      	let result := Apply(Lo, Lift m_val) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, I16, CannotFail) fmap_empty)
      (** Width: Half16 Calculation: #hi(M) *)
      else if beq_nat rel_type1 r_ppc64_pltgot16_hi then
      	let result := Apply(Hi, Lift m_val) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, I16, CannotFail) fmap_empty)
      (** Width: Half16 Calculation: #ha(M) *)
      else if beq_nat rel_type1 r_ppc64_pltgot16_ha then
      	let result := Apply(Ha, Lift m_val) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, I16, CannotFail) fmap_empty)
      (** Width: Half16ds Calculation: (S + A) >> 2 *)
      else if beq_nat rel_type1 r_ppc64_addr16_ds then
      	let result := RShift(Lift ( Coq.ZArith.BinInt.Zplus s_val a_val), 2) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, Half16ds, CanFail) fmap_empty)
      (** Width: Half16ds Calculation: #lo((S + A) >> 2) *)    
      else if beq_nat rel_type1 r_ppc64_addr16_lo_ds then
      	let result := Apply(Lo, RShift(Lift ( Coq.ZArith.BinInt.Zplus s_val a_val), 2)) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, Half16ds, CannotFail) fmap_empty)
      (** Width: Half16ds Calculation: G >> 2 *)
      else if beq_nat rel_type1 r_ppc64_got16_ds then
      	let result := RShift(Lift g_val, 2) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, Half16ds, CanFail) fmap_empty)
      (** Width: Half16ds Calculation: #lo(G) >> 2 *)
      else if beq_nat rel_type1 r_ppc64_got16_lo_ds then
      	let result := RShift(Apply(Lo, Lift g_val), 2) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, Half16ds, CannotFail) fmap_empty)
      (** Width: Half16ds Calculation: #lo(L) >> 2 *)
      else if beq_nat rel_type1 r_ppc64_plt16_lo_ds then
      	let result := RShift (Apply(Lo, Lift l_val), 2) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, Half16ds, CannotFail) fmap_empty)
      (** Width: Half16ds Calculation: (R + A) >> 2 *)
      else if beq_nat rel_type1 r_ppc64_sectoff_ds then
      	let result := RShift (Lift ( Coq.ZArith.BinInt.Zplus r_val a_val), 2) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, Half16ds, CanFail) fmap_empty)
      (** Width: Half16ds Calculation: #lo(R + A) >> 2 *)
      else if beq_nat rel_type1 r_ppc64_sectoff_lo_ds then
      	let result := RShift(Apply(Lo, Lift ( Coq.ZArith.BinInt.Zplus r_val a_val)), 2) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, Half16ds, CannotFail) fmap_empty)
      (** Width: Half16ds Calculation: ((S + A) - TOC) >> 2 *)
      else if beq_nat rel_type1 r_ppc64_toc16_ds then
      	let result := RShift (Lift ( Coq.ZArith.BinInt.Zminus( Coq.ZArith.BinInt.Zplus s_val a_val) toc_val), 2) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, Half16ds, CanFail) fmap_empty)
      (** Width: Half16ds Calculation: #lo((S + A) - TOC) >> 2 *)
      else if beq_nat rel_type1 r_ppc64_toc16_lo_ds then
      	let result := RShift (Apply(Lo, Lift ( Coq.ZArith.BinInt.Zminus( Coq.ZArith.BinInt.Zplus s_val a_val) toc_val)), 2) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, Half16ds, CannotFail) fmap_empty)
      (** Width: Half16ds Calculation: M >> 2 *)
      else if beq_nat rel_type1 r_ppc64_pltgot16_ds then
      	let result := RShift(Lift m_val, 2) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, Half16ds, CanFail) fmap_empty)
      (** Width: Half16ds Calculation: #lo(M) >> 2 *)
      else if beq_nat rel_type1 r_ppc64_pltgot16_lo_ds then
      	let result := RShift (Apply(Lo, Lift m_val), 2) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, Half16ds, CannotFail) fmap_empty)
      (** No width, no calculation *)
      else if beq_nat rel_type1 r_ppc64_tls then
        fail0 "abi_ppc64_apply_relocation: r_ppc64_tls not implemented"
      (** Width I64 Calculation: @dtpmod *)
      else if beq_nat rel_type1 r_ppc64_dtpmod64 then
      	let result := Lift dtpmod_val in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, I64, CannotFail) fmap_empty)
      else if beq_nat rel_type1 r_ppc64_tprel16 then
      	let result := Lift tprel_val in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, I16, CanFail) fmap_empty)
      else if beq_nat rel_type1 r_ppc64_tprel16_lo then
        let result := Apply(Lo, Lift tprel_val) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, I16, CannotFail) fmap_empty)
      else if beq_nat rel_type1 r_ppc64_tprel16_hi then
      	let result := Apply(Hi, Lift tprel_val) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, I16, CannotFail) fmap_empty)
      else if beq_nat rel_type1 r_ppc64_tprel16_ha then
      	let result := Apply(Ha, Lift tprel_val) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, I16, CannotFail) fmap_empty)
      else if beq_nat rel_type1 r_ppc64_tprel64 then
      	let result := Lift tprel_val in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, I64, CannotFail) fmap_empty)
      else if beq_nat rel_type1 r_ppc64_dtprel16 then
      	let result := Lift dtprel_val in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, I16, CanFail) fmap_empty)
      else if beq_nat rel_type1 r_ppc64_dtprel16_lo then
      	let result := Apply(Lo, Lift dtprel_val) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, I16, CannotFail) fmap_empty)
      else if beq_nat rel_type1 r_ppc64_dtprel16_hi then
      	let result := Apply(Hi, Lift dtprel_val) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, I16, CannotFail) fmap_empty)
      else if beq_nat rel_type1 r_ppc64_dtprel16_ha then
      	let result := Apply(Ha, Lift dtprel_val) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, I16, CannotFail) fmap_empty)
      else if beq_nat rel_type1 r_ppc64_dtprel64 then
      	let result := Lift dtprel_val in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, I64, CannotFail) fmap_empty)
      else if beq_nat rel_type1 r_ppc64_got_tlsgd16 then
      	let result := Lift gottlsgd_val in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, I16, CanFail) fmap_empty)
      else if beq_nat rel_type1 r_ppc64_got_tlsgd16_lo then
      	let result := Apply(Lo, Lift gottlsgd_val) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, I16, CannotFail) fmap_empty)
      else if beq_nat rel_type1 r_ppc64_got_tlsgd16_hi then
      	let result := Apply(Hi, Lift gottlsgd_val) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, I16, CannotFail) fmap_empty)
      else if beq_nat rel_type1 r_ppc64_got_tlsgd16_ha then
      	let result := Apply(Ha, Lift gottlsgd_val) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, I16, CannotFail) fmap_empty)
      else if beq_nat rel_type1 r_ppc64_got_tlsld16 then
      	let result := Lift gottlsgd_val in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, I16, CanFail) fmap_empty)
      else if beq_nat rel_type1 r_ppc64_got_tlsld16_lo then
      	let result := Apply(Lo, Lift gottlsgd_val) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, I16, CannotFail) fmap_empty)
      else if beq_nat rel_type1 r_ppc64_got_tlsld16_hi then
      	let result := Apply(Hi, Lift gottlsgd_val) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, I16, CannotFail) fmap_empty)
      else if beq_nat rel_type1 r_ppc64_got_tlsld16_ha then
      	let result := Apply(Ha, Lift gottlsgd_val) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, I16, CannotFail) fmap_empty)
      else if beq_nat rel_type1 r_ppc64_got_tprel16_ds then
      	let result := Lift gottprel_val in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, Half16ds, CanFail) fmap_empty)
      else if beq_nat rel_type1 r_ppc64_got_tprel16_lo_ds then
      	let result := Apply(Lo, Lift gottprel_val) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, Half16ds, CannotFail) fmap_empty)
      else if beq_nat rel_type1 r_ppc64_got_tprel16_hi then
      	let result := Apply(Hi, Lift gottprel_val) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, I16, CannotFail) fmap_empty)
      else if beq_nat rel_type1 r_ppc64_got_tprel16_ha then
      	let result := Apply(Ha, Lift gottprel_val) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, I16, CannotFail) fmap_empty)
      else if beq_nat rel_type1 r_ppc64_got_dtprel16_ds then
      	let result := Lift gotdtprel_val in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, Half16ds, CanFail) fmap_empty)
      else if beq_nat rel_type1 r_ppc64_got_dtprel16_lo_ds then
      	let result := Apply(Lo, Lift gotdtprel_val) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, Half16ds, CannotFail) fmap_empty)
      else if beq_nat rel_type1 r_ppc64_got_dtprel16_hi then
      	let result := Apply(Hi, Lift gotdtprel_val) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, I16, CannotFail) fmap_empty)
      else if beq_nat rel_type1 r_ppc64_got_dtprel16_ha then
      	let result := Apply(Ha, Lift gotdtprel_val) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, I16, CannotFail) fmap_empty)
      else if beq_nat rel_type1 r_ppc64_tprel16_ds then
      	let result := Lift tprel_val in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, Half16ds, CanFail) fmap_empty)
      else if beq_nat rel_type1 r_ppc64_tprel16_lo_ds then
      	let result := Apply(Lo, Lift tprel_val) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, Half16ds, CannotFail) fmap_empty)
      else if beq_nat rel_type1 r_ppc64_tprel16_higher then
      	let result := Apply(Higher, Lift tprel_val) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, I16, CannotFail) fmap_empty)
      else if beq_nat rel_type1 r_ppc64_tprel16_highera then
      	let result := Apply(HigherA, Lift tprel_val) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, I16, CannotFail) fmap_empty)
      else if beq_nat rel_type1 r_ppc64_tprel16_highest then
      	let result := Apply(Highest, Lift tprel_val) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, I16, CannotFail) fmap_empty)
      else if beq_nat rel_type1 r_ppc64_tprel16_highesta then
      	let result := Apply(HighestA, Lift tprel_val) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, I16, CannotFail) fmap_empty)
      else if beq_nat rel_type1 r_ppc64_dtprel16_ds then
      	let result := Lift dtprel_val in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, Half16ds, CanFail) fmap_empty)
      else if beq_nat rel_type1 r_ppc64_dtprel16_lo_ds then
      	let result := Apply(Lo, Lift dtprel_val) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, Half16ds, CannotFail) fmap_empty)
      else if beq_nat rel_type1 r_ppc64_dtprel16_higher then
      	let result := Apply(Higher, Lift dtprel_val) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, I16, CannotFail) fmap_empty)
      else if beq_nat rel_type1 r_ppc64_dtprel16_highera then
      	let result := Apply(HigherA, Lift dtprel_val) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, I16, CannotFail) fmap_empty)
      else if beq_nat rel_type1 r_ppc64_dtprel16_highest then
      	let result := Apply(Highest, Lift dtprel_val) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, I16, CannotFail) fmap_empty)
      else if beq_nat rel_type1 r_ppc64_dtprel16_highesta then
      	let result := Apply(HighestA, Lift dtprel_val) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, I16, CannotFail) fmap_empty)
      else
        fail0 "abi_ppc64_apply_relocation: unrecognised relocation type"  
  else
  	fail0 "abi_ppc64_apply_relocation: not a relocatable file".
