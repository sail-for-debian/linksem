(* Generated by Lem from abis/aarch64/abi_aarch64_relocation.lem. *)

Require Import Arith.
Require Import Bool.
Require Import List.
Require Import String.
Require Import Program.Wf.

Require Import coqharness.

Open Scope nat_scope.
Open Scope string_scope.

(** [abi_aarch64_relocation] contains types and definitions relating to ABI
  * specific relocation functionality for the AArch64 ABI (little-endian case).
  *)

Require Import lem_basic_classes.
Require Export lem_basic_classes.

Require Import lem_num.
Require Export lem_num.

Require Import lem_string.
Require Export lem_string.

Require Import lem_maybe.
Require Export lem_maybe.

Require Import missing_pervasives.
Require Export missing_pervasives.


Require Import error.
Require Export error.


Require Import elf_types_native_uint.
Require Export elf_types_native_uint.

Require Import elf_file.
Require Export elf_file.

Require Import elf_header.
Require Export elf_header.

Require Import elf_relocation.
Require Export elf_relocation.

Require Import elf_symbol_table.
Require Export elf_symbol_table.


Require Import abi_utilities.
Require Export abi_utilities.

Require Import memory_image.
Require Export memory_image.


(** Relocations *)

Definition r_aarch64_none    :  nat :=  0.
Definition r_aarch64_withdrawn    :  nat :=  256.  (** Treated as R_AARCH6_NONE *)

Definition r_aarch64_abs64    :  nat :=  257.
Definition r_aarch64_abs32    :  nat :=  258.
Definition r_aarch64_abs16    :  nat :=  259.
Definition r_aarch64_prel64    :  nat :=  260.
Definition r_aarch64_prel32    :  nat :=  261.
Definition r_aarch64_prel16    :  nat :=  262.

Definition r_aarch64_movw_uabs_g0    :  nat :=  263.
Definition r_aarch64_movw_uabs_g0_nc    :  nat :=  264.
Definition r_aarch64_movw_uabs_g1    :  nat :=  265.
Definition r_aarch64_movw_uabs_g1_nc    :  nat :=  266.
Definition r_aarch64_movw_uabs_g2    :  nat :=  267.
Definition r_aarch64_movw_uabs_g2_nc    :  nat :=  268.
Definition r_aarch64_movw_uabs_g3    :  nat :=  269.

Definition r_aarch64_movw_sabs_g0    :  nat :=  270.
Definition r_aarch64_movw_sabs_g1    :  nat :=  271.
Definition r_aarch64_movw_sabs_g2    :  nat :=  272.

Definition r_aarch64_ld_prel_lo19    :  nat :=  273.
Definition r_aarch64_adr_prel_lo21    :  nat :=  274.
Definition r_aarch64_adr_prel_pg_hi21    :  nat :=  275.
Definition r_aarch64_adr_prel_pg_hi21_nc    :  nat :=  276.
Definition r_aarch64_add_abs_lo12_nc    :  nat :=  277.
Definition r_aarch64_ldst8_abs_lo12_nc    :  nat :=  278.
Definition r_aarch64_ldst16_abs_lo12_nc    :  nat :=  284.
Definition r_aarch64_ldst32_abs_lo12_nc    :  nat :=  285.
Definition r_aarch64_ldst64_abs_lo12_nc    :  nat :=  286.
Definition r_aarch64_ldst128_abs_lo12_nc    :  nat :=  299.

Definition r_aarch64_tstbr14    :  nat :=  279.
Definition r_aarch64_condbr19    :  nat :=  280.
Definition r_aarch64_jump26    :  nat :=  282.
Definition r_aarch64_call26    :  nat :=  283.

Definition r_aarch64_movw_prel_g0    :  nat :=  287.
Definition r_aarch64_movw_prel_g0_nc    :  nat :=  288.
Definition r_aarch64_movw_prel_g1    :  nat :=  289.
Definition r_aarch64_movw_prel_g1_nc    :  nat :=  290.
Definition r_aarch64_movw_prel_g2    :  nat :=  291.
Definition r_aarch64_movw_prel_g2_nc    :  nat :=  292.
Definition r_aarch64_movw_prel_g3    :  nat :=  293.

Definition r_aarch64_movw_gotoff_g0    :  nat :=  300.
Definition r_aarch64_movw_gotoff_g0_nc    :  nat :=  301.
Definition r_aarch64_movw_gotoff_g1    :  nat :=  302.
Definition r_aarch64_movw_gotoff_g1_nc    :  nat :=  303.
Definition r_aarch64_movw_gotoff_g2    :  nat :=  304.
Definition r_aarch64_movw_gotoff_g2_nc    :  nat :=  305.
Definition r_aarch64_movw_gotoff_g3    :  nat :=  306.

Definition r_aarch64_gotrel64    :  nat :=  307.
Definition r_aarch64_gotrel32    :  nat :=  308.

Definition r_aarch64_got_ld_prel19    :  nat :=  309.
Definition r_aarch64_got_ld64_gotoff_lo15    :  nat :=  310.
Definition r_aarch64_adr_got_page    :  nat :=  311.
Definition r_aarch64_ld64_got_lo12_nc    :  nat :=  312.
Definition r_aarch64_ld64_gotpage_lo15    :  nat :=  313.

Definition r_aarch64_tlsgd_adr_prel21    :  nat :=  512.
Definition r_aarch64_tlsgd_adr_page21    :  nat :=  513.
Definition r_aarch64_tlsgd_add_lo12_nc    :  nat :=  514.
Definition r_aarch64_tlsgd_movw_g1    :  nat :=  515.
Definition r_aarch64_tlsgd_movw_g0_nc    :  nat :=  516.

Definition r_aarch64_tlsld_adr_prel21    :  nat :=  517.
Definition r_aarch64_tlsld_adr_page21    :  nat :=  518.
Definition r_aarch64_tlsld_add_lo12_nc    :  nat :=  519.
Definition r_aarch64_tlsld_movw_g1    :  nat :=  520.
Definition r_aarch64_tlsld_movw_g0_nc    :  nat :=  521.
Definition r_aarch64_tlsld_ld_prel19    :  nat :=  522.
Definition r_aarch64_tlsld_movw_dtprel_g2    :  nat :=  523.
Definition r_aarch64_tlsld_movw_dtprel_g1    :  nat :=  524.
Definition r_aarch64_tlsld_movw_dtprel_g1_nc    :  nat :=  525.
Definition r_aarch64_tlsld_movw_dtprel_g0    :  nat :=  526.
Definition r_aarch64_tlsld_movw_dtprel_g0_nc    :  nat :=  527.
Definition r_aarch64_tlsld_add_dtprel_hi12    :  nat :=  528.
Definition r_aarch64_tlsld_add_dtprel_lo12    :  nat :=  529.
Definition r_aarch64_tlsld_add_dtprel_lo12_nc    :  nat :=  530.
Definition r_aarch64_tlsld_ldst8_dtprel_lo12    :  nat :=  531.
Definition r_aarch64_tlsld_ldst8_dtprel_lo12_nc    :  nat :=  532.
Definition r_aarch64_tlsld_ldst16_dtprel_lo12    :  nat :=  533.
Definition r_aarch64_tlsld_ldst16_dtprel_lo12_nc    :  nat :=  534.
Definition r_aarch64_tlsld_ldst32_dtprel_lo12    :  nat :=  535.
Definition r_aarch64_tlsld_ldst32_dtprel_lo12_nc    :  nat :=  536.
Definition r_aarch64_tlsld_ldst64_dtprel_lo12    :  nat :=  537.
Definition r_aarch64_tlsld_ldst64_dtprel_lo12_nc    :  nat :=  538.
Definition r_aarch64_tlsld_ldst128_dtprel_lo12    :  nat :=  572.
Definition r_aarch64_tlsld_ldst128_dtprel_lo12_nc    :  nat :=  573.

Definition r_aarch64_tlsie_movw_gottprel_g1    :  nat :=  539.
Definition r_aarch64_tlsie_movw_gottprel_g0_nc    :  nat :=  540.
Definition r_aarch64_tlsie_movw_gottprel_page21    :  nat :=  541.
Definition r_aarch64_tlsie_movw_gottprel_lo12_nc    :  nat :=  542.
Definition r_aarch64_tlsie_movw_gottprel_prel19    :  nat :=  543.

Definition r_aarch64_tlsle_movw_tprel_g2    :  nat :=  544.
Definition r_aarch64_tlsle_movw_tprel_g1    :  nat :=  545.
Definition r_aarch64_tlsle_movw_tprel_g1_nc    :  nat :=  546.
Definition r_aarch64_tlsle_movw_tprel_g0    :  nat :=  547.
Definition r_aarch64_tlsle_movw_tprel_g0_nc    :  nat :=  548.
Definition r_aarch64_add_tprel_hi12    :  nat :=  549.
Definition r_aarch64_add_tprel_lo12    :  nat :=  550.
Definition r_aarch64_add_tprel_lo12_nc    :  nat :=  551.
Definition r_aarch64_ldst8_tprel_lo12    :  nat :=  552.
Definition r_aarch64_ldst8_tprel_lo12_nc    :  nat :=  553.
Definition r_aarch64_ldst16_tprel_lo12    :  nat :=  554.
Definition r_aarch64_ldst16_tprel_lo12_nc    :  nat :=  555.
Definition r_aarch64_ldst32_tprel_lo12    :  nat :=  556.
Definition r_aarch64_ldst32_tprel_lo12_nc    :  nat :=  557.
Definition r_aarch64_ldst64_tprel_lo12    :  nat :=  558.
Definition r_aarch64_ldst64_tprel_lo12_nc    :  nat :=  559.
Definition r_aarch64_ldst128_tprel_lo12    :  nat :=  570.
Definition r_aarch64_ldst128_tprel_lo12_nc    :  nat :=  571.

Definition r_aarch64_tlsdesc_ld_prel19    :  nat :=  560.
Definition r_aarch64_tlsdesc_adr_prel21    :  nat :=  561.
Definition r_aarch64_tlsdesc_adr_page21    :  nat :=  562.
Definition r_aarch64_tlsdesc_ld64_lo12    :  nat :=  563.
Definition r_aarch64_tlsdesc_add_lo12    :  nat :=  564.
Definition r_aarch64_tlsdesc_off_g1    :  nat :=  565.
Definition r_aarch64_tlsdesc_off_g0_nc    :  nat :=  566.
Definition r_aarch64_tlsdesc_ldr    :  nat :=  567.
Definition r_aarch64_tlsdesc_add    :  nat :=  568.
Definition r_aarch64_tlsdesc_call    :  nat :=  569.

Definition r_aarch64_copy    :  nat :=  1024.
Definition r_aarch64_glob_dat    :  nat :=  1025.
Definition r_aarch64_jump_slot    :  nat :=  1026.
Definition r_aarch64_relative    :  nat :=  1027.
Definition r_aarch64_tls_dtprel64    :  nat :=  1028.
Definition r_aarch64_tls_dtpmod64    :  nat :=  1029.
Definition r_aarch64_tls_tprel64    :  nat :=  1030.
Definition r_aarch64_tlsdesc    :  nat :=  1031.
Definition r_aarch64_irelative    :  nat :=  1032.
(* [?]: removed value specification. *)

(* [?]: removed value specification. *)

Definition aarch64_le_reloc {abifeature : Type}  (r : nat )  : (bool *(annotated_memory_image abifeature -> nat  -> symbol_reference_and_reloc_site  -> (nat *(nat  -> Z  -> nat  -> nat )) % type)) % type:= 
  if beq_nat r r_aarch64_none then
    (false, (fun (img3 : annotated_memory_image abifeature) => (fun (site_addr : nat ) => (fun (rr : symbol_reference_and_reloc_site ) => ( 0, (fun (s : nat ) => fun (a : Z ) => fun (e : nat ) => e))))))
  else
    (false, noop_reloc_apply).
(* [?]: removed value specification. *)

Definition abi_aarch64_apply_relocation  (rel : elf64_relocation_a ) (s_val : Z ) (p_val : Z ) (got_val : Z ) (ef : elf64_file )  : error (fmap (elf64_addr ) ((relocation_operator_expression (Z )*integer_bit_width *can_fail (Z )) % type)):= 
  if is_elf64_relocatable_file(elf64_file_header ef) then
    let rel_type1 := get_elf64_relocation_a_type rel in
    let a_val    := int_of_elf64_sxword(elf64_ra_addend rel) in
      (** No width, no calculation *)
      if beq_nat rel_type1 r_aarch64_none then
        return0 fmap_empty
      (** No width, no calculation *)
      else if beq_nat rel_type1 r_aarch64_withdrawn then
        return0 fmap_empty
      (** Signed 64 bit width, calculation: S + A *)
      else if beq_nat rel_type1 r_aarch64_abs64 then
      	let result := Lift ( Coq.ZArith.BinInt.Zplus s_val a_val) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, I64, CannotFail) fmap_empty)
      (** Signed 32 bit width, calculation: S + A *)
      else if beq_nat rel_type1 r_aarch64_abs32 then
      	let result := Lift ( Coq.ZArith.BinInt.Zplus s_val a_val) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, I32, CanFail) fmap_empty)
      (** Signed 16 bith width, calculation: S + A *)
      else if beq_nat rel_type1 r_aarch64_abs16 then
      	let result := Lift ( Coq.ZArith.BinInt.Zplus s_val a_val) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, I16, CanFail) fmap_empty)
      (** Signed 64 bit width, calculation: S + A - P *)
      else if beq_nat rel_type1 r_aarch64_prel64 then
      	let result := Lift ( Coq.ZArith.BinInt.Zminus( Coq.ZArith.BinInt.Zplus s_val a_val) p_val) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, I64, CannotFail) fmap_empty)
      (** Signed 32 bit width, calculation: S + A - P *)
      else if beq_nat rel_type1 r_aarch64_prel32 then
      	let result := Lift ( Coq.ZArith.BinInt.Zminus( Coq.ZArith.BinInt.Zplus s_val a_val) p_val) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, I32, CanFail) fmap_empty)
      (** Signed 16 bit width, calculation: S + A - P *)
      else if beq_nat rel_type1 r_aarch64_prel16 then
      	let result := Lift ( Coq.ZArith.BinInt.Zminus( Coq.ZArith.BinInt.Zplus s_val a_val) p_val) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, I16, CanFail) fmap_empty)
      else if beq_nat rel_type1 r_aarch64_movw_uabs_g0 then
      	let result := Lift ( Coq.ZArith.BinInt.Zplus s_val a_val) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, U16, CanFail) fmap_empty)
      else if beq_nat rel_type1 r_aarch64_movw_uabs_g0_nc then
      	let result := Lift ( Coq.ZArith.BinInt.Zplus s_val a_val) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, U16, CannotFail) fmap_empty)
      else if beq_nat rel_type1 r_aarch64_movw_uabs_g1 then
      	let result := Lift ( Coq.ZArith.BinInt.Zplus s_val a_val) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, U32, CanFail) fmap_empty)
      else if beq_nat rel_type1 r_aarch64_movw_uabs_g1_nc then
      	let result := Lift ( Coq.ZArith.BinInt.Zplus s_val a_val) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, U32, CannotFail) fmap_empty)
      else if beq_nat rel_type1 r_aarch64_movw_uabs_g2 then
      	let result := Lift ( Coq.ZArith.BinInt.Zplus s_val a_val) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, U48, CanFail) fmap_empty)
      else if beq_nat rel_type1 r_aarch64_movw_uabs_g2_nc then
      	let result := Lift ( Coq.ZArith.BinInt.Zplus s_val a_val) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, U48, CannotFail) fmap_empty)
      else if beq_nat rel_type1 r_aarch64_movw_uabs_g3 then
      	let result := Lift ( Coq.ZArith.BinInt.Zplus s_val a_val) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, U64, CannotFail) fmap_empty)
      else if beq_nat rel_type1 r_aarch64_movw_sabs_g0 then
      	let result := Lift ( Coq.ZArith.BinInt.Zplus s_val a_val) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, I16, CanFail) fmap_empty)
      else if beq_nat rel_type1 r_aarch64_movw_sabs_g1 then
      	let result := Lift ( Coq.ZArith.BinInt.Zplus s_val a_val) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, I32, CanFail) fmap_empty)
      else if beq_nat rel_type1 r_aarch64_movw_sabs_g2 then
      	let result := Lift ( Coq.ZArith.BinInt.Zplus s_val a_val) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, I48, CanFail) fmap_empty)
      else if beq_nat rel_type1 r_aarch64_ld_prel_lo19 then
      	let result := Lift ( Coq.ZArith.BinInt.Zminus( Coq.ZArith.BinInt.Zplus s_val a_val) p_val) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, I20, CanFail) fmap_empty)
      else if beq_nat rel_type1 r_aarch64_adr_prel_lo21 then
      	let result := Lift ( Coq.ZArith.BinInt.Zminus( Coq.ZArith.BinInt.Zplus s_val a_val) p_val) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, I20, CanFail) fmap_empty)
      else if beq_nat rel_type1 r_aarch64_adr_prel_pg_hi21 then
      	let result := Minus(Apply(Page, Lift ( Coq.ZArith.BinInt.Zplus s_val a_val)), Apply(Page, Lift p_val)) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, I32, CanFail) fmap_empty)
      else if beq_nat rel_type1 r_aarch64_adr_prel_pg_hi21_nc then
      	let result := Minus (Apply(Page, Lift ( Coq.ZArith.BinInt.Zplus s_val a_val)), Apply(Page, Lift p_val)) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, I32, CannotFail) fmap_empty)
      else if beq_nat rel_type1 r_aarch64_add_abs_lo12_nc then
      	let result := Lift ( Coq.ZArith.BinInt.Zplus s_val a_val) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, I32, CannotFail) fmap_empty)
      else if beq_nat rel_type1 r_aarch64_ldst8_abs_lo12_nc then
      	let result := Lift ( Coq.ZArith.BinInt.Zplus s_val a_val) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, I32, CannotFail) fmap_empty)
      else if beq_nat rel_type1 r_aarch64_ldst16_abs_lo12_nc then
      	let result := Lift ( Coq.ZArith.BinInt.Zplus s_val a_val) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, I32, CannotFail) fmap_empty)
      else if beq_nat rel_type1 r_aarch64_ldst32_abs_lo12_nc then
      	let result := Lift ( Coq.ZArith.BinInt.Zplus s_val a_val) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, I32, CannotFail) fmap_empty)
      else if beq_nat rel_type1 r_aarch64_ldst64_abs_lo12_nc then
      	let result := Lift ( Coq.ZArith.BinInt.Zplus s_val a_val) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, I32, CannotFail) fmap_empty)
      else if beq_nat rel_type1 r_aarch64_ldst128_abs_lo12_nc then
      	let result := Lift ( Coq.ZArith.BinInt.Zplus s_val a_val) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, I32, CannotFail) fmap_empty)
      else if beq_nat rel_type1 r_aarch64_tstbr14 then
      	let result := Lift ( Coq.ZArith.BinInt.Zminus( Coq.ZArith.BinInt.Zplus s_val a_val) p_val) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, I15, CanFail) fmap_empty)
      else if beq_nat rel_type1 r_aarch64_condbr19 then
      	let result := Lift ( Coq.ZArith.BinInt.Zminus( Coq.ZArith.BinInt.Zplus s_val a_val) p_val) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, I20, CanFail) fmap_empty)
      else if beq_nat rel_type1 r_aarch64_jump26 then
      	let result := Lift ( Coq.ZArith.BinInt.Zminus( Coq.ZArith.BinInt.Zplus s_val a_val) p_val) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, I27, CanFail) fmap_empty)
      else if beq_nat rel_type1 r_aarch64_call26 then
      	let result := Lift ( Coq.ZArith.BinInt.Zminus( Coq.ZArith.BinInt.Zplus s_val a_val) p_val) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, I27, CanFail) fmap_empty)
      else if beq_nat rel_type1 r_aarch64_movw_prel_g0 then
      	let result := Lift ( Coq.ZArith.BinInt.Zminus( Coq.ZArith.BinInt.Zplus s_val a_val) p_val) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, I16, CanFail) fmap_empty)
      else if beq_nat rel_type1 r_aarch64_movw_prel_g0_nc then
      	let result := Lift ( Coq.ZArith.BinInt.Zminus( Coq.ZArith.BinInt.Zplus s_val a_val) p_val) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, I16, CannotFail) fmap_empty)
      else if beq_nat rel_type1 r_aarch64_movw_prel_g1 then
      	let result := Lift ( Coq.ZArith.BinInt.Zminus( Coq.ZArith.BinInt.Zplus s_val a_val) p_val) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, I32, CanFail) fmap_empty)
      else if beq_nat rel_type1 r_aarch64_movw_prel_g1_nc then
      	let result := Lift ( Coq.ZArith.BinInt.Zminus( Coq.ZArith.BinInt.Zplus s_val a_val) p_val) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, I32, CannotFail) fmap_empty)
      else if beq_nat rel_type1 r_aarch64_movw_prel_g2 then
      	let result := Lift ( Coq.ZArith.BinInt.Zminus( Coq.ZArith.BinInt.Zplus s_val a_val) p_val) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, I48, CanFail) fmap_empty)
      else if beq_nat rel_type1 r_aarch64_movw_prel_g2_nc then
      	let result := Lift ( Coq.ZArith.BinInt.Zminus( Coq.ZArith.BinInt.Zplus s_val a_val) p_val) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, I48, CannotFail) fmap_empty)
      else if beq_nat rel_type1 r_aarch64_movw_prel_g3 then
      	let result := Lift ( Coq.ZArith.BinInt.Zminus( Coq.ZArith.BinInt.Zplus s_val a_val) p_val) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, I64, CannotFail) fmap_empty)
      else if beq_nat rel_type1 r_aarch64_movw_gotoff_g0 then
      	let result := Minus (Apply(G, Apply(GDat, Lift ( Coq.ZArith.BinInt.Zplus s_val a_val))), Lift got_val) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, I16, CanFail) fmap_empty)
      else if beq_nat rel_type1 r_aarch64_movw_gotoff_g0_nc then
      	let result := Minus (Apply(G, Apply(GDat, Lift ( Coq.ZArith.BinInt.Zplus s_val a_val))), Lift got_val) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, I16, CannotFail) fmap_empty)
      else if beq_nat rel_type1 r_aarch64_movw_gotoff_g1 then
      	let result := Minus (Apply(G, Apply(GDat, Lift ( Coq.ZArith.BinInt.Zplus s_val a_val))), Lift got_val) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, I32, CanFail) fmap_empty)
      else if beq_nat rel_type1 r_aarch64_movw_gotoff_g1_nc then
      	let result := Minus (Apply(G, Apply(GDat, Lift ( Coq.ZArith.BinInt.Zplus s_val a_val))), Lift got_val) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, I32, CannotFail) fmap_empty)
      else if beq_nat rel_type1 r_aarch64_movw_gotoff_g2 then
      	let result := Minus (Apply(G, Apply(GDat, Lift ( Coq.ZArith.BinInt.Zplus s_val a_val))), Lift got_val) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, I48, CanFail) fmap_empty)
      else if beq_nat rel_type1 r_aarch64_movw_gotoff_g2_nc then
      	let result := Minus (Apply(G, Apply(GDat, Lift ( Coq.ZArith.BinInt.Zplus s_val a_val))), Lift got_val) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, I32, CannotFail) fmap_empty)
      else if beq_nat rel_type1 r_aarch64_movw_gotoff_g3 then
      	let result := Minus (Apply(G, Apply(GDat, Lift ( Coq.ZArith.BinInt.Zplus s_val a_val))), Lift got_val) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, I64, CannotFail) fmap_empty)
      else if beq_nat rel_type1 r_aarch64_gotrel64 then
      	let result := Lift ( Coq.ZArith.BinInt.Zminus( Coq.ZArith.BinInt.Zplus s_val a_val) got_val) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, I64, CannotFail) fmap_empty)
      else if beq_nat rel_type1 r_aarch64_gotrel32 then
      	let result := Lift ( Coq.ZArith.BinInt.Zminus( Coq.ZArith.BinInt.Zplus s_val a_val) got_val) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, I32, CanFail) fmap_empty)
      else if beq_nat rel_type1 r_aarch64_got_ld_prel19 then
      	let result := Minus (Apply(G, Apply(GDat, Lift ( Coq.ZArith.BinInt.Zplus s_val a_val))), Lift p_val) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, I20, CanFail) fmap_empty)
      else if beq_nat rel_type1 r_aarch64_got_ld64_gotoff_lo15 then
      	let result := Minus (Apply(G, Apply(GDat, Lift ( Coq.ZArith.BinInt.Zplus s_val a_val))), Lift got_val) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, U15, CanFail) fmap_empty)
      else if beq_nat rel_type1 r_aarch64_adr_got_page then
      	let result := Minus (Apply(Page, Apply(G, Apply(GDat, Lift ( Coq.ZArith.BinInt.Zplus s_val a_val)))), Apply(Page, Lift p_val)) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, I32, CanFail) fmap_empty)
      else if beq_nat rel_type1 r_aarch64_ld64_got_lo12_nc then
        (** requires ad hoc check *)
      	let result := Apply(G, Apply(GDat, Lift ( Coq.ZArith.BinInt.Zplus s_val a_val))) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, I20, CannotFail) fmap_empty)
      else if beq_nat rel_type1 r_aarch64_ld64_gotpage_lo15 then
        (** requires ad hoc check *)
      	let result := Minus(Apply(G, Apply(GDat, Lift ( Coq.ZArith.BinInt.Zplus s_val a_val))), Apply(Page, Lift got_val)) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, U15, CanFail) fmap_empty)
      else if beq_nat rel_type1 r_aarch64_tlsgd_adr_prel21 then
      	let result := Minus(Apply(G, Apply2(GTLSIdx, Lift s_val, Lift a_val)), Lift p_val) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, I20, CanFail) fmap_empty)
      else if beq_nat rel_type1 r_aarch64_tlsgd_adr_page21 then
      	let result := Minus(Apply(Page, Apply(G, Apply2(GTLSIdx, Lift s_val, Lift a_val))), Apply(Page, Lift p_val)) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, I32, CanFail) fmap_empty)
      else if beq_nat rel_type1 r_aarch64_tlsgd_add_lo12_nc then
      	let result := Apply(G, Apply2(GTLSIdx, Lift s_val, Lift a_val)) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, I12, CannotFail) fmap_empty)
      else if beq_nat rel_type1 r_aarch64_tlsgd_movw_g1 then
        (** requires ad hoc check *)
      	let result := Minus(Apply(G, Apply2(GTLSIdx, Lift s_val, Lift a_val)), Lift got_val) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, I16, CannotFail) fmap_empty)
      else if beq_nat rel_type1 r_aarch64_tlsgd_movw_g0_nc then
      	let result := Minus(Apply(G, Apply2 (GTLSIdx, Lift s_val, Lift a_val)), Lift got_val) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, I16, CannotFail) fmap_empty)
      else if beq_nat rel_type1 r_aarch64_tlsld_adr_prel21 then
        let result := Minus(Apply(G, Apply(GLDM, Lift s_val)), Lift p_val) in
       	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, I20, CanFail) fmap_empty)
      else if beq_nat rel_type1 r_aarch64_tlsld_adr_page21 then
        let result := Minus(Apply(G, Apply(GLDM, Lift s_val)), Apply(Page, Lift p_val)) in
       	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, I32, CanFail) fmap_empty)
      else if beq_nat rel_type1 r_aarch64_tlsld_add_lo12_nc then
        let result := Apply(G, Apply(GLDM, Lift s_val)) in
       	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, I32, CannotFail) fmap_empty)
      else if beq_nat rel_type1 r_aarch64_tlsld_movw_g1 then
        let result := Minus(Apply(G, Apply(GLDM, Lift s_val)), Lift got_val) in
       	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, I15, CanFail) fmap_empty)
      else if beq_nat rel_type1 r_aarch64_tlsld_movw_g0_nc then
        let result := Minus(Apply(G, Apply(GLDM, Lift s_val)), Lift got_val) in
       	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, I15, CannotFail) fmap_empty)
      else if beq_nat rel_type1 r_aarch64_tlsld_ld_prel19 then
        let result := Minus(Apply(G, Apply(GLDM, Lift s_val)), Lift p_val) in
       	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, I20, CanFail) fmap_empty)
      else if beq_nat rel_type1 r_aarch64_tlsld_movw_dtprel_g2 then
        let result := Apply(DTPRel, Lift( Coq.ZArith.BinInt.Zplus s_val a_val)) in
       	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, I15, CanFail) fmap_empty)
      else if beq_nat rel_type1 r_aarch64_tlsld_movw_dtprel_g1 then
        let result := Apply(DTPRel, Lift( Coq.ZArith.BinInt.Zplus s_val a_val)) in
       	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, I15, CanFail) fmap_empty)
      else if beq_nat rel_type1 r_aarch64_tlsld_movw_dtprel_g1_nc then
        let result := Apply(DTPRel, Lift( Coq.ZArith.BinInt.Zplus s_val a_val)) in
       	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, I15, CannotFail) fmap_empty)
      else if beq_nat rel_type1 r_aarch64_tlsld_movw_dtprel_g0 then
        let result := Apply(DTPRel, Lift( Coq.ZArith.BinInt.Zplus s_val a_val)) in
       	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, I15, CanFail) fmap_empty)
      else if beq_nat rel_type1 r_aarch64_tlsld_movw_dtprel_g0_nc then
        let result := Apply(DTPRel, Lift( Coq.ZArith.BinInt.Zplus s_val a_val)) in
       	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, I15, CannotFail) fmap_empty)
      else if beq_nat rel_type1 r_aarch64_tlsld_add_dtprel_hi12 then
        let result := Apply(DTPRel, Lift( Coq.ZArith.BinInt.Zplus s_val a_val)) in
       	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, U24, CanFail) fmap_empty)
      else if beq_nat rel_type1 r_aarch64_tlsld_add_dtprel_lo12 then
        let result := Apply(DTPRel, Lift( Coq.ZArith.BinInt.Zplus s_val a_val)) in
       	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, U12, CanFail) fmap_empty)
      else if beq_nat rel_type1 r_aarch64_tlsld_add_dtprel_lo12_nc then
        let result := Apply(DTPRel, Lift( Coq.ZArith.BinInt.Zplus s_val a_val)) in
       	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, U12, CannotFail) fmap_empty)
      else if beq_nat rel_type1 r_aarch64_tlsld_ldst8_dtprel_lo12 then
        let result := Apply(DTPRel, Lift( Coq.ZArith.BinInt.Zplus s_val a_val)) in
       	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, U12, CanFail) fmap_empty)
      else if beq_nat rel_type1 r_aarch64_tlsld_ldst8_dtprel_lo12_nc then
        let result := Apply(DTPRel, Lift( Coq.ZArith.BinInt.Zplus s_val a_val)) in
       	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, U12, CannotFail) fmap_empty)
      else if beq_nat rel_type1 r_aarch64_tlsld_ldst16_dtprel_lo12 then
        let result := Apply(DTPRel, Lift( Coq.ZArith.BinInt.Zplus s_val a_val)) in
       	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, U12, CanFail) fmap_empty)
      else if beq_nat rel_type1 r_aarch64_tlsld_ldst16_dtprel_lo12_nc then
        let result := Apply(DTPRel, Lift( Coq.ZArith.BinInt.Zplus s_val a_val)) in
       	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, U12, CannotFail) fmap_empty)
      else if beq_nat rel_type1 r_aarch64_tlsld_ldst32_dtprel_lo12 then
        let result := Apply(DTPRel, Lift( Coq.ZArith.BinInt.Zplus s_val a_val)) in
       	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, U12, CanFail) fmap_empty)
      else if beq_nat rel_type1 r_aarch64_tlsld_ldst32_dtprel_lo12_nc then
        let result := Apply(DTPRel, Lift( Coq.ZArith.BinInt.Zplus s_val a_val)) in
       	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, U12, CannotFail) fmap_empty)
      else if beq_nat rel_type1 r_aarch64_tlsld_ldst64_dtprel_lo12 then
        let result := Apply(DTPRel, Lift( Coq.ZArith.BinInt.Zplus s_val a_val)) in
       	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, U12, CanFail) fmap_empty)
      else if beq_nat rel_type1 r_aarch64_tlsld_ldst64_dtprel_lo12_nc then
        let result := Apply(DTPRel, Lift( Coq.ZArith.BinInt.Zplus s_val a_val)) in
       	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, U12, CannotFail) fmap_empty)
      else if beq_nat rel_type1 r_aarch64_tlsld_ldst128_dtprel_lo12 then
        let result := Apply(DTPRel, Lift( Coq.ZArith.BinInt.Zplus s_val a_val)) in
       	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, U12, CanFail) fmap_empty)
      else if beq_nat rel_type1 r_aarch64_tlsld_ldst128_dtprel_lo12_nc then
        let result := Apply(DTPRel, Lift( Coq.ZArith.BinInt.Zplus s_val a_val)) in
       	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, U12, CannotFail) fmap_empty)
      else if beq_nat rel_type1 r_aarch64_tlsie_movw_gottprel_g1 then
        let result := Minus(Apply(G, Apply(GTPRel, Lift ( Coq.ZArith.BinInt.Zplus s_val a_val))), Lift got_val) in
       	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, I15, CanFail) fmap_empty)
      else if beq_nat rel_type1 r_aarch64_tlsie_movw_gottprel_g0_nc then
        let result := Minus(Apply(G, Apply(GTPRel, Lift ( Coq.ZArith.BinInt.Zplus s_val a_val))), Lift got_val) in
       	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, I15, CannotFail) fmap_empty)
      else if beq_nat rel_type1 r_aarch64_tlsie_movw_gottprel_page21 then
        let result := Minus(Apply(Page, Apply(G, Apply(GTPRel, Lift ( Coq.ZArith.BinInt.Zplus s_val a_val)))), Apply(Page, Lift p_val)) in
       	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, I32, CanFail) fmap_empty)
      else if beq_nat rel_type1 r_aarch64_tlsie_movw_gottprel_lo12_nc then
        (** requires ad hoc check *)
        let result := Apply(G, Apply(GTPRel, Lift ( Coq.ZArith.BinInt.Zplus s_val a_val))) in
       	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, I8, CannotFail) fmap_empty)
      else if beq_nat rel_type1 r_aarch64_tlsie_movw_gottprel_prel19 then
        let result := Minus(Apply(G, Apply(GTPRel, Lift ( Coq.ZArith.BinInt.Zplus s_val a_val))), Lift p_val) in
       	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, I20, CanFail) fmap_empty)
      else if beq_nat rel_type1 r_aarch64_tlsle_movw_tprel_g2 then
      	let result := Apply(TPRel, Lift ( Coq.ZArith.BinInt.Zplus s_val a_val)) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, U16, CanFail) fmap_empty)
      else if beq_nat rel_type1 r_aarch64_tlsle_movw_tprel_g1 then
      	let result := Apply(TPRel, Lift ( Coq.ZArith.BinInt.Zplus s_val a_val)) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, U16, CanFail) fmap_empty)
      else if beq_nat rel_type1 r_aarch64_tlsle_movw_tprel_g1_nc then
      	let result := Apply(TPRel, Lift ( Coq.ZArith.BinInt.Zplus s_val a_val)) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, U16, CannotFail) fmap_empty)
      else if beq_nat rel_type1 r_aarch64_tlsle_movw_tprel_g0 then
      	let result := Apply(TPRel, Lift ( Coq.ZArith.BinInt.Zplus s_val a_val)) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, U16, CanFail) fmap_empty)
      else if beq_nat rel_type1 r_aarch64_tlsle_movw_tprel_g0_nc then
      	let result := Apply(TPRel, Lift ( Coq.ZArith.BinInt.Zplus s_val a_val)) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, U16, CannotFail) fmap_empty)
      else if beq_nat rel_type1 r_aarch64_add_tprel_hi12 then
      	let result := Apply(TPRel, Lift ( Coq.ZArith.BinInt.Zplus s_val a_val)) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, U24, CanFail) fmap_empty)
      else if beq_nat rel_type1 r_aarch64_add_tprel_lo12 then
      	let result := Apply(TPRel, Lift ( Coq.ZArith.BinInt.Zplus s_val a_val)) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, U12, CanFail) fmap_empty)
      else if beq_nat rel_type1 r_aarch64_add_tprel_lo12_nc then
      	let result := Apply(TPRel, Lift ( Coq.ZArith.BinInt.Zplus s_val a_val)) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, U12, CannotFail) fmap_empty)
      else if beq_nat rel_type1 r_aarch64_ldst8_tprel_lo12 then
      	let result := Apply(TPRel, Lift ( Coq.ZArith.BinInt.Zplus s_val a_val)) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, U12, CanFail) fmap_empty)
      else if beq_nat rel_type1 r_aarch64_ldst8_tprel_lo12_nc then
      	let result := Apply(TPRel, Lift ( Coq.ZArith.BinInt.Zplus s_val a_val)) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, U12, CannotFail) fmap_empty)
      else if beq_nat rel_type1 r_aarch64_ldst16_tprel_lo12 then
      	let result := Apply(TPRel, Lift ( Coq.ZArith.BinInt.Zplus s_val a_val)) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, U12, CanFail) fmap_empty)
      else if beq_nat rel_type1 r_aarch64_ldst16_tprel_lo12_nc then
      	let result := Apply(TPRel, Lift ( Coq.ZArith.BinInt.Zplus s_val a_val)) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, U12, CannotFail) fmap_empty)
      else if beq_nat rel_type1 r_aarch64_ldst32_tprel_lo12 then
      	let result := Apply(TPRel, Lift ( Coq.ZArith.BinInt.Zplus s_val a_val)) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, U12, CanFail) fmap_empty)
      else if beq_nat rel_type1 r_aarch64_ldst32_tprel_lo12_nc then
      	let result := Apply(TPRel, Lift ( Coq.ZArith.BinInt.Zplus s_val a_val)) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, U12, CannotFail) fmap_empty)
      else if beq_nat rel_type1 r_aarch64_ldst64_tprel_lo12 then
      	let result := Apply(TPRel, Lift ( Coq.ZArith.BinInt.Zplus s_val a_val)) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, U12, CanFail) fmap_empty)
      else if beq_nat rel_type1 r_aarch64_ldst64_tprel_lo12_nc then
      	let result := Apply(TPRel, Lift ( Coq.ZArith.BinInt.Zplus s_val a_val)) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, U12, CannotFail) fmap_empty)
      else if beq_nat rel_type1 r_aarch64_ldst128_tprel_lo12 then
      	let result := Apply(TPRel, Lift ( Coq.ZArith.BinInt.Zplus s_val a_val)) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, U12, CanFail) fmap_empty)
      else if beq_nat rel_type1 r_aarch64_ldst128_tprel_lo12_nc then
      	let result := Apply(TPRel, Lift ( Coq.ZArith.BinInt.Zplus s_val a_val)) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, U12, CannotFail) fmap_empty)
      else if beq_nat rel_type1 r_aarch64_tlsdesc_ld_prel19 then
        (** requires ad hoc test *)
      	let result := Minus(Apply(G, Apply(GTLSDesc, Lift ( Coq.ZArith.BinInt.Zplus s_val a_val))), Lift p_val) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, I20, CanFail) fmap_empty)
      else if beq_nat rel_type1 r_aarch64_tlsdesc_adr_prel21 then
      	let result := Minus (Apply(G, Apply(GTLSDesc, Lift ( Coq.ZArith.BinInt.Zplus s_val a_val))), Lift p_val) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, I20, CanFail) fmap_empty)
      else if beq_nat rel_type1 r_aarch64_tlsdesc_adr_page21 then
      	let result := Minus(Apply(Page, Apply(G, Apply(GTLSDesc, Lift( Coq.ZArith.BinInt.Zplus s_val a_val)))), Apply(Page, Lift p_val)) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, I32, CanFail) fmap_empty)
      else if beq_nat rel_type1 r_aarch64_tlsdesc_ld64_lo12 then
        (** requires ad hoc test *)
      	let result := Apply(G, Apply(GTLSDesc, Lift ( Coq.ZArith.BinInt.Zplus s_val a_val))) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, I20, CanFail) fmap_empty)
      else if beq_nat rel_type1 r_aarch64_tlsdesc_add_lo12 then
      	let result := Apply(G, Apply(GTLSDesc, Lift ( Coq.ZArith.BinInt.Zplus s_val a_val))) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, I32, CannotFail) fmap_empty)
      else if beq_nat rel_type1 r_aarch64_tlsdesc_off_g1 then
      	let result := Minus(Apply(G, Apply(GTLSDesc, Lift ( Coq.ZArith.BinInt.Zplus s_val a_val))), Lift got_val) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, I32, CanFail) fmap_empty)
      else if beq_nat rel_type1 r_aarch64_tlsdesc_off_g0_nc then
      	let result := Minus(Apply(G, Apply(GTLSDesc, Lift ( Coq.ZArith.BinInt.Zplus s_val a_val))), Lift got_val) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, I32, CannotFail) fmap_empty)
      else if beq_nat rel_type1 r_aarch64_tlsdesc_ldr then
        return0 fmap_empty
      else if beq_nat rel_type1 r_aarch64_tlsdesc_add then
        return0 fmap_empty
      else if beq_nat rel_type1 r_aarch64_tlsdesc_call then
        return0 fmap_empty
      else if beq_nat rel_type1 r_aarch64_copy then
        fail0 "AARCH64_COPY"
      else if beq_nat rel_type1 r_aarch64_glob_dat then
      	let result := Lift ( Coq.ZArith.BinInt.Zplus s_val a_val) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, I64, CannotFail) fmap_empty)
      else if beq_nat rel_type1 r_aarch64_jump_slot then
      	let result := Lift ( Coq.ZArith.BinInt.Zplus s_val a_val) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, I64, CannotFail) fmap_empty)
      else if beq_nat rel_type1 r_aarch64_relative then
      	let result := Plus(Apply(Delta, Lift s_val), Lift a_val) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, I64, CannotFail) fmap_empty)
      else if beq_nat rel_type1 r_aarch64_tls_dtprel64 then
      	let result := Apply(DTPRel, Lift ( Coq.ZArith.BinInt.Zplus s_val a_val)) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, I64, CannotFail) fmap_empty)
      else if beq_nat rel_type1 r_aarch64_tls_dtpmod64 then
      	let result := Apply(LDM, Lift s_val) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, I64, CannotFail) fmap_empty)
      else if beq_nat rel_type1 r_aarch64_tls_tprel64 then
      	let result := Apply(TPRel, Lift ( Coq.ZArith.BinInt.Zplus s_val a_val)) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, I64, CannotFail) fmap_empty)
      else if beq_nat rel_type1 r_aarch64_tlsdesc then
      	let result := Apply(TLSDesc, Lift ( Coq.ZArith.BinInt.Zplus s_val a_val)) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, I64, CannotFail) fmap_empty)
      else if beq_nat rel_type1 r_aarch64_irelative then
      	let result := Apply(Indirect, Plus (Apply(Delta, Lift s_val), Lift a_val)) in
      	let addr   :=(elf64_ra_offset rel) in
      	return0 (fmap_add addr (result, I64, CannotFail) fmap_empty)
      else
        fail0 "Invalid AARCH64 relocation type"
  else
  	fail0 "abi_aarch64_apply_relocation: not a relocatable file".
