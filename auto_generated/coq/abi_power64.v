(* Generated by Lem from abis/power64/abi_power64.lem. *)

Require Import Arith.
Require Import Bool.
Require Import List.
Require Import String.
Require Import Program.Wf.

Require Import coqharness.

Open Scope nat_scope.
Open Scope string_scope.

(** [abi_power64] contains top-level definition for the PowerPC64 ABI.
  *)

Require Import lem_basic_classes.
Require Export lem_basic_classes.

Require Import lem_bool.
Require Export lem_bool.

Require Import lem_list.
Require Export lem_list.

Require Import lem_num.
Require Export lem_num.

Require Import lem_maybe.
Require Export lem_maybe.


Require Import byte_sequence.
Require Export byte_sequence.

Require Import error.
Require Export error.

Require Import missing_pervasives.
Require Export missing_pervasives.


Require Import elf_header.
Require Export elf_header.

Require Import elf_types_native_uint.
Require Export elf_types_native_uint.

Require Import elf_file.
Require Export elf_file.

Require Import elf_interpreted_segment.
Require Export elf_interpreted_segment.

(* [?]: removed value specification. *)

Definition abi_power64_compute_program_entry_point  (segs : list (elf64_interpreted_segment )) (entry : elf64_addr )  : error (elf64_addr ):= 
  let entry := nat_of_elf64_addr entry in
  let filtered := List.filter (
      fun (seg : elf64_interpreted_segment ) =>
        let base :=(elf64_segment_base seg) in
        let size2 :=(elf64_segment_memsz seg) in nat_lteb
          base entry && nat_lteb entry ( Coq.Init.Peano.plus base size2)
      ) segs
  in
    match ( filtered) with 
      | []  => fail0 "abi_power64_compute_program_entry_point: no program segment contains the program entry point"
      | [x] =>
        let rebase := Coq.Init.Peano.minus entry(elf64_segment_base x) in
        byte_sequence.offset_and_cut rebase( 8)(elf64_segment_body x) >>= (fun (bytes : byte_sequence ) =>
        byte_sequence.read_8_bytes_le bytes >>= 
  (fun (p : (((elf_types_local.byte *elf_types_local.byte *elf_types_local.byte *elf_types_local.byte *elf_types_local.byte *elf_types_local.byte *elf_types_local.byte *elf_types_local.byte ) % type)*byte_sequence ) % type) =>
     match ( (p) ) with ( (bytes,  _)) =>
       match ( bytes) with (b1, b2, b3, b4, b5, b6, b7, b8) =>
         return0 (elf64_addr_of_oct b1 b2 b3 b4 b5 b6 b7 b8) end end))
      | _   => fail0 "abi_power64_compute_program_entry_point: multiple program segments contain the program entry point"
    end.
