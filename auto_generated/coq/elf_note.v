(* Generated by Lem from elf_note.lem. *)

Require Import Arith.
Require Import Bool.
Require Import List.
Require Import String.
Require Import Program.Wf.

Require Import coqharness.

Open Scope nat_scope.
Open Scope string_scope.

(** [elf_note] contains data types and functions for interpreting the .note
  * section/segment of an ELF file, and extracting information from that
  * section/segment.
  *)

Require Import lem_basic_classes.
Require Export lem_basic_classes.

Require Import lem_list.
Require Export lem_list.

Require Import lem_num.
Require Export lem_num.

Require Import lem_string.
Require Export lem_string.


Require Import byte_sequence.
Require Export byte_sequence.

Require Import endianness.
Require Export endianness.

Require Import error.
Require Export error.

Require Import missing_pervasives.
Require Export missing_pervasives.

Require Import show.
Require Export show.


Require Import elf_program_header_table.
Require Export elf_program_header_table.

Require Import elf_section_header_table.
Require Export elf_section_header_table.

Require Import elf_types_native_uint.
Require Export elf_types_native_uint.


(** [elf32_note] represents the contents of a .note section or segment.
  *)
Record elf32_note : Type :=
  { elf32_note_namesz : elf32_word  (** The size of the name field. *)
   ; elf32_note_descsz : elf32_word  (** The size of the description field. *)
   ; elf32_note_type   : elf32_word  (** The type of the note. *)
   ; elf32_note_name   : list  elf_types_local.byte   (** The list of bytes (of length indicated above) corresponding to the name string. *)
   ; elf32_note_desc   : list  elf_types_local.byte   (** The list of bytes (of length indicated above) corresponding to the desc string. *)
   }.
Notation "{[ r 'with' 'elf32_note_namesz' := e ]}" := ({| elf32_note_namesz := e; elf32_note_descsz := elf32_note_descsz r; elf32_note_type := elf32_note_type r; elf32_note_name := elf32_note_name r; elf32_note_desc := elf32_note_desc r |}).
Notation "{[ r 'with' 'elf32_note_descsz' := e ]}" := ({| elf32_note_descsz := e; elf32_note_namesz := elf32_note_namesz r; elf32_note_type := elf32_note_type r; elf32_note_name := elf32_note_name r; elf32_note_desc := elf32_note_desc r |}).
Notation "{[ r 'with' 'elf32_note_type' := e ]}" := ({| elf32_note_type := e; elf32_note_namesz := elf32_note_namesz r; elf32_note_descsz := elf32_note_descsz r; elf32_note_name := elf32_note_name r; elf32_note_desc := elf32_note_desc r |}).
Notation "{[ r 'with' 'elf32_note_name' := e ]}" := ({| elf32_note_name := e; elf32_note_namesz := elf32_note_namesz r; elf32_note_descsz := elf32_note_descsz r; elf32_note_type := elf32_note_type r; elf32_note_desc := elf32_note_desc r |}).
Notation "{[ r 'with' 'elf32_note_desc' := e ]}" := ({| elf32_note_desc := e; elf32_note_namesz := elf32_note_namesz r; elf32_note_descsz := elf32_note_descsz r; elf32_note_type := elf32_note_type r; elf32_note_name := elf32_note_name r |}).
Definition elf32_note_default: elf32_note  := {| elf32_note_namesz := elf32_word_default; elf32_note_descsz := elf32_word_default; elf32_note_type := elf32_word_default; elf32_note_name := DAEMON; elf32_note_desc := DAEMON |}.
   
(** [elf64_note] represents the contents of a .note section or segment.
  *)
Record elf64_note : Type :=
  { elf64_note_namesz : elf64_xword  (** The size of the name field. *)
   ; elf64_note_descsz : elf64_xword  (** The size of the description field. *)
   ; elf64_note_type   : elf64_xword  (** The type of the note. *)
   ; elf64_note_name   : list  elf_types_local.byte    (** The list of bytes (of length indicated above) corresponding to the name string. *)
   ; elf64_note_desc   : list  elf_types_local.byte    (** The list of bytes (of length indicated above) corresponding to the desc string. *)
   }.
Notation "{[ r 'with' 'elf64_note_namesz' := e ]}" := ({| elf64_note_namesz := e; elf64_note_descsz := elf64_note_descsz r; elf64_note_type := elf64_note_type r; elf64_note_name := elf64_note_name r; elf64_note_desc := elf64_note_desc r |}).
Notation "{[ r 'with' 'elf64_note_descsz' := e ]}" := ({| elf64_note_descsz := e; elf64_note_namesz := elf64_note_namesz r; elf64_note_type := elf64_note_type r; elf64_note_name := elf64_note_name r; elf64_note_desc := elf64_note_desc r |}).
Notation "{[ r 'with' 'elf64_note_type' := e ]}" := ({| elf64_note_type := e; elf64_note_namesz := elf64_note_namesz r; elf64_note_descsz := elf64_note_descsz r; elf64_note_name := elf64_note_name r; elf64_note_desc := elf64_note_desc r |}).
Notation "{[ r 'with' 'elf64_note_name' := e ]}" := ({| elf64_note_name := e; elf64_note_namesz := elf64_note_namesz r; elf64_note_descsz := elf64_note_descsz r; elf64_note_type := elf64_note_type r; elf64_note_desc := elf64_note_desc r |}).
Notation "{[ r 'with' 'elf64_note_desc' := e ]}" := ({| elf64_note_desc := e; elf64_note_namesz := elf64_note_namesz r; elf64_note_descsz := elf64_note_descsz r; elf64_note_type := elf64_note_type r; elf64_note_name := elf64_note_name r |}).
Definition elf64_note_default: elf64_note  := {| elf64_note_namesz := elf64_xword_default; elf64_note_descsz := elf64_xword_default; elf64_note_type := elf64_xword_default; elf64_note_name := DAEMON; elf64_note_desc := DAEMON |}.
(* [?]: removed value specification. *)

Definition read_elf32_note  (endian : endianness ) (bs0 : byte_sequence )  : error ((elf32_note *byte_sequence ) % type):= 
  read_elf32_word endian bs0 >>= 
  (fun (p : (elf32_word *byte_sequence ) % type) =>
     match ( (p) ) with ( (namesz,  bs0)) =>
       read_elf32_word endian bs0 >>=
       (fun (p : (elf32_word *byte_sequence ) % type) =>
          match ( (p) ) with ( (descsz,  bs0)) =>
            read_elf32_word endian bs0 >>=
            (fun (p : (elf32_word *byte_sequence ) % type) =>
               match ( (p) ) with ( (typ,  bs0)) =>
                 repeatM' (nat_of_elf32_word namesz) bs0 read_char >>=
                 (fun (p : (list (elf_types_local.byte )*byte_sequence ) % type) =>
                    match ( (p) ) with ( (name1,  bs0)) =>
                      repeatM' (nat_of_elf32_word descsz) bs0 read_char >>=
                      (fun (p : (list (elf_types_local.byte )*byte_sequence ) % type) =>
                         match ( (p) ) with ( (desc,  bs0)) =>
                           return0
                             ({|elf32_note_namesz := namesz;elf32_note_descsz := descsz;elf32_note_type := typ;elf32_note_name := name1;elf32_note_desc := desc |},
                             bs0) end) end) end) end) end).
(* [?]: removed value specification. *)

Definition read_elf64_note  (endian : endianness ) (bs0 : byte_sequence )  : error ((elf64_note *byte_sequence ) % type):= 
  read_elf64_xword endian bs0 >>= 
  (fun (p : (elf64_xword *byte_sequence ) % type) =>
     match ( (p) ) with ( (namesz,  bs0)) =>
       read_elf64_xword endian bs0 >>=
       (fun (p : (elf64_xword *byte_sequence ) % type) =>
          match ( (p) ) with ( (descsz,  bs0)) =>
            read_elf64_xword endian bs0 >>=
            (fun (p : (elf64_xword *byte_sequence ) % type) =>
               match ( (p) ) with ( (typ,  bs0)) =>
                 repeatM' (nat_of_elf64_xword namesz) bs0 read_char >>=
                 (fun (p : (list (elf_types_local.byte )*byte_sequence ) % type) =>
                    match ( (p) ) with ( (name1,  bs0)) =>
                      repeatM' (nat_of_elf64_xword descsz) bs0 read_char >>=
                      (fun (p : (list (elf_types_local.byte )*byte_sequence ) % type) =>
                         match ( (p) ) with ( (desc,  bs0)) =>
                           return0
                             ({|elf64_note_namesz := namesz;elf64_note_descsz := descsz;elf64_note_type := typ;elf64_note_name := name1;elf64_note_desc := desc |},
                             bs0) end) end) end) end) end).
(* [?]: removed value specification. *)

Definition obtain_elf32_note_sections  (endian : endianness ) (sht : list (elf32_section_header_table_entry )) (bs0 : byte_sequence )  : error (list (elf32_note )):= 
  let note_sects :=
    List.filter (fun (x : elf32_section_header_table_entry ) => elf32_word_equal(elf32_sh_type
      x) (elf32_word_of_nat sht_note)
    ) sht
  in
    mapM (fun (x : elf32_section_header_table_entry ) =>
      let offset := nat_of_elf32_off(elf32_sh_offset x) in
      let size2   := nat_of_elf32_word(elf32_sh_size x) in
      byte_sequence.offset_and_cut offset size2 bs0 >>= (fun (rel : byte_sequence ) =>
      read_elf32_note endian rel >>= 
  (fun (p : (elf32_note *byte_sequence ) % type) =>
     match ( (p) ) with ( (note,  _)) => return0 note end))
    ) note_sects.
(* [?]: removed value specification. *)

Definition obtain_elf64_note_sections  (endian : endianness ) (sht : list (elf64_section_header_table_entry )) (bs0 : byte_sequence )  : error (list (elf64_note )):= 
  let note_sects :=
    List.filter (fun (x : elf64_section_header_table_entry ) => elf64_word_equal(elf64_sh_type
      x) (elf64_word_of_nat sht_note)
    ) sht
  in
    mapM (fun (x : elf64_section_header_table_entry ) =>
      let offset := nat_of_elf64_off(elf64_sh_offset x) in
      let size2   := nat_of_elf64_xword(elf64_sh_size x) in
      byte_sequence.offset_and_cut offset size2 bs0 >>= (fun (rel : byte_sequence ) =>
      read_elf64_note endian rel >>= 
  (fun (p : (elf64_note *byte_sequence ) % type) =>
     match ( (p) ) with ( (note,  _)) => return0 note end))
    ) note_sects.
(* [?]: removed value specification. *)

Definition obtain_elf32_note_segments  (endian : endianness ) (pht : list (elf32_program_header_table_entry )) (bs0 : byte_sequence )  : error (list (elf32_note )):= 
  let note_segs :=
    List.filter (fun (x : elf32_program_header_table_entry ) => elf32_word_equal(elf32_p_type
      x) (elf32_word_of_nat elf_pt_note)
    ) pht
  in
    mapM (fun (x : elf32_program_header_table_entry ) =>
      let offset := nat_of_elf32_off(elf32_p_offset x) in
      let size2   := nat_of_elf32_word(elf32_p_filesz x) in
      byte_sequence.offset_and_cut offset size2 bs0 >>= (fun (rel : byte_sequence ) =>
      read_elf32_note endian rel >>= 
  (fun (p : (elf32_note *byte_sequence ) % type) =>
     match ( (p) ) with ( (note,  _)) => return0 note end))
    ) note_segs.
(* [?]: removed value specification. *)

Definition obtain_elf64_note_segments  (endian : endianness ) (pht : list (elf64_program_header_table_entry )) (bs0 : byte_sequence )  : error (list (elf64_note )):= 
  let note_segs :=
    List.filter (fun (x : elf64_program_header_table_entry ) => elf64_word_equal(elf64_p_type
      x) (elf64_word_of_nat elf_pt_note)
    ) pht
  in
    mapM (fun (x : elf64_program_header_table_entry ) =>
      let offset := nat_of_elf64_off(elf64_p_offset x) in
      let size2   := nat_of_elf64_xword(elf64_p_filesz x) in
      byte_sequence.offset_and_cut offset size2 bs0 >>= (fun (rel : byte_sequence ) =>
      read_elf64_note endian rel >>= 
  (fun (p : (elf64_note *byte_sequence ) % type) =>
     match ( (p) ) with ( (note,  _)) => return0 note end))
    ) note_segs.
(* [?]: removed value specification. *)

Definition obtain_elf32_note_section_and_segments  (endian : endianness ) (pht : list (elf32_program_header_table_entry )) (sht : list (elf32_section_header_table_entry )) (bs0 : byte_sequence )  : error (list (elf32_note )):= 
  obtain_elf32_note_segments endian pht bs0 >>= (fun (pht_notes : list (elf32_note )) =>
  obtain_elf32_note_sections endian sht bs0 >>= (fun (sht_notes : list (elf32_note )) =>
  return0 ( (@ List.app _)pht_notes sht_notes))).
(* [?]: removed value specification. *)

Definition obtain_elf64_note_section_and_segments  (endian : endianness ) (pht : list (elf64_program_header_table_entry )) (sht : list (elf64_section_header_table_entry )) (bs0 : byte_sequence )  : error (list (elf64_note )):= 
  obtain_elf64_note_segments endian pht bs0 >>= (fun (pht_notes : list (elf64_note )) =>
  obtain_elf64_note_sections endian sht bs0 >>= (fun (sht_notes : list (elf64_note )) =>
  return0 ( (@ List.app _)pht_notes sht_notes))).
(* [?]: removed value specification. *)

Definition name_string_of_elf32_note  (note : elf32_note )  : string := 
  let bs0   := byte_sequence.from_byte_lists [(elf32_note_namenote)] in
    byte_sequence.string_of_byte_sequence bs0.
(* [?]: removed value specification. *)

Definition name_string_of_elf64_note  (note : elf64_note )  : string := 
  let bs0   := byte_sequence.from_byte_lists [(elf64_note_namenote)] in
    byte_sequence.string_of_byte_sequence bs0. 
