chapter {* Generated by Lem from abis/aarch64/abi_aarch64_le.lem. *}

theory "Abi_aarch64_le" 

imports 
 	 Main
	 "/auto/homes/dpm36/Work/Cambridge/bitbucket/lem/isabelle-lib/Lem_num" 
	 "/auto/homes/dpm36/Work/Cambridge/bitbucket/lem/isabelle-lib/Lem_list" 
	 "/auto/homes/dpm36/Work/Cambridge/bitbucket/lem/isabelle-lib/Lem_basic_classes" 
	 "/auto/homes/dpm36/Work/Cambridge/bitbucket/lem/isabelle-lib/Lem_bool" 
	 "/auto/homes/dpm36/Work/Cambridge/bitbucket/lem/isabelle-lib/Lem_maybe" 
	 "/auto/homes/dpm36/Work/Cambridge/bitbucket/lem/isabelle-lib/Lem_assert_extra" 
	 "/auto/homes/dpm36/Work/Cambridge/bitbucket/linksem/auto_generated/isabelle/Missing_pervasives" 
	 "/auto/homes/dpm36/Work/Cambridge/bitbucket/linksem/auto_generated/isabelle/Error" 
	 "/auto/homes/dpm36/Work/Cambridge/bitbucket/linksem/auto_generated/isabelle/Endianness" 
	 "/auto/homes/dpm36/Work/Cambridge/bitbucket/linksem/auto_generated/isabelle/Elf_types_native_uint" 
	 "/auto/homes/dpm36/Work/Cambridge/bitbucket/linksem/auto_generated/isabelle/Elf_header" 
	 "/auto/homes/dpm36/Work/Cambridge/bitbucket/linksem/auto_generated/isabelle/Elf_interpreted_section" 
	 "/auto/homes/dpm36/Work/Cambridge/bitbucket/linksem/auto_generated/isabelle/Elf_interpreted_segment" 
	 "/auto/homes/dpm36/Work/Cambridge/bitbucket/linksem/auto_generated/isabelle/Elf_file" 
	 "/auto/homes/dpm36/Work/Cambridge/bitbucket/linksem/auto_generated/isabelle/Memory_image" 
	 "/auto/homes/dpm36/Work/Cambridge/bitbucket/linksem/auto_generated/isabelle/Abi_classes" 
	 "Abi_aarch64_le_elf_header" 
	 "Abi_aarch64_relocation" 

begin 

(** [abi_aarch64_le] contains top-level definition for the AArch64 ABI (little-endian case).
  *)

(*open import Basic_classes*)
(*open import Bool*)
(*open import List*)
(*open import Num*)
(*open import Maybe*)
(*open import Assert_extra*)
(*open import Error*)
(*open import Missing_pervasives*)

(*open import Elf_header*)
(*open import Elf_types_native_uint*)
(*open import Elf_file*)
(*open import Elf_interpreted_segment*)
(*open import Elf_interpreted_section*)

(*open import Endianness*)
(* open import Elf_memory_image *)
(*open import Abi_classes*)
(*open import Memory_image*)
(*open import Abi_aarch64_relocation*)
(*open import Abi_aarch64_le_elf_header*)

(** [abi_aarch64_le_compute_program_entry_point segs entry] computes the program
  * entry point using ABI-specific conventions.  On AArch64 the entry point in
  * the ELF header ([entry] here) is the real entry point.  On other ABIs, e.g.
  * PowerPC64, the entry point [entry] is a pointer into one of the segments
  * constituting the process image (passed in as [segs] here for a uniform
  * interface).
  *)
(*val abi_aarch64_le_compute_program_entry_point : list elf64_interpreted_segments -> elf64_addr -> error natural*)
definition abi_aarch64_le_compute_program_entry_point  :: "(elf64_interpreted_segments)list \<Rightarrow> Elf_Types_Local.uint64 \<Rightarrow>(nat)error "  where 
     " abi_aarch64_le_compute_program_entry_point segs entry = (
	error_return (unat entry))"


(*val header_is_aarch64_le : elf64_header -> bool*)
definition header_is_aarch64_le  :: " elf64_header \<Rightarrow> bool "  where 
     " header_is_aarch64_le h = ( 
    is_valid_elf64_header h
    \<and> ((index(elf64_ident   h) ( elf_ii_data) = Some (Elf_Types_Local.unsigned_char_of_nat elf_data_2lsb))
    \<and> (is_valid_abi_aarch64_le_machine_architecture (unat(elf64_machine   h))
    \<and> is_valid_abi_aarch64_le_magic_number(elf64_ident   h))))"

    
datatype aarch64_le_abi_feature = GOT | PLT (* placeholder / FIXME *)

(*val abiFeatureCompare : aarch64_le_abi_feature -> aarch64_le_abi_feature -> Basic_classes.ordering*)
fun abiFeatureCompare  :: " aarch64_le_abi_feature \<Rightarrow> aarch64_le_abi_feature \<Rightarrow> ordering "  where 
     " abiFeatureCompare GOT GOT = ( EQ )"
|" abiFeatureCompare GOT PLT = ( LT )"
|" abiFeatureCompare PLT PLT = ( EQ )"
|" abiFeatureCompare PLT GOT = ( GT )" 
declare abiFeatureCompare.simps [simp del]


(*val abiFeatureTagEq : aarch64_le_abi_feature -> aarch64_le_abi_feature -> bool*)
fun abiFeatureTagEq  :: " aarch64_le_abi_feature \<Rightarrow> aarch64_le_abi_feature \<Rightarrow> bool "  where 
     " abiFeatureTagEq GOT GOT = ( True )"
|" abiFeatureTagEq PLT PLT = ( True )"
|" abiFeatureTagEq _ _ = ( False )" 
declare abiFeatureTagEq.simps [simp del]


definition instance_Basic_classes_Ord_Abi_aarch64_le_aarch64_le_abi_feature_dict  :: "(aarch64_le_abi_feature)Ord_class "  where 
     " instance_Basic_classes_Ord_Abi_aarch64_le_aarch64_le_abi_feature_dict = ((|

  compare_method = abiFeatureCompare,

  isLess_method = (\<lambda> f1 .  (\<lambda> f2 .  (abiFeatureCompare f1 f2 = LT))),

  isLessEqual_method = (\<lambda> f1 .  (\<lambda> f2 .  (op \<in>) (abiFeatureCompare f1 f2) ({LT, EQ}))),

  isGreater_method = (\<lambda> f1 .  (\<lambda> f2 .  (abiFeatureCompare f1 f2 = GT))),

  isGreaterEqual_method = (\<lambda> f1 .  (\<lambda> f2 .  (op \<in>) (abiFeatureCompare f1 f2) ({GT, EQ})))|) )"


definition instance_Abi_classes_AbiFeatureTagEquiv_Abi_aarch64_le_aarch64_le_abi_feature_dict  :: "(aarch64_le_abi_feature)AbiFeatureTagEquiv_class "  where 
     " instance_Abi_classes_AbiFeatureTagEquiv_Abi_aarch64_le_aarch64_le_abi_feature_dict = ((|

  abiFeatureTagEquiv_method = abiFeatureTagEq |) )"


(*val section_is_special : forall 'abifeature. elf64_interpreted_section -> annotated_memory_image 'abifeature -> bool*)
definition section_is_special0  :: " elf64_interpreted_section \<Rightarrow> 'abifeature annotated_memory_image \<Rightarrow> bool "  where 
     " section_is_special0 s f = ( 
    elf_section_is_special s f \<or> (* FIXME *) False )"

end
