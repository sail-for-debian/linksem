chapter {* Generated by Lem from abis/power64/abi_power64_relocation.lem. *}

theory "Abi_power64_relocation" 

imports 
 	 Main
	 "/auto/homes/dpm36/Work/Cambridge/bitbucket/lem/isabelle-lib/Lem_num" 
	 "/auto/homes/dpm36/Work/Cambridge/bitbucket/lem/isabelle-lib/Lem_basic_classes" 
	 "/auto/homes/dpm36/Work/Cambridge/bitbucket/lem/isabelle-lib/Lem_maybe" 
	 "/auto/homes/dpm36/Work/Cambridge/bitbucket/lem/isabelle-lib/Lem_string" 
	 "/auto/homes/dpm36/Work/Cambridge/bitbucket/linksem/auto_generated/isabelle/Missing_pervasives" 
	 "/auto/homes/dpm36/Work/Cambridge/bitbucket/linksem/auto_generated/isabelle/Error" 
	 "/auto/homes/dpm36/Work/Cambridge/bitbucket/linksem/auto_generated/isabelle/Elf_types_native_uint" 
	 "/auto/homes/dpm36/Work/Cambridge/bitbucket/linksem/auto_generated/isabelle/Elf_header" 
	 "/auto/homes/dpm36/Work/Cambridge/bitbucket/lem/isabelle-lib/Lem_map" 
	 "/auto/homes/dpm36/Work/Cambridge/bitbucket/linksem/auto_generated/isabelle/Elf_symbol_table" 
	 "/auto/homes/dpm36/Work/Cambridge/bitbucket/linksem/auto_generated/isabelle/Elf_file" 
	 "/auto/homes/dpm36/Work/Cambridge/bitbucket/linksem/auto_generated/isabelle/Elf_relocation" 
	 "/auto/homes/dpm36/Work/Cambridge/bitbucket/linksem/auto_generated/isabelle/Abi_utilities" 

begin 

(** [abi_power64_relocation] contains types and definitions specific to
  * relocations in the Power64 ABI
  *)

(*open import Basic_classes*)
(*open import Map*)
(*open import Maybe*)
(*open import Num*)
(*open import String*)

(*open import Error*)
(*open import Missing_pervasives*)

(*open import Elf_types_native_uint*)
(*open import Elf_file*)
(*open import Elf_header*)
(*open import Elf_relocation*)
(*open import Elf_symbol_table*)

(*open import Abi_utilities*)

(** Power64 relocation types *)

definition r_ppc64_none  :: " nat "  where 
     " r_ppc64_none = (( 0 :: nat))"

definition r_ppc64_addr32  :: " nat "  where 
     " r_ppc64_addr32 = (( 1 :: nat))"

definition r_ppc64_addr24  :: " nat "  where 
     " r_ppc64_addr24 = (( 2 :: nat))"

definition r_ppc64_addr16  :: " nat "  where 
     " r_ppc64_addr16 = (( 3 :: nat))"

definition r_ppc64_addr16_lo  :: " nat "  where 
     " r_ppc64_addr16_lo = (( 4 :: nat))"

definition r_ppc64_addr16_hi  :: " nat "  where 
     " r_ppc64_addr16_hi = (( 5 :: nat))"

definition r_ppc64_addr16_ha  :: " nat "  where 
     " r_ppc64_addr16_ha = (( 6 :: nat))"

definition r_ppc64_addr14  :: " nat "  where 
     " r_ppc64_addr14 = (( 7 :: nat))"

definition r_ppc64_addr14_brtaken  :: " nat "  where 
     " r_ppc64_addr14_brtaken = (( 8 :: nat))"

definition r_ppc64_addr14_brntaken  :: " nat "  where 
     " r_ppc64_addr14_brntaken = (( 9 :: nat))"

definition r_ppc64_rel24  :: " nat "  where 
     " r_ppc64_rel24 = (( 10 :: nat))"

definition r_ppc64_rel14  :: " nat "  where 
     " r_ppc64_rel14 = (( 11 :: nat))"

definition r_ppc64_rel14_brtaken  :: " nat "  where 
     " r_ppc64_rel14_brtaken = (( 12 :: nat))"

definition r_ppc64_rel14_brntaken  :: " nat "  where 
     " r_ppc64_rel14_brntaken = (( 13 :: nat))"

definition r_ppc64_got16  :: " nat "  where 
     " r_ppc64_got16 = (( 14 :: nat))"

definition r_ppc64_got16_lo  :: " nat "  where 
     " r_ppc64_got16_lo = (( 15 :: nat))"

definition r_ppc64_got16_hi  :: " nat "  where 
     " r_ppc64_got16_hi = (( 16 :: nat))"

definition r_ppc64_got16_ha  :: " nat "  where 
     " r_ppc64_got16_ha = (( 17 :: nat))"

definition r_ppc64_copy  :: " nat "  where 
     " r_ppc64_copy = (( 19 :: nat))"

definition r_ppc64_glob_dat  :: " nat "  where 
     " r_ppc64_glob_dat = (( 20 :: nat))"

definition r_ppc64_jmp_slot  :: " nat "  where 
     " r_ppc64_jmp_slot = (( 21 :: nat))"

definition r_ppc64_relative  :: " nat "  where 
     " r_ppc64_relative = (( 22 :: nat))"

definition r_ppc64_uaddr32  :: " nat "  where 
     " r_ppc64_uaddr32 = (( 24 :: nat))"

definition r_ppc64_uaddr16  :: " nat "  where 
     " r_ppc64_uaddr16 = (( 25 :: nat))"

definition r_ppc64_rel32  :: " nat "  where 
     " r_ppc64_rel32 = (( 26 :: nat))"

definition r_ppc64_plt32  :: " nat "  where 
     " r_ppc64_plt32 = (( 27 :: nat))"

definition r_ppc64_pltrel32  :: " nat "  where 
     " r_ppc64_pltrel32 = (( 28 :: nat))"

definition r_ppc64_plt16_lo  :: " nat "  where 
     " r_ppc64_plt16_lo = (( 29 :: nat))"

definition r_ppc64_plt16_hi  :: " nat "  where 
     " r_ppc64_plt16_hi = (( 30 :: nat))"

definition r_ppc64_plt16_ha  :: " nat "  where 
     " r_ppc64_plt16_ha = (( 31 :: nat))"

definition r_ppc64_sectoff  :: " nat "  where 
     " r_ppc64_sectoff = (( 33 :: nat))"

definition r_ppc64_sectoff_lo  :: " nat "  where 
     " r_ppc64_sectoff_lo = (( 34 :: nat))"

definition r_ppc64_sectoff_hi  :: " nat "  where 
     " r_ppc64_sectoff_hi = (( 35 :: nat))"

definition r_ppc64_sectoff_ha  :: " nat "  where 
     " r_ppc64_sectoff_ha = (( 36 :: nat))"

definition r_ppc64_addr30  :: " nat "  where 
     " r_ppc64_addr30 = (( 37 :: nat))"

definition r_ppc64_addr64  :: " nat "  where 
     " r_ppc64_addr64 = (( 38 :: nat))"

definition r_ppc64_addr16_higher  :: " nat "  where 
     " r_ppc64_addr16_higher = (( 39 :: nat))"

definition r_ppc64_addr16_highera  :: " nat "  where 
     " r_ppc64_addr16_highera = (( 40 :: nat))"

definition r_ppc64_addr16_highest  :: " nat "  where 
     " r_ppc64_addr16_highest = (( 41 :: nat))"

definition r_ppc64_addr16_highesta  :: " nat "  where 
     " r_ppc64_addr16_highesta = (( 42 :: nat))"

definition r_ppc64_uaddr64  :: " nat "  where 
     " r_ppc64_uaddr64 = (( 43 :: nat))"

definition r_ppc64_rel64  :: " nat "  where 
     " r_ppc64_rel64 = (( 44 :: nat))"

definition r_ppc64_plt64  :: " nat "  where 
     " r_ppc64_plt64 = (( 45 :: nat))"

definition r_ppc64_pltrel64  :: " nat "  where 
     " r_ppc64_pltrel64 = (( 46 :: nat))"

definition r_ppc64_toc16  :: " nat "  where 
     " r_ppc64_toc16 = (( 47 :: nat))"

definition r_ppc64_toc16_lo  :: " nat "  where 
     " r_ppc64_toc16_lo = (( 48 :: nat))"

definition r_ppc64_toc16_hi  :: " nat "  where 
     " r_ppc64_toc16_hi = (( 49 :: nat))"

definition r_ppc64_toc16_ha  :: " nat "  where 
     " r_ppc64_toc16_ha = (( 50 :: nat))"

definition r_ppc64_toc  :: " nat "  where 
     " r_ppc64_toc = (( 51 :: nat))"

definition r_ppc64_pltgot16  :: " nat "  where 
     " r_ppc64_pltgot16 = (( 52 :: nat))"

definition r_ppc64_pltgot16_lo  :: " nat "  where 
     " r_ppc64_pltgot16_lo = (( 53 :: nat))"

definition r_ppc64_pltgot16_hi  :: " nat "  where 
     " r_ppc64_pltgot16_hi = (( 54 :: nat))"

definition r_ppc64_pltgot16_ha  :: " nat "  where 
     " r_ppc64_pltgot16_ha = (( 55 :: nat))"

definition r_ppc64_addr16_ds  :: " nat "  where 
     " r_ppc64_addr16_ds = (( 56 :: nat))"

definition r_ppc64_addr16_lo_ds  :: " nat "  where 
     " r_ppc64_addr16_lo_ds = (( 57 :: nat))"

definition r_ppc64_got16_ds  :: " nat "  where 
     " r_ppc64_got16_ds = (( 58 :: nat))"

definition r_ppc64_got16_lo_ds  :: " nat "  where 
     " r_ppc64_got16_lo_ds = (( 59 :: nat))"

definition r_ppc64_plt16_lo_ds  :: " nat "  where 
     " r_ppc64_plt16_lo_ds = (( 60 :: nat))"

definition r_ppc64_sectoff_ds  :: " nat "  where 
     " r_ppc64_sectoff_ds = (( 61 :: nat))"

definition r_ppc64_sectoff_lo_ds  :: " nat "  where 
     " r_ppc64_sectoff_lo_ds = (( 62 :: nat))"

definition r_ppc64_toc16_ds  :: " nat "  where 
     " r_ppc64_toc16_ds = (( 63 :: nat))"

definition r_ppc64_toc16_lo_ds  :: " nat "  where 
     " r_ppc64_toc16_lo_ds = (( 64 :: nat))"

definition r_ppc64_pltgot16_ds  :: " nat "  where 
     " r_ppc64_pltgot16_ds = (( 65 :: nat))"

definition r_ppc64_pltgot16_lo_ds  :: " nat "  where 
     " r_ppc64_pltgot16_lo_ds = (( 66 :: nat))"

definition r_ppc64_tls  :: " nat "  where 
     " r_ppc64_tls = (( 67 :: nat))"

definition r_ppc64_dtpmod64  :: " nat "  where 
     " r_ppc64_dtpmod64 = (( 68 :: nat))"

definition r_ppc64_tprel16  :: " nat "  where 
     " r_ppc64_tprel16 = (( 69 :: nat))"

definition r_ppc64_tprel16_lo  :: " nat "  where 
     " r_ppc64_tprel16_lo = (( 60 :: nat))"

definition r_ppc64_tprel16_hi  :: " nat "  where 
     " r_ppc64_tprel16_hi = (( 71 :: nat))"

definition r_ppc64_tprel16_ha  :: " nat "  where 
     " r_ppc64_tprel16_ha = (( 72 :: nat))"

definition r_ppc64_tprel64  :: " nat "  where 
     " r_ppc64_tprel64 = (( 73 :: nat))"

definition r_ppc64_dtprel16  :: " nat "  where 
     " r_ppc64_dtprel16 = (( 74 :: nat))"

definition r_ppc64_dtprel16_lo  :: " nat "  where 
     " r_ppc64_dtprel16_lo = (( 75 :: nat))"

definition r_ppc64_dtprel16_hi  :: " nat "  where 
     " r_ppc64_dtprel16_hi = (( 76 :: nat))"

definition r_ppc64_dtprel16_ha  :: " nat "  where 
     " r_ppc64_dtprel16_ha = (( 77 :: nat))"

definition r_ppc64_dtprel64  :: " nat "  where 
     " r_ppc64_dtprel64 = (( 78 :: nat))"

definition r_ppc64_got_tlsgd16  :: " nat "  where 
     " r_ppc64_got_tlsgd16 = (( 79 :: nat))"

definition r_ppc64_got_tlsgd16_lo  :: " nat "  where 
     " r_ppc64_got_tlsgd16_lo = (( 80 :: nat))"

definition r_ppc64_got_tlsgd16_hi  :: " nat "  where 
     " r_ppc64_got_tlsgd16_hi = (( 81 :: nat))"

definition r_ppc64_got_tlsgd16_ha  :: " nat "  where 
     " r_ppc64_got_tlsgd16_ha = (( 82 :: nat))"

definition r_ppc64_got_tlsld16  :: " nat "  where 
     " r_ppc64_got_tlsld16 = (( 83 :: nat))"

definition r_ppc64_got_tlsld16_lo  :: " nat "  where 
     " r_ppc64_got_tlsld16_lo = (( 84 :: nat))"

definition r_ppc64_got_tlsld16_hi  :: " nat "  where 
     " r_ppc64_got_tlsld16_hi = (( 85 :: nat))"

definition r_ppc64_got_tlsld16_ha  :: " nat "  where 
     " r_ppc64_got_tlsld16_ha = (( 86 :: nat))"

definition r_ppc64_got_tprel16_ds  :: " nat "  where 
     " r_ppc64_got_tprel16_ds = (( 87 :: nat))"

definition r_ppc64_got_tprel16_lo_ds  :: " nat "  where 
     " r_ppc64_got_tprel16_lo_ds = (( 88 :: nat))"

definition r_ppc64_got_tprel16_hi  :: " nat "  where 
     " r_ppc64_got_tprel16_hi = (( 89 :: nat))"

definition r_ppc64_got_tprel16_ha  :: " nat "  where 
     " r_ppc64_got_tprel16_ha = (( 90 :: nat))"

definition r_ppc64_got_dtprel16_ds  :: " nat "  where 
     " r_ppc64_got_dtprel16_ds = (( 91 :: nat))"

definition r_ppc64_got_dtprel16_lo_ds  :: " nat "  where 
     " r_ppc64_got_dtprel16_lo_ds = (( 92 :: nat))"

definition r_ppc64_got_dtprel16_hi  :: " nat "  where 
     " r_ppc64_got_dtprel16_hi = (( 93 :: nat))"

definition r_ppc64_got_dtprel16_ha  :: " nat "  where 
     " r_ppc64_got_dtprel16_ha = (( 94 :: nat))"

definition r_ppc64_tprel16_ds  :: " nat "  where 
     " r_ppc64_tprel16_ds = (( 95 :: nat))"

definition r_ppc64_tprel16_lo_ds  :: " nat "  where 
     " r_ppc64_tprel16_lo_ds = (( 96 :: nat))"

definition r_ppc64_tprel16_higher  :: " nat "  where 
     " r_ppc64_tprel16_higher = (( 97 :: nat))"

definition r_ppc64_tprel16_highera  :: " nat "  where 
     " r_ppc64_tprel16_highera = (( 98 :: nat))"

definition r_ppc64_tprel16_highest  :: " nat "  where 
     " r_ppc64_tprel16_highest = (( 99 :: nat))"

definition r_ppc64_tprel16_highesta  :: " nat "  where 
     " r_ppc64_tprel16_highesta = (( 100 :: nat))"

definition r_ppc64_dtprel16_ds  :: " nat "  where 
     " r_ppc64_dtprel16_ds = (( 101 :: nat))"

definition r_ppc64_dtprel16_lo_ds  :: " nat "  where 
     " r_ppc64_dtprel16_lo_ds = (( 102 :: nat))"

definition r_ppc64_dtprel16_higher  :: " nat "  where 
     " r_ppc64_dtprel16_higher = (( 103 :: nat))"

definition r_ppc64_dtprel16_highera  :: " nat "  where 
     " r_ppc64_dtprel16_highera = (( 104 :: nat))"

definition r_ppc64_dtprel16_highest  :: " nat "  where 
     " r_ppc64_dtprel16_highest = (( 105 :: nat))"

definition r_ppc64_dtprel16_highesta  :: " nat "  where 
     " r_ppc64_dtprel16_highesta = (( 106 :: nat))"


(** [string_of_ppc64_relocation_type rel_type] produces a string representation
  * of relocation type [rel_type].
  *)
(*val string_of_ppc64_relocation_type : natural -> string*)
definition string_of_ppc64_relocation_type  :: " nat \<Rightarrow> string "  where 
     " string_of_ppc64_relocation_type rel_type = (
  if rel_type = r_ppc64_none then
    (''R_PPC64_NONE'')
  else if rel_type = r_ppc64_addr32 then
  	(''R_PPC64_ADDR32'')
  else if rel_type = r_ppc64_addr24 then
    (''R_PPC64_ADDR24'')
	else if rel_type = r_ppc64_addr16 then
	  (''R_PPC64_ADDR16'')
  else if rel_type = r_ppc64_addr16_lo then
    (''R_PPC64_ADDR16_LO'')
  else if rel_type = r_ppc64_addr16_hi then
    (''R_PPC64_ADDR16_HI'')
  else if rel_type = r_ppc64_addr16_ha then
    (''R_PPC64_ADDR16_HA'')
  else if rel_type = r_ppc64_addr14 then
    (''R_PPC64_ADDR14'')
  else if rel_type = r_ppc64_addr14_brtaken then
    (''R_PPC64_ADDR14_BRTAKEN'')
  else if rel_type = r_ppc64_addr14_brntaken then
    (''R_PPC64_ADDR14_BRNTAKEN'')
  else if rel_type = r_ppc64_rel24 then
    (''R_PPC64_REL24'')
  else if rel_type = r_ppc64_rel14 then
    (''R_PPC64_REL14'')
  else if rel_type = r_ppc64_rel14_brtaken then
    (''R_PPC64_REL14_BRTAKEN'')
  else if rel_type = r_ppc64_rel14_brntaken then
    (''R_PPC64_REL14_BRNTAKEN'')
  else if rel_type = r_ppc64_got16 then
    (''R_PPC64_GOT16'')
  else if rel_type = r_ppc64_got16_lo then
    (''R_PPC64_GOT16_LO'')
  else if rel_type = r_ppc64_got16_hi then
    (''R_PPC64_GOT16_HI'')
  else if rel_type = r_ppc64_got16_ha then
    (''R_PPC64_GOT16_HA'')
  else if rel_type = r_ppc64_copy then
    (''R_PPC64_COPY'')
  else if rel_type = r_ppc64_glob_dat then
    (''R_PPC64_GLOB_DAT'')
  else if rel_type = r_ppc64_jmp_slot then
    (''R_PPC64_JMP_SLOT'')
  else if rel_type = r_ppc64_relative then
    (''R_PPC64_RELATIVE'')
  else if rel_type = r_ppc64_uaddr32 then
    (''R_PPC64_UADDR32'')
  else if rel_type = r_ppc64_uaddr16 then
    (''R_PPC64_UADDR16'')
  else if rel_type = r_ppc64_rel32 then
    (''R_PPC64_REL32'')
  else if rel_type = r_ppc64_plt32 then
    (''R_PPC64_PLT32'')
  else if rel_type = r_ppc64_pltrel32 then
    (''R_PPC64_PLTREL32'')
  else if rel_type = r_ppc64_plt16_lo then
    (''R_PPC64_PLT16_LO'')
  else if rel_type = r_ppc64_plt16_hi then
    (''R_PPC64_PLT16_HI'')
  else if rel_type = r_ppc64_plt16_ha then
    (''R_PPC64_PLT16_HA'')
  else if rel_type = r_ppc64_sectoff then
    (''R_PPC64_SECTOFF'')
  else if rel_type = r_ppc64_sectoff_lo then
    (''R_PPC64_SECTOFF_LO'')
  else if rel_type = r_ppc64_sectoff_hi then
    (''R_PPC64_SECTOFF_HI'')
  else if rel_type = r_ppc64_sectoff_ha then
    (''R_PPC64_SECTOFF_HA'')
  else if rel_type = r_ppc64_addr30 then
    (''R_PPC64_ADDR30'')
  else if rel_type = r_ppc64_addr64 then
    (''R_PPC64_ADDR64'')
  else if rel_type = r_ppc64_addr16_higher then
    (''R_PPC64_ADDR16_HIGHER'')
  else if rel_type = r_ppc64_addr16_highera then
    (''R_PPC64_ADDR16_HIGHERA'')
  else if rel_type = r_ppc64_addr16_highest then
    (''R_PPC64_ADDR16_HIGHEST'')
  else if rel_type = r_ppc64_addr16_highesta then
    (''R_PPC64_ADDR16_HIGHESTA'')
  else if rel_type = r_ppc64_uaddr64 then
    (''R_PPC64_UADDR64'')
  else if rel_type = r_ppc64_rel64 then
    (''R_PPC64_REL64'')
  else if rel_type = r_ppc64_plt64 then
    (''R_PPC64_PLT64'')
  else if rel_type = r_ppc64_pltrel64 then
    (''R_PPC64_PLTREL64'')
  else if rel_type = r_ppc64_toc16 then
    (''R_PPC64_TOC16'')
  else if rel_type = r_ppc64_toc16_lo then
    (''R_PPC64_TOC16_LO'')
  else if rel_type = r_ppc64_toc16_hi then
    (''R_PPC64_TOC16_HI'')
  else if rel_type = r_ppc64_toc16_ha then
    (''R_PPC64_TOC16_HA'')
  else if rel_type = r_ppc64_toc then
    (''R_PPC64_TOC'')
  else if rel_type = r_ppc64_pltgot16 then
    (''R_PPC64_PLTGOT16'')
  else if rel_type = r_ppc64_pltgot16_lo then
    (''R_PPC64_PLTGOT16_LO'')
  else if rel_type = r_ppc64_pltgot16_hi then
    (''R_PPC64_PLTGOT16_HI'')
  else if rel_type = r_ppc64_pltgot16_ha then
    (''R_PPC64_PLTGOT16_HA'')
  else if rel_type = r_ppc64_addr16_ds then
    (''R_PPC64_ADDR16_DS'')
  else if rel_type = r_ppc64_addr16_lo_ds then
    (''R_PPC64_ADDR16_DS'')
  else if rel_type = r_ppc64_got16_ds then
    (''R_PPC64_GOT16_DS'')
  else if rel_type = r_ppc64_got16_lo_ds then
    (''R_PPC64_GOT16_LO_DS'')
  else if rel_type = r_ppc64_plt16_lo_ds then
    (''R_PPC64_PLT16_LO_DS'')
  else if rel_type = r_ppc64_sectoff_ds then
    (''R_PPC64_SECTOFF_DS'')
  else if rel_type = r_ppc64_sectoff_lo_ds then
    (''R_PPC64_SECTOFF_LO_DS'')
  else if rel_type = r_ppc64_toc16_ds then
    (''R_PPC64_TOC16_DS'')
  else if rel_type = r_ppc64_toc16_lo_ds then
    (''R_PPC64_TOC16_LO_DS'')
  else if rel_type = r_ppc64_pltgot16_ds then
    (''R_PPC64_PLTGOT16_DS'')
  else if rel_type = r_ppc64_pltgot16_lo_ds then
    (''R_PPC64_PLTGOT16_LO_DS'')
  else if rel_type = r_ppc64_tls then
    (''R_PPC64_TLS'')
  else if rel_type = r_ppc64_dtpmod64 then
    (''R_PPC64_DTPMOD64'')
  else if rel_type = r_ppc64_tprel16 then
    (''R_PPC64_TPREL16'')
  else if rel_type = r_ppc64_tprel16_lo then
    (''R_PPC64_TPREL16_LO'')
  else if rel_type = r_ppc64_tprel16_hi then
    (''R_PPC64_TPREL16_HI'')
  else if rel_type = r_ppc64_tprel16_ha then
    (''R_PPC64_TPREL16_HA'')
  else if rel_type = r_ppc64_tprel64 then
    (''R_PPC64_TPREL64'')
  else if rel_type = r_ppc64_dtprel16 then
    (''R_PPC64_DTPREL16'')
  else if rel_type = r_ppc64_dtprel16_lo then
    (''R_PPC64_DTPREL16_LO'')
  else if rel_type = r_ppc64_dtprel16_hi then
    (''R_PPC64_DTPREL16_HI'')
  else if rel_type = r_ppc64_dtprel16_ha then
    (''R_PPC64_DTPREL16_HA'')
  else if rel_type = r_ppc64_dtprel64 then
    (''R_PPC64_DTPREL64'')
  else if rel_type = r_ppc64_got_tlsgd16 then
    (''R_PPC64_GOT_TLSGD16'')
  else if rel_type = r_ppc64_got_tlsgd16_lo then
    (''R_PPC64_GOT_TLSGD16_LO'')
  else if rel_type = r_ppc64_got_tlsgd16_hi then
    (''R_PPC64_GOT_TLSGD16_HI'')
  else if rel_type = r_ppc64_got_tlsgd16_ha then
    (''R_PPC64_GOT_TLSGD16_HA'')
  else if rel_type = r_ppc64_got_tlsld16 then
    (''R_PPC64_GOT_TLSLD16'')
  else if rel_type = r_ppc64_got_tlsld16_lo then
    (''R_PPC64_GOT_TLSLD16_LO'')
  else if rel_type = r_ppc64_got_tlsld16_hi then
    (''R_PPC64_GOT_TLSLD16_HI'')
  else if rel_type = r_ppc64_got_tlsld16_ha then
    (''R_PPC64_GOT_TLSLD16_HA'')
  else if rel_type = r_ppc64_got_tprel16_ds then
    (''R_PPC64_GOT_TPREL16_DS'')
  else if rel_type = r_ppc64_got_tprel16_lo_ds then
    (''R_PPC64_GOT_TPREL16_LO_DS'')
  else if rel_type = r_ppc64_got_tprel16_hi then
    (''R_PPC64_GOT_TPREL16_HI'')
  else if rel_type = r_ppc64_got_tprel16_ha then
    (''R_PPC64_GOT_TPREL16_HA'')
  else if rel_type = r_ppc64_got_dtprel16_ds then
    (''R_PPC64_GOT_DTPREL16_DS'')
  else if rel_type = r_ppc64_got_dtprel16_lo_ds then
    (''R_PPC64_GOT_DTPREL16_LO_DS'')
  else if rel_type = r_ppc64_got_dtprel16_hi then
    (''R_PPC64_GOT_DTPREL16_HI'')
  else if rel_type = r_ppc64_got_dtprel16_ha then
    (''R_PPC64_GOT_DTPREL16_HA'')
  else if rel_type = r_ppc64_tprel16_ds then
    (''R_PPC64_TPREL16_DS'')
  else if rel_type = r_ppc64_tprel16_lo_ds then
    (''R_PPC64_TPREL16_LO_DS'')
  else if rel_type = r_ppc64_tprel16_higher then
    (''R_PPC64_TPREL16_HIGHER'')
  else if rel_type = r_ppc64_tprel16_highera then
    (''R_PPC64_TPREL16_HIGHERA'')
  else if rel_type = r_ppc64_tprel16_highest then
    (''R_PPC64_TPREL16_HIGHEST'')
  else if rel_type = r_ppc64_tprel16_highesta then
    (''R_PPC64_TPREL16_HIGHESTA'')
  else if rel_type = r_ppc64_dtprel16_ds then
    (''R_PPC64_DTPREL16_DS'')
  else if rel_type = r_ppc64_dtprel16_lo_ds then
    (''R_PPC64_DTPREL16_LO_DS'')
  else if rel_type = r_ppc64_dtprel16_higher then
    (''R_PPC64_DTPREL16_HIGHER'')
  else if rel_type = r_ppc64_dtprel16_highera then
    (''R_PPC64_DTPREL16_HIGHERA'')
  else if rel_type = r_ppc64_dtprel16_highest then
    (''R_PPC64_DTPREL16_HIGHEST'')
  else if rel_type = r_ppc64_dtprel16_highesta then
    (''R_PPC64_DTPREL16_HIGHESTA'')
  else
    (''Invalid Power64 relocation type''))"


(*val abi_ppc64_apply_relocation : elf64_relocation_a -> integer -> integer ->
  integer -> integer -> integer -> integer -> integer -> integer -> integer ->
    integer -> integer -> integer -> integer -> integer -> integer -> elf64_file ->
      error (Map.map elf64_addr (relocation_operator_expression integer * integer_bit_width * can_fail integer))*)
definition abi_ppc64_apply_relocation  :: " elf64_relocation_a \<Rightarrow> int \<Rightarrow> int \<Rightarrow> int \<Rightarrow> int \<Rightarrow> int \<Rightarrow> int \<Rightarrow> int \<Rightarrow> int \<Rightarrow> int \<Rightarrow> int \<Rightarrow> int \<Rightarrow> int \<Rightarrow> int \<Rightarrow> int \<Rightarrow> int \<Rightarrow> elf64_file \<Rightarrow>(((Elf_Types_Local.uint64),((int)relocation_operator_expression*integer_bit_width*(int)can_fail))Map.map)error "  where 
     " abi_ppc64_apply_relocation rel s_val b_val p_val l_val g_val r_val m_val
          toc_val dtpmod_val tprel_val dtprel_val gottlsgd_val gottlsld_val
          gottprel_val gotdtprel_val ef = (
  if is_elf64_relocatable_file(elf64_file_header   ef) then
    (let rel_type = (extract_elf64_relocation_r_type(elf64_ra_info   rel)) in
    (let a_val    = (sint(elf64_ra_addend   rel)) in
      (** No width, no calculation *)
      if rel_type = r_ppc64_none then
        error_return Map.empty
      (** Width: 32 Calculation: S + A *)
      else if rel_type = r_ppc64_addr32 then
      	(let result = (Lift (s_val + a_val)) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, I32, CanFail) Map.empty)))
      (** Width: Low24 Calculation: (S + A) >> 2 *)
      else if rel_type = r_ppc64_addr24 then
        (let result = (RShift (Lift(s_val + a_val),( 2 :: nat))) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, Low24, CanFail) Map.empty)))
      (** Width: Half16 Calculation: S + A *)
    	else if rel_type = r_ppc64_addr16 then
        (let result = (Lift (s_val + a_val)) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, I16, CanFail) Map.empty)))
      (** Width: Half16 Calculation: #lo(S + A) *)
      else if rel_type = r_ppc64_addr16_lo then
        (let result = (Apply(Lo, Lift (s_val + a_val))) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, I16, CannotFail) Map.empty)))
      (** Width: Half16 Calculation: #hi(S + A) *)
      else if rel_type = r_ppc64_addr16_hi then
        (let result = (Apply(Hi, Lift (s_val + a_val))) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, I16, CannotFail) Map.empty)))
      (** Width: Half16 Calculation: #ha(S + A) *)
      else if rel_type = r_ppc64_addr16_ha then
        (let result = (Apply(Ha, Lift (s_val + a_val))) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, I16, CannotFail) Map.empty)))
      (** Width: Low14 Calculation: (S + A) >> 2 *)
      else if rel_type = r_ppc64_addr14 then
        (let result = (RShift(Lift(s_val + a_val),( 2 :: nat))) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, Low14, CanFail) Map.empty)))
      (** Width: Low14 Calculation: (S + A) >> 2 *)
      else if rel_type = r_ppc64_addr14_brtaken then
        (let result = (RShift(Lift(s_val + a_val),( 2 :: nat))) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, Low14, CanFail) Map.empty)))
      (** Width: Low14 Calculation: (S + A) >> 2 *)
      else if rel_type = r_ppc64_addr14_brntaken then
        (let result = (RShift(Lift(s_val + a_val),( 2 :: nat))) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, Low14, CanFail) Map.empty)))
      (** Width: Low24 Calculation: ((S + A) - P) >> 2 *)
      else if rel_type = r_ppc64_rel24 then
        (let result = (RShift(Lift ((s_val + a_val) - p_val),( 2 :: nat))) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, Low24, CanFail) Map.empty)))
      (** Width: Low14 Calculation: ((S + A) - P) >> 2 *)
      else if rel_type = r_ppc64_rel14 then
        (let result = (RShift(Lift ((s_val + a_val) - p_val),( 2 :: nat))) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, Low14, CanFail) Map.empty)))
      (** Width: Low14 Calculation: ((S + A) - P) >> 2 *)
      else if rel_type = r_ppc64_rel14_brtaken then
        (let result = (RShift(Lift ((s_val + a_val) - p_val),( 2 :: nat))) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, Low14, CanFail) Map.empty)))
      (** Width: Low14 Calculation: ((S + A) - P) >> 2 *)
      else if rel_type = r_ppc64_rel14_brntaken then
        (let result = (RShift(Lift ((s_val + a_val) - p_val),( 2 :: nat))) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, Low14, CanFail) Map.empty)))
      (** Width: Half16 Calculation: G *)
      else if rel_type = r_ppc64_got16 then
        (let result = (Lift g_val) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, I16, CanFail) Map.empty)))
      (** Width: Half16 Calculation: #lo(G) *)
      else if rel_type = r_ppc64_got16_lo then
        (let result = (Apply(Lo, Lift g_val)) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, I16, CannotFail) Map.empty)))
      (** Width: Half16 Calculation: #hi(G) *)
      else if rel_type = r_ppc64_got16_hi then
        (let result = (Apply(Hi, Lift g_val)) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, I16, CannotFail) Map.empty)))
      (** Width: Half16 Calculation: #ha(G) *)
      else if rel_type = r_ppc64_got16_ha then
        (let result = (Apply(Ha, Lift g_val)) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, I16, CannotFail) Map.empty)))
      (** No width, no calculation *)
      else if rel_type = r_ppc64_copy then
        error_fail (''abi_ppc64_apply_relocation: r_ppc64_copy not implemented'')
      (** Width I64, Calculation: S + A *)
      else if rel_type = r_ppc64_glob_dat then
        (let result = (Lift(s_val + a_val)) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, I64, CannotFail) Map.empty)))
      (** No width, dynamic link calculation *)
      else if rel_type = r_ppc64_jmp_slot then
        error_fail (''abi_ppc64_apply_relocation: r_ppc64_jmp_slot not implemented'')
      (** Width I64, Calculation: B + A *)
      else if rel_type = r_ppc64_relative then
        (let result = (Lift(b_val + a_val)) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, I64, CannotFail) Map.empty)))
      (** Width: I32 Calculation: S + A *)
      else if rel_type = r_ppc64_uaddr32 then
        (let result = (Lift(s_val + a_val)) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, I32, CanFail) Map.empty)))
      (** Width: Half16 Calculation: S + A *)
      else if rel_type = r_ppc64_uaddr16 then
        (let result = (Lift(s_val + a_val)) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, I16, CanFail) Map.empty)))
      (** Width: I32 Calculation: (S + A) - P *)
      else if rel_type = r_ppc64_rel32 then
        (let result = (Lift ((s_val + a_val) - p_val)) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, I32, CanFail) Map.empty)))
      (** Width: I32 Calculation: L *)
      else if rel_type = r_ppc64_plt32 then
        (let result = (Lift l_val) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, I32, CanFail) Map.empty)))
      (** Width: I32 Calculation: L - P *)
      else if rel_type = r_ppc64_pltrel32 then
        (let result = (Lift (l_val - p_val)) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, I32, CanFail) Map.empty)))
      (** Width: Half16 Calculation: #lo(L) *)
      else if rel_type = r_ppc64_plt16_lo then
        (let result = (Apply(Lo, Lift l_val)) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, I16, CannotFail) Map.empty)))
      (** Width: Half16 Calculation: #hi(L) *)
      else if rel_type = r_ppc64_plt16_hi then
        (let result = (Apply(Hi, Lift l_val)) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, I16, CannotFail) Map.empty)))
      (** Width: Half16 Calculation: #ha(L) *)
      else if rel_type = r_ppc64_plt16_ha then
        (let result = (Apply(Ha, Lift l_val)) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, I16, CannotFail) Map.empty)))
      (** Width: Half16 Calculation: R + A *)
      else if rel_type = r_ppc64_sectoff then
        (let result = (Lift(r_val + a_val)) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, I16, CanFail) Map.empty)))
      (** Width: Half16 Calculation: #lo(R + A) *)
      else if rel_type = r_ppc64_sectoff_lo then
        (let result = (Apply(Lo, Lift (r_val + a_val))) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, I16, CannotFail) Map.empty)))
      (** Width: Half16 Calculation: #hi(R + A) *)
      else if rel_type = r_ppc64_sectoff_hi then
        (let result = (Apply(Hi, Lift (r_val + a_val))) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, I16, CannotFail) Map.empty)))
      (** Width: Half16 Calculation: #ha(R + A) *)
      else if rel_type = r_ppc64_sectoff_ha then
        (let result = (Apply(Ha, Lift (r_val + a_val))) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, I16, CannotFail) Map.empty)))
      (** Width: Word30 Calculation: ((S + A) - P) >> 2 *)
      else if rel_type = r_ppc64_addr30 then
        (let result = (RShift(Lift ((s_val + a_val) - p_val),( 2 :: nat))) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, Word30, CannotFail) Map.empty)))
      (** Width: I64 Calculation: S + A *)
      else if rel_type = r_ppc64_addr64 then
        (let result = (Lift(s_val + a_val)) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, I64, CannotFail) Map.empty)))
      (** Width: Half16 Calculation: #higher(S + A) *)
      else if rel_type = r_ppc64_addr16_higher then
        (let result = (Apply(Higher, Lift (s_val + a_val))) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, I16, CannotFail) Map.empty)))
      (** Width: Half16 Calculation: #highera(S + A) *)
      else if rel_type = r_ppc64_addr16_highera then
        (let result = (Apply(HigherA, Lift (s_val + a_val))) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, I16, CannotFail) Map.empty)))
      (** Width: Half16 Calculation: #highest(S + A) *)
      else if rel_type = r_ppc64_addr16_highest then
        (let result = (Apply(Highest, Lift (s_val + a_val))) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, I16, CannotFail) Map.empty)))
      (** Width: Half16 Calculation: #highesta(S + A) *)
      else if rel_type = r_ppc64_addr16_highesta then
        (let result = (Apply(HighestA, Lift(s_val + a_val))) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, I16, CannotFail) Map.empty)))
      (** Width: I64 Calculation: S + A *)
      else if rel_type = r_ppc64_uaddr64 then
        (let result = (Lift(s_val + a_val)) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, I64, CannotFail) Map.empty)))
      (** Width: I64 Calculation: (S + A) - P *)
      else if rel_type = r_ppc64_rel64 then
        (let result = (Lift ((s_val + a_val) - p_val)) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, I64, CannotFail) Map.empty)))
      (** Width: I64 Calculation: L *)
      else if rel_type = r_ppc64_plt64 then
      	(let result = (Lift l_val) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, I64, CannotFail) Map.empty)))
      (** Width: I64 Calculation: L - P *)
      else if rel_type = r_ppc64_pltrel64 then
      	(let result = (Lift(l_val - p_val)) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, I64, CannotFail) Map.empty)))
      (** Width: Half16 Calculation: (S + A) - TOC *)
      else if rel_type = r_ppc64_toc16 then
      	(let result = (Lift ((s_val + a_val) - toc_val)) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, I16, CanFail) Map.empty)))
      (** Width: Half16 Calculation: #lo((S + A) - TOC) *)
      else if rel_type = r_ppc64_toc16_lo then
      	(let result = (Apply (Lo, Lift ((s_val + a_val) - toc_val))) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, I16, CanFail) Map.empty)))
      (** Width: Half16 Calculation: #hi((S + A) - TOC) *)
      else if rel_type = r_ppc64_toc16_hi then
      	(let result = (Apply(Hi, Lift ((s_val + a_val) - toc_val))) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, I16, CanFail) Map.empty)))
      (** Width: Half16 Calculation: #ha((S + A) - TOC) *)
      else if rel_type = r_ppc64_toc16_ha then
      	(let result = (Apply(Ha, Lift ((s_val + a_val) - toc_val))) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, I16, CanFail) Map.empty)))
      (** Width: I64 Calculation: .TOC *)
      else if rel_type = r_ppc64_toc then
      	(let result = (Lift toc_val) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, I64, CannotFail) Map.empty)))
      (** Width: Half16 Calculation: M *)
      else if rel_type = r_ppc64_pltgot16 then
      	(let result = (Lift m_val) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, I16, CanFail) Map.empty)))
      (** Width: Half16 Calculation: #lo(M) *)
      else if rel_type = r_ppc64_pltgot16_lo then
      	(let result = (Apply(Lo, Lift m_val)) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, I16, CannotFail) Map.empty)))
      (** Width: Half16 Calculation: #hi(M) *)
      else if rel_type = r_ppc64_pltgot16_hi then
      	(let result = (Apply(Hi, Lift m_val)) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, I16, CannotFail) Map.empty)))
      (** Width: Half16 Calculation: #ha(M) *)
      else if rel_type = r_ppc64_pltgot16_ha then
      	(let result = (Apply(Ha, Lift m_val)) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, I16, CannotFail) Map.empty)))
      (** Width: Half16ds Calculation: (S + A) >> 2 *)
      else if rel_type = r_ppc64_addr16_ds then
      	(let result = (RShift(Lift (s_val + a_val),( 2 :: nat))) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, Half16ds, CanFail) Map.empty)))
      (** Width: Half16ds Calculation: #lo((S + A) >> 2) *)    
      else if rel_type = r_ppc64_addr16_lo_ds then
      	(let result = (Apply(Lo, RShift(Lift (s_val + a_val),( 2 :: nat)))) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, Half16ds, CannotFail) Map.empty)))
      (** Width: Half16ds Calculation: G >> 2 *)
      else if rel_type = r_ppc64_got16_ds then
      	(let result = (RShift(Lift g_val,( 2 :: nat))) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, Half16ds, CanFail) Map.empty)))
      (** Width: Half16ds Calculation: #lo(G) >> 2 *)
      else if rel_type = r_ppc64_got16_lo_ds then
      	(let result = (RShift(Apply(Lo, Lift g_val),( 2 :: nat))) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, Half16ds, CannotFail) Map.empty)))
      (** Width: Half16ds Calculation: #lo(L) >> 2 *)
      else if rel_type = r_ppc64_plt16_lo_ds then
      	(let result = (RShift (Apply(Lo, Lift l_val),( 2 :: nat))) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, Half16ds, CannotFail) Map.empty)))
      (** Width: Half16ds Calculation: (R + A) >> 2 *)
      else if rel_type = r_ppc64_sectoff_ds then
      	(let result = (RShift (Lift (r_val + a_val),( 2 :: nat))) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, Half16ds, CanFail) Map.empty)))
      (** Width: Half16ds Calculation: #lo(R + A) >> 2 *)
      else if rel_type = r_ppc64_sectoff_lo_ds then
      	(let result = (RShift(Apply(Lo, Lift (r_val + a_val)),( 2 :: nat))) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, Half16ds, CannotFail) Map.empty)))
      (** Width: Half16ds Calculation: ((S + A) - TOC) >> 2 *)
      else if rel_type = r_ppc64_toc16_ds then
      	(let result = (RShift (Lift ((s_val + a_val) - toc_val),( 2 :: nat))) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, Half16ds, CanFail) Map.empty)))
      (** Width: Half16ds Calculation: #lo((S + A) - TOC) >> 2 *)
      else if rel_type = r_ppc64_toc16_lo_ds then
      	(let result = (RShift (Apply(Lo, Lift ((s_val + a_val) - toc_val)),( 2 :: nat))) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, Half16ds, CannotFail) Map.empty)))
      (** Width: Half16ds Calculation: M >> 2 *)
      else if rel_type = r_ppc64_pltgot16_ds then
      	(let result = (RShift(Lift m_val,( 2 :: nat))) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, Half16ds, CanFail) Map.empty)))
      (** Width: Half16ds Calculation: #lo(M) >> 2 *)
      else if rel_type = r_ppc64_pltgot16_lo_ds then
      	(let result = (RShift (Apply(Lo, Lift m_val),( 2 :: nat))) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, Half16ds, CannotFail) Map.empty)))
      (** No width, no calculation *)
      else if rel_type = r_ppc64_tls then
        error_fail (''abi_ppc64_apply_relocation: r_ppc64_tls not implemented'')
      (** Width I64 Calculation: @dtpmod *)
      else if rel_type = r_ppc64_dtpmod64 then
      	(let result = (Lift dtpmod_val) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, I64, CannotFail) Map.empty)))
      else if rel_type = r_ppc64_tprel16 then
      	(let result = (Lift tprel_val) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, I16, CanFail) Map.empty)))
      else if rel_type = r_ppc64_tprel16_lo then
        (let result = (Apply(Lo, Lift tprel_val)) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, I16, CannotFail) Map.empty)))
      else if rel_type = r_ppc64_tprel16_hi then
      	(let result = (Apply(Hi, Lift tprel_val)) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, I16, CannotFail) Map.empty)))
      else if rel_type = r_ppc64_tprel16_ha then
      	(let result = (Apply(Ha, Lift tprel_val)) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, I16, CannotFail) Map.empty)))
      else if rel_type = r_ppc64_tprel64 then
      	(let result = (Lift tprel_val) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, I64, CannotFail) Map.empty)))
      else if rel_type = r_ppc64_dtprel16 then
      	(let result = (Lift dtprel_val) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, I16, CanFail) Map.empty)))
      else if rel_type = r_ppc64_dtprel16_lo then
      	(let result = (Apply(Lo, Lift dtprel_val)) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, I16, CannotFail) Map.empty)))
      else if rel_type = r_ppc64_dtprel16_hi then
      	(let result = (Apply(Hi, Lift dtprel_val)) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, I16, CannotFail) Map.empty)))
      else if rel_type = r_ppc64_dtprel16_ha then
      	(let result = (Apply(Ha, Lift dtprel_val)) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, I16, CannotFail) Map.empty)))
      else if rel_type = r_ppc64_dtprel64 then
      	(let result = (Lift dtprel_val) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, I64, CannotFail) Map.empty)))
      else if rel_type = r_ppc64_got_tlsgd16 then
      	(let result = (Lift gottlsgd_val) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, I16, CanFail) Map.empty)))
      else if rel_type = r_ppc64_got_tlsgd16_lo then
      	(let result = (Apply(Lo, Lift gottlsgd_val)) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, I16, CannotFail) Map.empty)))
      else if rel_type = r_ppc64_got_tlsgd16_hi then
      	(let result = (Apply(Hi, Lift gottlsgd_val)) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, I16, CannotFail) Map.empty)))
      else if rel_type = r_ppc64_got_tlsgd16_ha then
      	(let result = (Apply(Ha, Lift gottlsgd_val)) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, I16, CannotFail) Map.empty)))
      else if rel_type = r_ppc64_got_tlsld16 then
      	(let result = (Lift gottlsgd_val) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, I16, CanFail) Map.empty)))
      else if rel_type = r_ppc64_got_tlsld16_lo then
      	(let result = (Apply(Lo, Lift gottlsgd_val)) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, I16, CannotFail) Map.empty)))
      else if rel_type = r_ppc64_got_tlsld16_hi then
      	(let result = (Apply(Hi, Lift gottlsgd_val)) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, I16, CannotFail) Map.empty)))
      else if rel_type = r_ppc64_got_tlsld16_ha then
      	(let result = (Apply(Ha, Lift gottlsgd_val)) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, I16, CannotFail) Map.empty)))
      else if rel_type = r_ppc64_got_tprel16_ds then
      	(let result = (Lift gottprel_val) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, Half16ds, CanFail) Map.empty)))
      else if rel_type = r_ppc64_got_tprel16_lo_ds then
      	(let result = (Apply(Lo, Lift gottprel_val)) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, Half16ds, CannotFail) Map.empty)))
      else if rel_type = r_ppc64_got_tprel16_hi then
      	(let result = (Apply(Hi, Lift gottprel_val)) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, I16, CannotFail) Map.empty)))
      else if rel_type = r_ppc64_got_tprel16_ha then
      	(let result = (Apply(Ha, Lift gottprel_val)) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, I16, CannotFail) Map.empty)))
      else if rel_type = r_ppc64_got_dtprel16_ds then
      	(let result = (Lift gotdtprel_val) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, Half16ds, CanFail) Map.empty)))
      else if rel_type = r_ppc64_got_dtprel16_lo_ds then
      	(let result = (Apply(Lo, Lift gotdtprel_val)) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, Half16ds, CannotFail) Map.empty)))
      else if rel_type = r_ppc64_got_dtprel16_hi then
      	(let result = (Apply(Hi, Lift gotdtprel_val)) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, I16, CannotFail) Map.empty)))
      else if rel_type = r_ppc64_got_dtprel16_ha then
      	(let result = (Apply(Ha, Lift gotdtprel_val)) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, I16, CannotFail) Map.empty)))
      else if rel_type = r_ppc64_tprel16_ds then
      	(let result = (Lift tprel_val) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, Half16ds, CanFail) Map.empty)))
      else if rel_type = r_ppc64_tprel16_lo_ds then
      	(let result = (Apply(Lo, Lift tprel_val)) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, Half16ds, CannotFail) Map.empty)))
      else if rel_type = r_ppc64_tprel16_higher then
      	(let result = (Apply(Higher, Lift tprel_val)) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, I16, CannotFail) Map.empty)))
      else if rel_type = r_ppc64_tprel16_highera then
      	(let result = (Apply(HigherA, Lift tprel_val)) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, I16, CannotFail) Map.empty)))
      else if rel_type = r_ppc64_tprel16_highest then
      	(let result = (Apply(Highest, Lift tprel_val)) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, I16, CannotFail) Map.empty)))
      else if rel_type = r_ppc64_tprel16_highesta then
      	(let result = (Apply(HighestA, Lift tprel_val)) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, I16, CannotFail) Map.empty)))
      else if rel_type = r_ppc64_dtprel16_ds then
      	(let result = (Lift dtprel_val) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, Half16ds, CanFail) Map.empty)))
      else if rel_type = r_ppc64_dtprel16_lo_ds then
      	(let result = (Apply(Lo, Lift dtprel_val)) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, Half16ds, CannotFail) Map.empty)))
      else if rel_type = r_ppc64_dtprel16_higher then
      	(let result = (Apply(Higher, Lift dtprel_val)) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, I16, CannotFail) Map.empty)))
      else if rel_type = r_ppc64_dtprel16_highera then
      	(let result = (Apply(HigherA, Lift dtprel_val)) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, I16, CannotFail) Map.empty)))
      else if rel_type = r_ppc64_dtprel16_highest then
      	(let result = (Apply(Highest, Lift dtprel_val)) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, I16, CannotFail) Map.empty)))
      else if rel_type = r_ppc64_dtprel16_highesta then
      	(let result = (Apply(HighestA, Lift dtprel_val)) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, I16, CannotFail) Map.empty)))
      else
        error_fail (''abi_ppc64_apply_relocation: unrecognised relocation type'')))  
  else
  	error_fail (''abi_ppc64_apply_relocation: not a relocatable file''))"

end
