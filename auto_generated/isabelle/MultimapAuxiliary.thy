chapter {* Generated by Lem from multimap.lem. *}

theory "MultimapAuxiliary" 

imports 
 	 Main "~~/src/HOL/Library/Code_Target_Numeral"
	 "/auto/homes/dpm36/Work/Cambridge/bitbucket/lem/isabelle-lib/Lem_num" 
	 "/auto/homes/dpm36/Work/Cambridge/bitbucket/lem/isabelle-lib/Lem_list" 
	 "/auto/homes/dpm36/Work/Cambridge/bitbucket/lem/isabelle-lib/Lem_set" 
	 "/auto/homes/dpm36/Work/Cambridge/bitbucket/lem/isabelle-lib/Lem_function" 
	 "/auto/homes/dpm36/Work/Cambridge/bitbucket/lem/isabelle-lib/Lem_basic_classes" 
	 "/auto/homes/dpm36/Work/Cambridge/bitbucket/lem/isabelle-lib/Lem_bool" 
	 "/auto/homes/dpm36/Work/Cambridge/bitbucket/lem/isabelle-lib/Lem_maybe" 
	 "/auto/homes/dpm36/Work/Cambridge/bitbucket/lem/isabelle-lib/Lem_string" 
	 "/auto/homes/dpm36/Work/Cambridge/bitbucket/lem/isabelle-lib/Lem_assert_extra" 
	 "Show" 
	 "/auto/homes/dpm36/Work/Cambridge/bitbucket/lem/isabelle-lib/Lem_set_extra" 
	 "Missing_pervasives" 
	 "Multimap" 

begin 


(****************************************************)
(*                                                  *)
(* Assertions                                       *)
(*                                                  *)
(****************************************************)

lemma lowest_simple:
" findLowestKVWithKEquivTo 
  instance_Basic_classes_Ord_Num_natural_dict instance_Basic_classes_Ord_Num_natural_dict(( 4 :: nat)) testEquiv 
({ (( 1 :: nat),( 0 :: nat)), (( 2 :: nat),( 0 :: nat)), (( 3 :: nat),( 0 :: nat)), (( 4 :: nat),( 0 :: nat)), (( 5 :: nat),( 0 :: nat)), (( 6 :: nat),( 0 :: nat)) } :: (nat * nat) set) None = Some (( 3 :: nat),( 0 :: nat))"
by eval

lemma lowest_kv:
" findLowestKVWithKEquivTo 
  instance_Basic_classes_Ord_Num_natural_dict instance_Basic_classes_Ord_Num_natural_dict(( 4 :: nat)) testEquiv 
({ (( 1 :: nat),( 0 :: nat)), (( 2 :: nat),( 0 :: nat)), (( 3 :: nat),( 0 :: nat)), (( 3 :: nat),( 1 :: nat)), (( 4 :: nat),( 0 :: nat)), (( 5 :: nat),( 0 :: nat)), (( 6 :: nat),( 0 :: nat)) } :: (nat * nat) set) None = Some (( 3 :: nat),( 0 :: nat))"
by eval

lemma lowest_empty:
" findLowestKVWithKEquivTo 
  instance_Basic_classes_Ord_Num_natural_dict instance_Basic_classes_Ord_Num_natural_dict(( 4 :: nat)) testEquiv
({} :: (nat * nat) set) None = None "
by eval

lemma lowest_onepast:
" findLowestKVWithKEquivTo 
  instance_Basic_classes_Ord_Num_natural_dict instance_Basic_classes_Ord_Num_natural_dict(( 4 :: nat)) testEquiv
({ (( 6 :: nat),( 0 :: nat)) } :: (nat * nat) set) None = None "
by eval

lemma lowest_oneprev:
" findLowestKVWithKEquivTo 
  instance_Basic_classes_Ord_Num_natural_dict instance_Basic_classes_Ord_Num_natural_dict(( 4 :: nat)) testEquiv 
({ (( 2 :: nat),( 0 :: nat)) } :: (nat * nat) set) None = None "
by eval

lemma highest_simple:
" findHighestKVWithKEquivTo 
  instance_Basic_classes_Ord_Num_natural_dict instance_Basic_classes_Ord_Num_natural_dict(( 4 :: nat)) testEquiv
({ (( 1 :: nat),( 0 :: nat)), (( 2 :: nat),( 0 :: nat)), (( 3 :: nat),( 0 :: nat)), (( 4 :: nat),( 0 :: nat)), (( 5 :: nat),( 0 :: nat)), (( 6 :: nat),( 0 :: nat)) } :: (nat * nat) set) None = Some (( 5 :: nat),( 0 :: nat))"
by eval

lemma highest_kv:
" findHighestKVWithKEquivTo 
  instance_Basic_classes_Ord_Num_natural_dict instance_Basic_classes_Ord_Num_natural_dict(( 4 :: nat)) testEquiv
({ (( 1 :: nat),( 0 :: nat)), (( 2 :: nat),( 0 :: nat)), (( 3 :: nat),( 0 :: nat)), (( 4 :: nat),( 0 :: nat)), (( 5 :: nat),( 0 :: nat)), (( 5 :: nat),( 1 :: nat)), (( 6 :: nat),( 0 :: nat)) } :: (nat * nat) set) None = Some (( 5 :: nat),( 1 :: nat))"
by eval

lemma highest_empty:
" findHighestKVWithKEquivTo 
  instance_Basic_classes_Ord_Num_natural_dict instance_Basic_classes_Ord_Num_natural_dict(( 4 :: nat)) testEquiv
({} :: (nat * nat) set) None = None "
by eval

lemma highest_onepast:
" findHighestKVWithKEquivTo 
  instance_Basic_classes_Ord_Num_natural_dict instance_Basic_classes_Ord_Num_natural_dict(( 4 :: nat)) testEquiv 
({ (( 6 :: nat),( 0 :: nat)) } :: (nat * nat) set) None = None "
by eval

lemma highest_oneprev:
" findHighestKVWithKEquivTo 
  instance_Basic_classes_Ord_Num_natural_dict instance_Basic_classes_Ord_Num_natural_dict(( 4 :: nat)) testEquiv
({ (( 2 :: nat),( 0 :: nat)) } :: (nat * nat) set) None = None "
by eval

lemma lookup_simple :
" lookupBy0 instance_Basic_classes_Ord_Num_natural_dict instance_Basic_classes_Ord_Num_natural_dict testEquiv(( 4 :: nat)) ({ (( 1 :: nat),( 0 :: nat)), (( 2 :: nat),( 0 :: nat)), (( 3 :: nat),( 0 :: nat)), (( 4 :: nat),( 0 :: nat)), (( 5 :: nat),( 0 :: nat)), (( 6 :: nat),( 0 :: nat)) } :: (nat * nat) set)
= ([(( 3 :: nat),( 0 :: nat)), (( 4 :: nat),( 0 :: nat)), (( 5 :: nat),( 0 :: nat))] :: (nat * nat) list)"
by eval

lemma lookup_kv :
" lookupBy0 instance_Basic_classes_Ord_Num_natural_dict instance_Basic_classes_Ord_Num_natural_dict testEquiv(( 4 :: nat)) ({ (( 1 :: nat),( 0 :: nat)), (( 2 :: nat),( 0 :: nat)), (( 3 :: nat),( 0 :: nat)), (( 4 :: nat),( 0 :: nat)), (( 4 :: nat),( 1 :: nat)), (( 5 :: nat),( 0 :: nat)), (( 6 :: nat),( 0 :: nat)) } :: (nat * nat) set)
= ([(( 3 :: nat),( 0 :: nat)), (( 4 :: nat),( 0 :: nat)), (( 4 :: nat),( 1 :: nat)), (( 5 :: nat),( 0 :: nat))] :: (nat * nat) list)"
by eval

lemma lookup_empty:
" lookupBy0 instance_Basic_classes_Ord_Num_natural_dict instance_Basic_classes_Ord_Num_natural_dict testEquiv(( 4 :: nat)) ({} :: (nat * nat) set) = ([]:: (nat * nat) list)"
by eval

lemma lookup_singleton:
" lookupBy0 instance_Basic_classes_Ord_Num_natural_dict instance_Basic_classes_Ord_Num_natural_dict testEquiv(( 4 :: nat)) ({(( 5 :: nat),( 0 :: nat))} :: (nat * nat) set) = ([(( 5 :: nat),( 0 :: nat))]:: (nat * nat) list)"
by eval

lemma lookup_onepast:
" lookupBy0 instance_Basic_classes_Ord_Num_natural_dict instance_Basic_classes_Ord_Num_natural_dict testEquiv(( 4 :: nat)) ({ (( 6 :: nat),( 0 :: nat)) } :: (nat * nat) set) = ([] :: (nat * nat) list)"
by eval

lemma lookup_oneprev:
" lookupBy0 instance_Basic_classes_Ord_Num_natural_dict instance_Basic_classes_Ord_Num_natural_dict testEquiv(( 4 :: nat)) ({ (( 2 :: nat),( 0 :: nat)) } :: (nat * nat) set) = ([] :: (nat * nat) list)"
by eval


(****************************************************)
(*                                                  *)
(* Termination Proofs                               *)
(*                                                  *)
(****************************************************)

termination findLowestKVWithKEquivTo by lexicographic_order

termination findHighestKVWithKEquivTo by lexicographic_order



end
