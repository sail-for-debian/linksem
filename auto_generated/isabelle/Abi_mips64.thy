chapter {* Generated by Lem from abis/mips64/abi_mips64.lem. *}

theory "Abi_mips64" 

imports 
 	 Main
	 "/auto/homes/dpm36/Work/Cambridge/bitbucket/lem/isabelle-lib/Lem_num" 
	 "/auto/homes/dpm36/Work/Cambridge/bitbucket/lem/isabelle-lib/Lem_list" 
	 "/auto/homes/dpm36/Work/Cambridge/bitbucket/lem/isabelle-lib/Lem_basic_classes" 
	 "/auto/homes/dpm36/Work/Cambridge/bitbucket/lem/isabelle-lib/Lem_bool" 
	 "/auto/homes/dpm36/Work/Cambridge/bitbucket/lem/isabelle-lib/Lem_maybe" 
	 "/auto/homes/dpm36/Work/Cambridge/bitbucket/lem/isabelle-lib/Lem_assert_extra" 
	 "/auto/homes/dpm36/Work/Cambridge/bitbucket/linksem/auto_generated/isabelle/Missing_pervasives" 
	 "/auto/homes/dpm36/Work/Cambridge/bitbucket/linksem/auto_generated/isabelle/Error" 
	 "/auto/homes/dpm36/Work/Cambridge/bitbucket/linksem/auto_generated/isabelle/Endianness" 
	 "/auto/homes/dpm36/Work/Cambridge/bitbucket/linksem/auto_generated/isabelle/Elf_types_native_uint" 
	 "/auto/homes/dpm36/Work/Cambridge/bitbucket/linksem/auto_generated/isabelle/Elf_header" 
	 "/auto/homes/dpm36/Work/Cambridge/bitbucket/lem/isabelle-lib/Lem_map" 
	 "/auto/homes/dpm36/Work/Cambridge/bitbucket/linksem/auto_generated/isabelle/Elf_interpreted_section" 
	 "/auto/homes/dpm36/Work/Cambridge/bitbucket/linksem/auto_generated/isabelle/Elf_interpreted_segment" 
	 "/auto/homes/dpm36/Work/Cambridge/bitbucket/linksem/auto_generated/isabelle/Elf_file" 
	 "/auto/homes/dpm36/Work/Cambridge/bitbucket/linksem/auto_generated/isabelle/Memory_image" 
	 "/auto/homes/dpm36/Work/Cambridge/bitbucket/linksem/auto_generated/isabelle/Abi_classes" 
	 "Abi_mips64_elf_header" 

begin 

(** [abi_mips64] contains top-level definition for the MIPS64 ABI.
  *)

(*open import Basic_classes*)
(*open import Bool*)
(*open import List*)
(*open import Num*)
(*open import Maybe*)
(*open import Error*)
(*open import Map*)
(*open import Assert_extra*)

(*open import Missing_pervasives*)
(*open import Elf_header*)
(*open import Elf_types_native_uint*)
(*open import Elf_file*)
(*open import Elf_interpreted_segment*)
(*open import Elf_interpreted_section*)

(*open import Endianness*)
(*open import Memory_image*)
(* open import Elf_memory_image *)

(*open import Abi_classes*)
(*open import Abi_mips64_relocation*)
(*open import Abi_mips64_elf_header*)

(** [abi_mips64_compute_program_entry_point segs entry] computes the program
  * entry point using ABI-specific conventions.  On MIPS64 the entry point in
  * the ELF header ([entry] here) is the real entry point.  On other ABIs, e.g.
  * PowerPC64, the entry point [entry] is a pointer into one of the segments
  * constituting the process image (passed in as [segs] here for a uniform
  * interface).
  *)
(*val abi_mips64_compute_program_entry_point : list elf64_interpreted_segments -> elf64_addr -> error natural*)
definition abi_mips64_compute_program_entry_point  :: "(elf64_interpreted_segments)list \<Rightarrow> Elf_Types_Local.uint64 \<Rightarrow>(nat)error "  where 
     " abi_mips64_compute_program_entry_point segs entry = (
	error_return (unat entry))"


(*val header_is_mips64 : elf64_header -> bool*)
definition header_is_mips64  :: " elf64_header \<Rightarrow> bool "  where 
     " header_is_mips64 h = (  
    is_valid_elf64_header h
    \<and> ((index(elf64_ident   h) ( elf_ii_data) = Some (Elf_Types_Local.unsigned_char_of_nat elf_data_2msb))
    \<and> (is_valid_abi_mips64_machine_architecture (unat(elf64_machine   h))
    \<and> is_valid_abi_mips64_magic_number(elf64_ident   h))))"


type_synonym 'abifeature plt_entry_address_fn =" nat (* offset in PLT? *) \<Rightarrow> 'abifeature annotated_memory_image (* img *) \<Rightarrow> nat " (* addr *)

datatype 'abifeature mips64_abi_feature = 
    GOT1 "  ( (string * ( symbol_definition option))list)"
    | PLT1 " ( (string * ( symbol_definition option) * 'abifeature plt_entry_address_fn)list)"
    
(*val abiFeatureCompare : forall 'abifeature. mips64_abi_feature 'abifeature -> mips64_abi_feature 'abifeature -> Basic_classes.ordering*)
fun abiFeatureCompare1  :: " 'abifeature mips64_abi_feature \<Rightarrow> 'abifeature mips64_abi_feature \<Rightarrow> ordering "  where 
     " abiFeatureCompare1 (GOT1(_)) (GOT1(_)) = ( EQ )"
|" abiFeatureCompare1 (GOT1(_)) (PLT1(_)) = ( LT )"
|" abiFeatureCompare1 (PLT1(_)) (PLT1(_)) = ( EQ )"
|" abiFeatureCompare1 (PLT1(_)) (GOT1(_)) = ( GT )" 
declare abiFeatureCompare1.simps [simp del]


(*val abiFeatureTagEq : forall 'abifeature. mips64_abi_feature 'abifeature -> mips64_abi_feature 'abifeature -> bool*)
fun abiFeatureTagEq1  :: " 'abifeature mips64_abi_feature \<Rightarrow> 'abifeature mips64_abi_feature \<Rightarrow> bool "  where 
     " abiFeatureTagEq1 (GOT1(_)) (GOT1(_)) = ( True )"
|" abiFeatureTagEq1 (PLT1(_)) (PLT1(_)) = ( True )"
|" abiFeatureTagEq1 _ _ = ( False )" 
declare abiFeatureTagEq1.simps [simp del]


definition instance_Abi_classes_AbiFeatureTagEquiv_Abi_mips64_mips64_abi_feature_dict  :: "('abifeature mips64_abi_feature)AbiFeatureTagEquiv_class "  where 
     " instance_Abi_classes_AbiFeatureTagEquiv_Abi_mips64_mips64_abi_feature_dict = ((|

  abiFeatureTagEquiv_method = abiFeatureTagEq1 |) )"


definition instance_Basic_classes_Ord_Abi_mips64_mips64_abi_feature_dict  :: "('abifeature mips64_abi_feature)Ord_class "  where 
     " instance_Basic_classes_Ord_Abi_mips64_mips64_abi_feature_dict = ((|

  compare_method = abiFeatureCompare1,

  isLess_method = (\<lambda> f1 .  (\<lambda> f2 .  (abiFeatureCompare1 f1 f2 = LT))),

  isLessEqual_method = (\<lambda> f1 .  (\<lambda> f2 .  (op \<in>) (abiFeatureCompare1 f1 f2) ({LT, EQ}))),

  isGreater_method = (\<lambda> f1 .  (\<lambda> f2 .  (abiFeatureCompare1 f1 f2 = GT))),

  isGreaterEqual_method = (\<lambda> f1 .  (\<lambda> f2 .  (op \<in>) (abiFeatureCompare1 f1 f2) ({GT, EQ})))|) )"


(*val section_is_special : forall 'abifeature. elf64_interpreted_section -> annotated_memory_image 'abifeature -> bool*)
definition section_is_special2  :: " elf64_interpreted_section \<Rightarrow> 'abifeature annotated_memory_image \<Rightarrow> bool "  where 
     " section_is_special2 s img3 = ( 
    elf_section_is_special s img3 )"
 
end
