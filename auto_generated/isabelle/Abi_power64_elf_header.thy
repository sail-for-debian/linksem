chapter {* Generated by Lem from abis/power64/abi_power64_elf_header.lem. *}

theory "Abi_power64_elf_header" 

imports 
 	 Main
	 "/auto/homes/dpm36/Work/Cambridge/bitbucket/lem/isabelle-lib/Lem_list" 
	 "/auto/homes/dpm36/Work/Cambridge/bitbucket/lem/isabelle-lib/Lem_basic_classes" 
	 "/auto/homes/dpm36/Work/Cambridge/bitbucket/lem/isabelle-lib/Lem_bool" 
	 "/auto/homes/dpm36/Work/Cambridge/bitbucket/lem/isabelle-lib/Lem_maybe" 
	 "/auto/homes/dpm36/Work/Cambridge/bitbucket/linksem/auto_generated/isabelle/Missing_pervasives" 
	 "/auto/homes/dpm36/Work/Cambridge/bitbucket/linksem/auto_generated/isabelle/Endianness" 
	 "/auto/homes/dpm36/Work/Cambridge/bitbucket/linksem/auto_generated/isabelle/Elf_types_native_uint" 
	 "/auto/homes/dpm36/Work/Cambridge/bitbucket/linksem/auto_generated/isabelle/Elf_header" 

begin 

(** [abi_power64_elf_header], Power64 ABI specific definitions related to the 
  * ELF file header.
  *)

(*open import Basic_classes*)
(*open import Bool*)
(*open import List*)
(*open import Maybe*)
(*open import Missing_pervasives*)

(*open import Elf_header*)
(*open import Elf_types_native_uint*)

(*open import Endianness*)

(** [is_valid_abi_power64_machine_architecture m] checks whether the ELF header's
  * machine architecture is valid according to the ABI-specific specification.
  * Machine architecture must be Power64 (Section 4.1).
  *)
(*val is_valid_abi_power64_machine_architecture : nat -> bool*)
definition is_valid_abi_power64_machine_architecture  :: " nat \<Rightarrow> bool "  where 
     " is_valid_abi_power64_machine_architecture m = (
  m =  elf_ma_ppc64 )"


(** [is_valid_abi_power64_magic_number magic] checks whether the ELF header's
  * magic number is valid according to the ABI-specific specification.
  * File class must be 64-bit (Section 4.1)
  * Data encoding must be little or big endian and must match the data encoding
  * of the file. (Section 4.1)
  *)
(*val is_valid_abi_power64_magic_number : list unsigned_char -> endianness -> bool*)
definition is_valid_abi_power64_magic_number  :: "(Elf_Types_Local.unsigned_char)list \<Rightarrow> endianness \<Rightarrow> bool "  where 
     " is_valid_abi_power64_magic_number magic endian = (
  (case  index magic ( elf_ii_class) of
      None  => False
    | Some cls =>
      (case  index magic ( elf_ii_data) of
          None => False
        | Some ed =>
          (case  endian of
              Little =>
                (unat cls = elf_class_64) \<and>
                  (unat ed = elf_data_2lsb)
            | Big    =>
                (unat cls = elf_class_64) \<and>
                  (unat ed = elf_data_2msb)
          )
      )
  ))"

end
