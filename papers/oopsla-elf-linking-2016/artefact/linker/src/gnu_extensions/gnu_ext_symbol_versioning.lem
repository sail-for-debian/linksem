(** The [gnu_ext_symbol_versioning] defines constants, types and functions
  * relating to the GNU symbol versioning extensions (i.e. contents of
  * GNU_VERSYM sections).
  *
  * TODO: work out what is going on with symbol versioning.  The specification
  * is completely opaque.
  *)

open import Basic_classes
open import Bool
open import List
open import Maybe
open import Num
open import String

open import Byte_sequence
open import Endianness
open import Error

open import Elf_dynamic
open import Elf_file
open import Elf_header
open import Elf_section_header_table
open import Elf_symbol_table
open import Elf_types_native_uint

open import Missing_pervasives
open import Show

open import Gnu_ext_dynamic
open import Gnu_ext_section_header_table

(** [gnu_ext_elf32_symbol_version_table] is an array (linked list, here) of
  * [elf32_half] entries.
  *)
type gnu_ext_elf32_symbol_version_table =
  list elf32_half
  
type gnu_ext_elf64_symbol_version_table =
  list elf64_half

val obtain_gnu_ext_elf32_symbol_version_table : elf32_file -> byte_sequence -> error gnu_ext_elf32_symbol_version_table
let obtain_gnu_ext_elf32_symbol_version_table f1 bs0 =
  let sht = f1.elf32_file_section_header_table in
  let endian = get_elf32_header_endianness f1.elf32_file_header in
  let vers = List.filter (fun ent ->
    ent.elf32_sh_type = elf32_word_of_natural sht_gnu_versym
  ) sht
  in
    match vers with
      | []    -> return []
      | [ver] ->
        let off = natural_of_elf32_off  ver.elf32_sh_offset in
        let siz = natural_of_elf32_word ver.elf32_sh_size in
        let lnk = natural_of_elf32_word ver.elf32_sh_link in
        get_elf32_symbol_table_by_index f1 lnk >>= fun symtab ->
        let dlen = naturalFromNat (List.length symtab) in
        Byte_sequence.offset_and_cut off siz bs0         >>= fun ver      ->
        Error.repeatM' dlen bs0 (read_elf32_half endian) >>= fun (ver, _) ->
        return ver
      | _     -> fail "obtain_gnu_ext_elf32_symbol_version_table: multiple sections of type .gnu_versym present in file"
    end
 
val obtain_gnu_ext_elf64_symbol_version_table : endianness -> elf64_section_header_table -> elf64_symbol_table -> byte_sequence -> error gnu_ext_elf64_symbol_version_table
let obtain_gnu_ext_elf64_symbol_version_table endian sht dynsym bs0 =
  let dlen = naturalFromNat (List.length dynsym) in
    if dlen = 0 then
      return []
    else
      let vers = List.filter (fun ent ->
          ent.elf64_sh_type = elf64_word_of_natural sht_gnu_versym
        ) sht
      in
        match vers with
          | []    -> return []
          | [ver] ->
            let off = natural_of_elf64_off   ver.elf64_sh_offset in
            let siz = natural_of_elf64_xword ver.elf64_sh_size in
            Byte_sequence.offset_and_cut off siz bs0         >>= fun ver      ->
            Error.repeatM' dlen bs0 (read_elf64_half endian) >>= fun (ver, _) ->
            return ver
          | _     -> fail "obtain_gnu_ext_elf64_symbol_version_table: multiple sections of type .gnu_versym present in file"
        end
  
type gnu_ext_elf32_verdef =
  <| gnu_ext_elf32_vd_version : elf32_half
   ; gnu_ext_elf32_vd_flags   : elf32_half
   ; gnu_ext_elf32_vd_ndx     : elf32_half
   ; gnu_ext_elf32_vd_cnt     : elf32_half
   ; gnu_ext_elf32_vd_hash    : elf32_word
   ; gnu_ext_elf32_vd_aux     : elf32_word
   ; gnu_ext_elf32_vd_next    : elf32_word
   |>
   
type gnu_ext_elf64_verdef =
  <| gnu_ext_elf64_vd_version : elf64_half
   ; gnu_ext_elf64_vd_flags   : elf64_half
   ; gnu_ext_elf64_vd_ndx     : elf64_half
   ; gnu_ext_elf64_vd_cnt     : elf64_half
   ; gnu_ext_elf64_vd_hash    : elf64_word
   ; gnu_ext_elf64_vd_aux     : elf64_word
   ; gnu_ext_elf64_vd_next    : elf64_word
   |>
   
val string_of_gnu_ext_elf32_verdef : gnu_ext_elf32_verdef -> string
let {ocaml} string_of_gnu_ext_elf32_verdef verdef =
  unlines [
    "Version: " ^ show verdef.gnu_ext_elf32_vd_version
  ; "Flags: " ^ show verdef.gnu_ext_elf32_vd_flags
  ; "Index: " ^ show verdef.gnu_ext_elf32_vd_ndx
  ; "Count: " ^ show verdef.gnu_ext_elf32_vd_cnt
  ; "Hash: " ^ show verdef.gnu_ext_elf32_vd_hash
  ]
  
val string_of_gnu_ext_elf64_verdef : gnu_ext_elf64_verdef -> string
let {ocaml} string_of_gnu_ext_elf64_verdef verdef =
  unlines [
    "Version: " ^ show verdef.gnu_ext_elf64_vd_version
  ; "Flags: " ^ show verdef.gnu_ext_elf64_vd_flags
  ; "Index: " ^ show verdef.gnu_ext_elf64_vd_ndx
  ; "Count: " ^ show verdef.gnu_ext_elf64_vd_cnt
  ; "Hash: " ^ show verdef.gnu_ext_elf64_vd_hash
  ]
   
val read_gnu_ext_elf32_verdef : endianness -> byte_sequence -> error (gnu_ext_elf32_verdef * byte_sequence)
let read_gnu_ext_elf32_verdef endian bs0 =
  read_elf32_half endian bs0 >>= fun (ver, bs0) ->
  read_elf32_half endian bs0 >>= fun (flg, bs0) ->
  read_elf32_half endian bs0 >>= fun (ndx, bs0) ->
  read_elf32_half endian bs0 >>= fun (cnt, bs0) ->
  read_elf32_word endian bs0 >>= fun (hsh, bs0) ->
  read_elf32_word endian bs0 >>= fun (aux, bs0) ->
  read_elf32_word endian bs0 >>= fun (nxt, bs0) ->
    return (<| gnu_ext_elf32_vd_version = ver; gnu_ext_elf32_vd_flags = flg;
      gnu_ext_elf32_vd_ndx = ndx; gnu_ext_elf32_vd_cnt = cnt;
        gnu_ext_elf32_vd_hash = hsh; gnu_ext_elf32_vd_aux = aux;
      gnu_ext_elf32_vd_next = nxt |>, bs0)
      
val read_gnu_ext_elf64_verdef : endianness -> byte_sequence -> error (gnu_ext_elf64_verdef * byte_sequence)
let read_gnu_ext_elf64_verdef endian bs0 =
  read_elf64_half endian bs0 >>= fun (ver, bs0) ->
  read_elf64_half endian bs0 >>= fun (flg, bs0) ->
  read_elf64_half endian bs0 >>= fun (ndx, bs0) ->
  read_elf64_half endian bs0 >>= fun (cnt, bs0) ->
  read_elf64_word endian bs0 >>= fun (hsh, bs0) ->
  read_elf64_word endian bs0 >>= fun (aux, bs0) ->
  read_elf64_word endian bs0 >>= fun (nxt, bs0) ->
    return (<| gnu_ext_elf64_vd_version = ver; gnu_ext_elf64_vd_flags = flg;
      gnu_ext_elf64_vd_ndx = ndx; gnu_ext_elf64_vd_cnt = cnt;
        gnu_ext_elf64_vd_hash = hsh; gnu_ext_elf64_vd_aux = aux;
      gnu_ext_elf64_vd_next = nxt |>, bs0)
      
val gnu_ext_elf32_verdef_size : natural
let gnu_ext_elf32_verdef_size =
  160
  
val gnu_ext_elf64_verdef_size : natural
let gnu_ext_elf64_verdef_size =
  256
   
type gnu_ext_elf32_veraux =
  <| gnu_ext_elf32_vda_name : elf32_word
   ; gnu_ext_elf32_vda_next : elf32_word
   |>
   
type gnu_ext_elf64_veraux =
  <| gnu_ext_elf64_vda_name : elf64_word
   ; gnu_ext_elf64_vda_next : elf64_word
   |>
   
val gnu_ext_elf32_veraux_size : natural
let gnu_ext_elf32_veraux_size = 64

val gnu_ext_elf64_veraux_size : natural
let gnu_ext_elf64_veraux_size = 128
   
val read_gnu_ext_elf32_veraux : endianness -> byte_sequence -> error (gnu_ext_elf32_veraux * byte_sequence)
let read_gnu_ext_elf32_veraux endian bs0 =
  read_elf32_word endian bs0 >>= fun (nme, bs0) ->
  read_elf32_word endian bs0 >>= fun (nxt, bs0) ->
    return (<| gnu_ext_elf32_vda_name = nme; gnu_ext_elf32_vda_next = nxt |>, bs0)
    
val read_gnu_ext_elf64_veraux : endianness -> byte_sequence -> error (gnu_ext_elf64_veraux * byte_sequence)
let read_gnu_ext_elf64_veraux endian bs0 =
  read_elf64_word endian bs0 >>= fun (nme, bs0) ->
  read_elf64_word endian bs0 >>= fun (nxt, bs0) ->
    return (<| gnu_ext_elf64_vda_name = nme; gnu_ext_elf64_vda_next = nxt |>, bs0)
   
type gnu_ext_elf32_verneed =
  <| gnu_ext_elf32_vn_version : elf32_half
   ; gnu_ext_elf32_vn_cnt     : elf32_half
   ; gnu_ext_elf32_vn_file    : elf32_word
   ; gnu_ext_elf32_vn_aux     : elf32_word
   ; gnu_ext_elf32_vn_next    : elf32_word
   |>
   
type gnu_ext_elf64_verneed =
  <| gnu_ext_elf64_vn_version : elf64_half
   ; gnu_ext_elf64_vn_cnt     : elf64_half
   ; gnu_ext_elf64_vn_file    : elf64_word
   ; gnu_ext_elf64_vn_aux     : elf64_word
   ; gnu_ext_elf64_vn_next    : elf64_word
   |>
   
val gnu_ext_elf32_verneed_size : natural
let gnu_ext_elf32_verneed_size = 128

val gnu_ext_elf64_verneed_size : natural
let gnu_ext_elf64_verneed_size = 224
   
val read_gnu_ext_elf32_verneed : endianness -> byte_sequence -> error (gnu_ext_elf32_verneed * byte_sequence)
let read_gnu_ext_elf32_verneed endian bs0 =
  read_elf32_half endian bs0 >>= fun (ver, bs0) ->
  read_elf32_half endian bs0 >>= fun (cnt, bs0) ->
  read_elf32_word endian bs0 >>= fun (fle, bs0) ->
  read_elf32_word endian bs0 >>= fun (aux, bs0) ->
  read_elf32_word endian bs0 >>= fun (nxt, bs0) ->
    return (<| gnu_ext_elf32_vn_version = ver; gnu_ext_elf32_vn_cnt = cnt;
      gnu_ext_elf32_vn_file = fle; gnu_ext_elf32_vn_aux = aux;
        gnu_ext_elf32_vn_next = nxt |>, bs0)

val read_gnu_ext_elf64_verneed : endianness -> byte_sequence -> error (gnu_ext_elf64_verneed * byte_sequence)
let read_gnu_ext_elf64_verneed endian bs0 =
  read_elf64_half endian bs0 >>= fun (ver, bs0) ->
  read_elf64_half endian bs0 >>= fun (cnt, bs0) ->
  read_elf64_word endian bs0 >>= fun (fle, bs0) ->
  read_elf64_word endian bs0 >>= fun (aux, bs0) ->
  read_elf64_word endian bs0 >>= fun (nxt, bs0) ->
    return (<| gnu_ext_elf64_vn_version = ver; gnu_ext_elf64_vn_cnt = cnt;
      gnu_ext_elf64_vn_file = fle; gnu_ext_elf64_vn_aux = aux;
        gnu_ext_elf64_vn_next = nxt |>, bs0)
   
type gnu_ext_elf32_vernaux =
  <| gnu_ext_elf32_vna_hash  : elf32_word
   ; gnu_ext_elf32_vna_flags : elf32_half
   ; gnu_ext_elf32_vna_other : elf32_half
   ; gnu_ext_elf32_vna_name  : elf32_word
   ; gnu_ext_elf32_vna_next  : elf32_word
   |>
   
type gnu_ext_elf64_vernaux =
  <| gnu_ext_elf64_vna_hash  : elf64_word
   ; gnu_ext_elf64_vna_flags : elf64_half
   ; gnu_ext_elf64_vna_other : elf64_half
   ; gnu_ext_elf64_vna_name  : elf64_word
   ; gnu_ext_elf64_vna_next  : elf64_word
   |>
   
val string_of_gnu_ext_elf32_vernaux : gnu_ext_elf32_vernaux -> string
let {ocaml} string_of_gnu_ext_elf32_vernaux vernaux =
  unlines [
    "Hash: " ^ show vernaux.gnu_ext_elf32_vna_hash
  ; "Flags: " ^ show vernaux.gnu_ext_elf32_vna_flags
  ; "Other: " ^ show vernaux.gnu_ext_elf32_vna_other
  ; "Name: " ^ show vernaux.gnu_ext_elf32_vna_name
  ; "Next: " ^ show vernaux.gnu_ext_elf32_vna_next
  ]
  
val string_of_gnu_ext_elf64_vernaux : gnu_ext_elf64_vernaux -> string
let {ocaml} string_of_gnu_ext_elf64_vernaux vernaux =
  unlines [
    "Hash: " ^ show vernaux.gnu_ext_elf64_vna_hash
  ; "Flags: " ^ show vernaux.gnu_ext_elf64_vna_flags
  ; "Other: " ^ show vernaux.gnu_ext_elf64_vna_other
  ; "Name: " ^ show vernaux.gnu_ext_elf64_vna_name
  ; "Next: " ^ show vernaux.gnu_ext_elf64_vna_next
  ]
   
val gnu_ext_elf32_vernaux_size : natural
let gnu_ext_elf32_vernaux_size = 16

val gnu_ext_elf64_vernaux_size : natural
let gnu_ext_elf64_vernaux_size = 224
   
val read_gnu_ext_elf32_vernaux : endianness -> byte_sequence -> error (gnu_ext_elf32_vernaux * byte_sequence)
let read_gnu_ext_elf32_vernaux endian bs0 =
  read_elf32_word endian bs0 >>= fun (hsh, bs0) ->
  read_elf32_half endian bs0 >>= fun (flg, bs0) ->
  read_elf32_half endian bs0 >>= fun (otr, bs0) ->
  read_elf32_word endian bs0 >>= fun (nme, bs0) ->
  read_elf32_word endian bs0 >>= fun (nxt, bs0) ->
    return (<| gnu_ext_elf32_vna_hash = hsh; gnu_ext_elf32_vna_flags = flg;
      gnu_ext_elf32_vna_other = otr; gnu_ext_elf32_vna_name = nme;
    gnu_ext_elf32_vna_next = nxt |>, bs0)

val read_gnu_ext_elf64_vernaux : endianness -> byte_sequence -> error (gnu_ext_elf64_vernaux * byte_sequence)
let read_gnu_ext_elf64_vernaux endian bs0 =
  read_elf64_word endian bs0 >>= fun (hsh, bs0) ->
  read_elf64_half endian bs0 >>= fun (flg, bs0) ->
  read_elf64_half endian bs0 >>= fun (otr, bs0) ->
  read_elf64_word endian bs0 >>= fun (nme, bs0) ->
  read_elf64_word endian bs0 >>= fun (nxt, bs0) ->
    return (<| gnu_ext_elf64_vna_hash = hsh; gnu_ext_elf64_vna_flags = flg;
      gnu_ext_elf64_vna_other = otr; gnu_ext_elf64_vna_name = nme;
    gnu_ext_elf64_vna_next = nxt |>, bs0)
