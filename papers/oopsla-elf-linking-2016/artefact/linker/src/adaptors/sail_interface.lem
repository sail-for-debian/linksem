open import Basic_classes
open import Function
open import Maybe
open import Num
open import String
open import Tuple

open import Assert_extra

open import Byte_sequence
open import Error
open import Missing_pervasives
open import Show

open import Elf_header
open import Elf_file
open import Elf_interpreted_section
open import String_table
open import Elf_symbol_table
open import Elf_types_native_uint

type executable_process_image
  = ELF_Class_32 of elf32_executable_process_image
  | ELF_Class_64 of elf64_executable_process_image

val populate : string -> error executable_process_image
let {ocaml} populate fname =
  (* Acquire the data from the file... *)
  Byte_sequence.acquire fname >>= fun bs0 ->
  (* Read the magic number and the flags in the header... *)
  repeatM' Elf_header.ei_nident bs0 (read_unsigned_char Endianness.default_endianness) >>= fun (ident, bs) ->
    match List.index ident 4 with
      | Nothing -> fail "populate: ELF ident transcription error"
      | Just c  ->
        (* Calculate whether we are dealing with a 32- or 64-bit file based on
         * what we have read...
         *)
        if natural_of_unsigned_char c = Elf_header.elf_class_32 then
          Elf_file.read_elf32_file bs0 >>= fun ef5 ->
          if Elf_program_header_table.get_elf32_static_linked ef5.elf32_file_program_header_table then
            Elf_file.get_elf32_executable_image ef5 >>= fun img ->
            return (ELF_Class_32 img)
          else
            fail "populate: not a statically linked executable"
        else if natural_of_unsigned_char c = Elf_header.elf_class_64 then
          Elf_file.read_elf64_file bs0 >>= fun ef5 ->
          if Elf_program_header_table.get_elf64_static_linked ef5.elf64_file_program_header_table then
            Elf_file.get_elf64_executable_image ef5 >>= fun img ->
            return (ELF_Class_64 img)
          else
            fail "populate: not a statically linked executable"
        else
          fail "populate: ELF class unrecognised"
    end

val obtain_global_symbol_init_info : string -> error global_symbol_init_info
let {ocaml} obtain_global_symbol_init_info fname =
  (* Acquire the data from the file... *)
  Byte_sequence.acquire fname >>= fun bs0 ->
  (* Read the magic number and the flags in the header... *)
  repeatM' Elf_header.ei_nident bs0 (read_unsigned_char Endianness.default_endianness) >>= fun (ident, bs) ->
    match List.index ident 4 with
      | Nothing -> fail "obtain_global_symbol_init_info: ELF ident transcription error"
      | Just c  ->
        (* Calculate whether we are dealing with a 32- or 64-bit file based on
         * what we have read...
         *)
        if natural_of_unsigned_char c = Elf_header.elf_class_32 then
          Elf_file.read_elf32_file bs0 >>= fun f1 ->
          if Elf_program_header_table.get_elf32_static_linked f1.elf32_file_program_header_table then
            Elf_file.get_elf32_file_global_symbol_init f1 >>= fun init ->
            return init
          else
            fail "obtain_global_symbol_init_info: not a statically linked executable"
        else if natural_of_unsigned_char c = Elf_header.elf_class_64 then
          Elf_file.read_elf64_file bs0 >>= fun f1 ->
          if Elf_program_header_table.get_elf64_static_linked f1.elf64_file_program_header_table then
            Elf_file.get_elf64_file_global_symbol_init f1 >>= fun init ->
            return init
          else
            fail "obtain_global_symbol_init_info: not a statically linked executable"
        else
          fail "obtain_global_symbol_init_info: ELF class unrecognised"
    end

val populate_and_obtain_global_symbol_init_info : string -> error (executable_process_image * global_symbol_init_info)
let {ocaml} populate_and_obtain_global_symbol_init_info fname =
  (* Acquire the data from the file... *)
  Byte_sequence.acquire fname >>= fun bs0 ->
  (* Read the magic number and the flags in the header... *)
  repeatM' Elf_header.ei_nident bs0 (read_unsigned_char Endianness.default_endianness) >>= fun (ident, bs) ->
    match List.index ident 4 with
      | Nothing -> fail "populate_and_obtain_global_symbol_init_info: ELF ident transcription error"
      | Just c  ->
        (* Calculate whether we are dealing with a 32- or 64-bit file based on
         * what we have read...
         *)
        if natural_of_unsigned_char c = Elf_header.elf_class_32 then
          Elf_file.read_elf32_file bs0 >>= fun f1 ->
          if Elf_program_header_table.get_elf32_static_linked f1.elf32_file_program_header_table then
            Elf_file.get_elf32_file_global_symbol_init f1 >>= fun init ->
            Elf_file.get_elf32_executable_image f1 >>= fun img ->           
            return ((ELF_Class_32 img), init)
          else
            fail "populate_and_obtain_global_symbol_init_info: not a statically linked executable"
        else if natural_of_unsigned_char c = Elf_header.elf_class_64 then
          Elf_file.read_elf64_file bs0 >>= fun f1 ->
          if Elf_program_header_table.get_elf64_static_linked f1.elf64_file_program_header_table then
            Elf_file.get_elf64_file_global_symbol_init f1 >>= fun init ->
            Elf_file.get_elf64_executable_image f1 >>= fun img ->
            return ((ELF_Class_64 img), init)
          else
            fail "populate_and_obtain_global_symbol_init_info: not a statically linked executable"
        else
          fail "populate_and_obtain_global_symbol_init_info: ELF class unrecognised"
    end
