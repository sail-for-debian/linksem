open import Basic_classes
open import Bool
open import List
open import Maybe
open import Num
open import String
open import Assert_extra
open import Show
open import Sorting

open import {isabelle} `$ISABELLE_HOME/src/HOL/Word/Word`
open import {isabelle} `Elf_Types_Local`
open import {coq} `elf_types_local`

val naturalZero : natural
let naturalZero = 0

declare ocaml target_rep function naturalZero = `Nat_big_num.zero`

val id : forall 'a. 'a -> 'a
let id x = x

type byte

declare ocaml    target_rep type byte = `char`
declare isabelle target_rep type byte = `Elf_Types_Local.byte`
declare hol      target_rep type byte = `word8`
declare coq      target_rep type byte = `elf_types_local.byte`
val natural_of_byte : byte -> natural

declare ocaml    target_rep function natural_of_byte x = `Nat_big_num.of_int` (`Char.code` x)
declare isabelle target_rep function natural_of_byte = `unat`
declare hol      target_rep function natural_of_byte = `w2n`
declare coq      target_rep function natural_of_byte = `nat_of_byte`

let compare_byte b1 b2 = compare (natural_of_byte b1) (natural_of_byte b2)

instance (Ord byte)
    let compare = compare_byte
    let (<) = fun f1 -> (fun f2 -> (compare_byte f1 f2 = LT))
    let (<=) = fun f1 -> (fun f2 -> let result = compare_byte f1 f2 in result = LT || result = EQ)
    let (>) = fun f1 -> (fun f2 -> (compare_byte f1 f2 = GT))
    let (>=) = fun f1 -> (fun f2 -> let result = compare_byte f1 f2 in result = GT || result =  EQ)
end

val char_of_byte : byte -> char

declare ocaml    target_rep function char_of_byte x = ``x
declare isabelle target_rep function char_of_byte = `Elf_Types_Local.char_of_unsigned_char`
declare hol      target_rep function char_of_byte = `CHR` `o` `w2n`
declare coq      target_rep function char_of_byte = `char_of_byte`

val byte_of_char : char -> byte

declare ocaml    target_rep function byte_of_char x = ``x
declare isabelle target_rep function byte_of_char = `Elf_Types_Local.unsigned_char_of_char`
declare coq      target_rep function byte_of_char = `byte_of_char`
(* FIXME: declare hol      target_rep function char_of_byte = `CHR` `o` `w2n` *)

(* Define how to print a byte in hex *)
val hex_char_of_nibble : natural -> char
let hex_char_of_nibble n =
  if n = 0 then
    #'0'
  else if n = 1 then
    #'1'
  else if n = 2 then
    #'2'
  else if n = 3 then
    #'3'
  else if n = 4 then
    #'4'
  else if n = 5 then
    #'5'
  else if n = 6 then
    #'6'
  else if n = 7 then
    #'7'
  else if n = 8 then
    #'8'
  else if n = 9 then
    #'9'
  else if n = 10 then
    #'a'
  else if n = 11 then
    #'b'
  else if n = 12 then
    #'c'
  else if n = 13 then
    #'d'
  else if n = 14 then
    #'e'
  else if n = 15 then
    #'f'
   else
     fail

let hex_string_of_byte b = 
    toString [ hex_char_of_nibble ((natural_of_byte b) / 16)
             ; hex_char_of_nibble ((natural_of_byte b) mod 16)]

instance (Show byte)
    let show = hex_string_of_byte
end

val natural_of_decimal_digit : char -> maybe natural
let natural_of_decimal_digit c =
  if c = #'0' then
    Just 0
  else if c = #'1' then
    Just 1
  else if c = #'2' then
    Just 2
  else if c = #'3' then
    Just 3
  else if c = #'4' then
    Just 4
  else if c = #'5' then
    Just 5
  else if c = #'6' then
    Just 6
  else if c = #'7' then
    Just 7
  else if c = #'8' then
    Just 8
  else if c = #'9' then
    Just 9
  else
    Nothing

val natural_of_decimal_string_helper : natural -> list char -> natural
let rec natural_of_decimal_string_helper acc chars =
    match chars with 
        [] -> acc
        | c :: cs -> match natural_of_decimal_digit c with
            Just dig -> natural_of_decimal_string_helper ((10 * acc) + dig) cs
            | Nothing -> acc
        end
    end

val natural_of_decimal_string : string -> natural
let natural_of_decimal_string s = 
    natural_of_decimal_string_helper 0 (toCharList s)

val hex_string_of_natural : natural -> string
let rec hex_string_of_natural n = 
    if n < 16 then toString [hex_char_of_nibble n]
    else (hex_string_of_natural (n / 16)) ^ (toString [hex_char_of_nibble (n mod 16)])

val natural_of_bool : bool -> natural
let natural_of_bool b =
  match b with
    | true  -> 1
    | false -> 0
  end

val unsafe_nat_of_natural : natural -> nat

declare ocaml    target_rep function unsafe_nat_of_natural = `Nat_big_num.to_int`
declare isabelle target_rep function unsafe_nat_of_natural = ``
declare hol      target_rep function unsafe_nat_of_natural = ``
declare coq      target_rep function unsafe_nat_of_natural = ``

val unsafe_int_of_natural   : natural -> int

declare ocaml    target_rep function unsafe_int_of_natural = `Nat_big_num.to_int`
declare isabelle target_rep function unsafe_int_of_natural = `int`
declare hol      target_rep function unsafe_int_of_natural x = `&` x
declare coq      target_rep function unsafe_int_of_natural = `int_of_nat`

val byte_of_natural : natural -> byte

declare ocaml    target_rep function byte_of_natural x = `Char.chr` (`Nat_big_num.to_int` x)
declare isabelle target_rep function byte_of_natural m = (`of_nat` m `::` `byte`)
declare hol      target_rep function byte_of_natural = `n2w` `:` `num` `->` `8` `word`
declare coq      target_rep function byte_of_natural = `byte_of_nat`

declare ocaml    target_rep type ordering = `int`

val natural_ordering : natural -> natural -> ordering
let natural_ordering left right =
  if left = right then
    EQ
  else if left < right then
    LT
  else
    GT

declare ocaml target_rep function natural_ordering = `Nat_big_num.compare`

val merge_by : forall 'a. ('a -> 'a -> ordering) -> list 'a -> list 'a -> list 'a
let rec merge_by comp xs ys =
  match (xs, ys) with
    | ([], ys)      -> ys
    | (xs, [])     -> xs
    | (x::xs, y::ys) ->
      if comp x y = LT then
        x::(merge_by comp xs (y::ys))
      else
        y::(merge_by comp (x::xs) ys)
  end

val sort_by : forall 'a. ('a -> 'a -> ordering) -> list 'a -> list 'a
let rec sort_by comp xs =
  match xs with
    | [] -> []
    | [x] -> [x]
    | xs ->
      let ls = List.take (List.length xs div 2) xs in
      let rs = List.drop (List.length xs div 2) xs in
        merge_by comp (sort_by comp ls) (sort_by comp rs)
  end

declare ocaml    target_rep function sort_by = `List.sort`
declare isabelle target_rep function sort_by = `Elf_Types_Local.merge_sort`

(** [mapMaybei f xs] maps a function expecting an index (the position in the list
  * [xs] that it is currently viewing) and producing a [maybe] type across a list.
  * Elements that produce [Nothing] under [f] are discarded in the output, whilst
  * those producing [Just e] for some [e] are kept.
  *)
val mapMaybei' : forall 'a 'b. (natural -> 'a -> maybe 'b) -> natural -> list 'a -> list 'b
let rec mapMaybei' f idx xs =
  match xs with
  | []    -> []
  | x::xs ->
      match f idx x with
      | Nothing -> mapMaybei' f (1 + idx) xs
      | Just e  -> e :: mapMaybei' f (1 + idx) xs
      end
  end

val mapMaybei : forall 'a 'b. (natural -> 'a -> maybe 'b) -> list 'a -> list 'b
    
let mapMaybei f xs =
  mapMaybei' f 0 xs

(** [partitionii is xs] returns a pair of lists: firstly those elements in [xs] that are
    at indices in [is], and secondly the remaining elements. 
    It preserves the order of elements in xs. *)
val partitionii' : forall 'a. natural -> list natural -> list 'a 
    -> list (natural * 'a) (* accumulates the 'in' partition *)
    -> list (natural * 'a) (* accumulates the 'out' partition *)
    -> (list (natural * 'a) * list (natural * 'a))
let rec partitionii' (offset : natural) sorted_is xs reverse_accum reverse_accum_compl = 
    (* offset o means "xs begins at index o, as reckoned by the indices in sorted_is" *)
    match sorted_is with
        [] -> (List.reverse reverse_accum, List.reverse reverse_accum_compl)
        | i :: more_is -> 
            let (length_to_split_off : nat) = (natFromNatural (i - offset))
            in
            let (left, right) = List.splitAt length_to_split_off xs in
            let left_indices : list natural = List.genlist 
                (fun j -> (naturalFromNat j) + offset)
                (List.length left) 
            in
            let left_with_indices = zip left_indices left in
            (* left begins at offset, right begins at offset + i *)
            match right with 
                [] -> (* We got to the end of the list before the target index. *) 
                    (List.reverse reverse_accum, 
                     List.reverseAppend reverse_accum_compl left_with_indices)
                | x :: more_xs -> 
                    (* x is at index i by definition, so more_xs starts with index i + 1 *)
                    partitionii' (i+1) more_is more_xs ((i, x) :: reverse_accum) 
                        (List.reverseAppend left_with_indices reverse_accum_compl)
            end
    end

val filteri : forall 'a. list natural -> list 'a -> list 'a
let filteri is xs = 
    let sorted_is = sort is in
    let (accum, accum_compl) = partitionii' 0 sorted_is xs [] []
    in 
    let (just_indices, just_items) = unzip accum
    in 
    just_items

val filterii : forall 'a. list natural -> list 'a -> list (natural * 'a)
let filterii is xs = 
    let sorted_is = Sorting.sort is in
    let (accum, accum_compl) = partitionii' 0 sorted_is xs [] []
    in 
    accum

val partitioni : forall 'a. list natural -> list 'a -> (list 'a * list 'a)
let partitioni is xs = 
    let sorted_is = Sorting.sort is in
    let (accum, accum_compl) = partitionii' 0 sorted_is xs [] []
    in
    let (just_indices, just_items) = unzip accum
    in
    let (just_indices_compl, just_items_compl) = unzip accum_compl
    in
    (just_items, just_items_compl)

val partitionii : forall 'a. list natural -> list 'a -> (list (natural * 'a) * list (natural * 'a))
let partitionii is xs = 
    let sorted_is = Sorting.sort is in
    partitionii' 0 sorted_is xs [] []

(** [unzip3 ls] takes a list of triples and returns a triple of lists. *)
val unzip3: forall 'a 'b 'c. list ('a * 'b * 'c) -> (list 'a * list 'b * list 'c)
let rec unzip3 l = match l with
  | [] -> ([], [], [])
  | (x, y, z) :: xyzs -> let (xs, ys, zs) = unzip3 xyzs in (x :: xs, y :: ys, z :: zs)
end
declare termination_argument unzip3 = automatic

(** [zip3 ls] takes a triple of lists and returns a list of triples. *)
val zip3: forall 'a 'b 'c. list 'a -> list 'b -> list 'c -> list ('a * 'b * 'c)
let rec zip3 alist blist clist = match (alist, blist, clist) with
  | ([], [], []) -> []
  | (x :: morex, y :: morey, z :: morez) -> let more_xyz = zip3 morex morey morez in (x, y, z) :: more_xyz
end
declare termination_argument unzip3 = automatic

(** [null_byte] is the null character a a byte. *)
val null_byte : byte

declare ocaml    target_rep function null_byte = `'\000'`
declare isabelle target_rep function null_byte = `0` `::` `8` `word`
declare hol      target_rep function null_byte = `0w` `:` `8` `word`
declare coq      target_rep function null_byte = `null_byte`

(** [null_char] is the null character. *)
val null_char : char
let {ocaml} null_char = char_of_byte null_byte

declare isabelle target_rep function null_char = `String.char_of_nat` `0`
declare hol      target_rep function null_char = `CHR` `0`
declare coq      target_rep function null_char = `null_char`

(** [println s] prints [s] to stdout, adding a trailing newline. *)
(* val println : string -> unit *)
(* declare ocaml target_rep function println = `print_endline` *)

(** [prints s] prints [s] to stdout, without adding a trailing newline. *)
(* val prints : string -> unit *)
(* declare ocaml target_rep function prints = `print_string` *)

(** [errln s] prints [s] to stderr, adding a trailing newline. *)
val errln : string -> unit
declare ocaml    target_rep function errln = `prerr_endline`
declare isabelle target_rep function errln x = `()`

(** [errs s] prints [s] to stderr, without adding a trailing newline. *)
val errs : string -> unit
declare ocaml    target_rep function errs   = `prerr_string`
declare isabelle target_rep function errs x = `()`

(** [outln s] prints [s] to stdout, adding a trailing newline. *)
val outln : string -> unit
declare ocaml    target_rep function outln = `print_endline`
declare isabelle target_rep function outln x = `()`

(** [outs s] prints [s] to stdout, without adding a trailing newline. *)
val outs : string -> unit
declare ocaml    target_rep function outs   = `print_string`
declare isabelle target_rep function outs x = `()`

(** [intercalate sep xs] places [sep] between all elements of [xs].
  * Made tail recursive and unrolled slightly to improve performance on large
  * lists.*)
val intercalate' : forall 'a. 'a -> list 'a -> list 'a -> list 'a
let rec intercalate' sep xs accum =
	match xs with
		| []       -> List.reverse accum
		| [x]      -> List.reverse accum ++ [x]
		| [x; y]   -> List.reverse accum ++ [x; sep; y]
		| x::y::xs -> intercalate' sep xs (sep::y::sep::x::accum)
	end
	
val intercalate : forall 'a. 'a -> list 'a -> list 'a
let intercalate sep xs = intercalate' sep xs []

(** [unlines xs] concatenates a list of strings [xs], placing each entry
  * on a new line.
  *)
val unlines : list string -> string
let unlines xs =
  foldl (^) "" (intercalate "\n" xs)

(** [bracket xs] concatenates a list of strings [xs], separating each entry with a
  * space, and bracketing the resulting string.
  *)
val bracket : list string -> string
let bracket xs =
  "(" ^ foldl (^) "" (intercalate " " xs) ^ ")"
	
(** [string_of_list l] produces a string representation of list [l].
  *)
val string_of_list : forall 'a. Show 'a => list 'a -> string
let string_of_list l =
  let result = intercalate "," (List.map show l) in
  let folded = foldl (^) "" result in
    "[" ^ folded ^ "]"

instance forall 'a. Show 'a => (Show (list 'a))
	let show = string_of_list
end

(** [split_string_on_char s c] splits a string [s] into a list of substrings
  * on character [c], otherwise returning the singleton list containing [s]
  * if [c] is not found in [s].
  * 
  * NOTE: quirkily, this doesn't discard separators (e.g. because NUL characters 
  * are significant when indexing into string tables). FIXME: given this, is this 
  * function really reusable? I suspect not.
  *)
val split_string_on_char : string -> char -> list string

declare ocaml    target_rep function split_string_on_char = `Ml_bindings.split_string_on_char`
declare isabelle target_rep function split_string_on_char = `Elf_Types_Local.split_string_on_char`
declare coq      target_rep function split_string_on_char = `split_string_on_char`

assert {ocaml} split_string_null : (let afterSplit = split_string_on_char (toString ([null_char; #'s'; null_char; #'t']: list char)) null_char
    in 
    let _ = errln ("split string is " ^ (show afterSplit))
    in
    afterSplit = [""; "s"; "t"])

(* [find_substring sub s] returns the index at which *)
val find_substring : string -> string -> maybe natural
declare ocaml    target_rep function find_substring = `Ml_bindings.find_substring`
declare hol      target_rep function find_substring = `ARB`
declare isabelle target_rep function find_substring = `undefined`
declare coq      target_rep function find_substring = `find_substring`

(** [string_of_nat m] produces a string representation of natural number [m]. *)
val string_of_nat : nat -> string
declare ocaml target_rep function string_of_nat = `string_of_int`

(** [string_suffix i s] returns all but the first [i] characters of [s].
  * Fails if the index is negative, or beyond the end of the string.
  *)
val string_suffix : natural -> string -> maybe string

declare ocaml    target_rep function string_suffix = `Ml_bindings.string_suffix`
declare isabelle target_rep function string_suffix = `Elf_Types_Local.string_suffix`
declare hol      target_rep function string_suffix = `ARB` (* XXX: add custom binding *)
declare coq      target_rep function string_suffix = `string_suffix`
  
val nat_length : forall 'a. list 'a -> nat
declare ocaml target_rep function nat_length = `List.length`
  
val length : forall 'a. list 'a -> natural
let ~{ocaml} length xs = List.foldl (fun y _ -> 1 + y) 0 xs
let {ocaml} length xs = naturalFromNat (nat_length xs)

val takeRevAcc : forall 'a. natural -> list 'a -> list 'a -> list 'a
let rec takeRevAcc m xs rev_acc =
  match xs with
    | []    -> List.reverse rev_acc
    | x::xs ->
      if m = 0 then
        List.reverse rev_acc
      else
        takeRevAcc (m - 1) xs (x::rev_acc)
  end

(** [take cnt xs] takes the first [cnt] elements of list [xs].  Returns a truncation
  * if [cnt] is greater than the length of [xs].
  *)
val take : forall 'a. natural -> list 'a -> list 'a
let rec take m xs =
  takeRevAcc m xs []
  
(** [drop cnt xs] returns all but the first [cnt] elements of list [xs].  Returns an empty list
  * if [cnt] is greater than the length of [xs].
  *)
val drop : forall 'a. natural -> list 'a -> list 'a
let rec drop m xs =
  match xs with
    | []    -> []
    | x::xs ->
      if m = 0 then
        x::xs
      else
        drop (m - 1) xs
  end
  
(** [string_prefix i s] returns the first [i] characters of [s].
  * Fails if the index is negative, or beyond the end of the string.
  *)
val string_prefix : natural -> string -> maybe string
let string_prefix m s =
  let cs = String.toCharList s in
    if m > length cs then
      Nothing
    else
      Just (String.toString (take m cs))

declare ocaml target_rep function string_prefix = `Ml_bindings.string_prefix`
(* FIXME: isabelle *)

(** [string_index_of c s] returns [Just(i)] where [i] is the index of the first 
  * occurrence if [c] in [s], if it exists, otherwise returns [Nothing]. *)
val string_index_of' : char -> list char -> natural -> maybe natural
let rec string_index_of' e ss idx =
  match ss with
    | []    -> Nothing
    | s::ss ->
      if s = e then
        Just idx
      else
        string_index_of' e ss (1 + idx)
  end
  
val string_index_of : char -> string -> maybe natural
let string_index_of e s = string_index_of' e (String.toCharList s) 0

declare ocaml target_rep function string_index_of = `Ml_bindings.string_index_of`

val index : forall 'a. natural -> list 'a -> maybe 'a
let rec index m xs =
  match xs with
    | []    -> Nothing
    | x::xs ->
        if m = 0 then
          Just x
        else
          index (m - 1) xs
  end

declare ocaml    target_rep function index      = `Ml_bindings.list_index_big_int`
declare isabelle target_rep function index i xs = `Elf_Types_Local.index` xs i

val find_index_helper : forall 'a. natural -> ('a -> bool) -> list 'a -> maybe natural
let rec find_index_helper count p xs =
	match xs with
		| []    -> Nothing
		| y::ys ->
			if p y then
				Just count
			else
				find_index_helper (count + 1) p ys
	end

val find_index : forall 'a. ('a -> bool) -> list 'a -> maybe natural
let find_index p xs = find_index_helper 0 p xs

val argv : list string
declare ocaml target_rep function argv = `Ml_bindings.argv_list`

declare isabelle target_rep function length = `List.length`

val replicate_revacc : forall 'a. list 'a -> natural -> 'a -> list 'a
let rec replicate_revacc revacc len e =
	match len with
		| 0 -> reverse revacc
		| m -> replicate_revacc (e :: revacc) (m - 1) e
	end

val replicate : forall 'a. natural -> 'a -> list 'a
let rec replicate len e =
	replicate_revacc [] len e

declare isabelle target_rep function replicate = `List.replicate`

(* We want a tail-recursive append. reverse_append l1 l2 appends l2 to the
 * reverse of l1. So we get [l1-backwards] [l2]. So just reverse l1. *)
val list_append : forall 'a. list 'a -> list 'a -> list 'a
let list_append l1 l2 =
    List.reverseAppend (List.reverse l1) l2

val list_concat : forall 'a. list (list 'a) -> list 'a 
let list_concat ll = foldl list_append [] ll

val list_concat_map : forall 'a 'b. ('a -> list 'b) -> list 'a -> list 'b
let list_concat_map f l = 
    list_concat (List.map f l)

val list_reverse_concat_map_helper : forall 'a 'b. ('a -> list 'b) -> list 'b -> list 'a -> list 'b
let rec list_reverse_concat_map_helper f acc ll = 
    let lcons = (fun l -> (fun i -> i :: l))
    in
    match ll with
      | []      -> acc
      | item :: items -> 
            (* item is a thing that maps to a list. it needn't be a list yet *)
            let mapped_list = f item
            in 
            (* let _ = Missing_pervasives.errln ("Map function gave us a list of " ^ (show (List.length mapped_list)) ^ " items") in *)
            list_reverse_concat_map_helper f (List.foldl lcons acc (f item)) items
    end

val list_reverse_concat_map : forall 'a 'b. ('a -> list 'b) -> list 'a -> list 'b
let list_reverse_concat_map f ll = list_reverse_concat_map_helper f [] ll

val list_take_with_accum : forall 'a. nat -> list 'a -> list 'a -> list 'a
let rec list_take_with_accum n reverse_acc l =
  (*  let _ = Missing_pervasives.errs ("Taking a byte; have accumulated " ^ (show (List.length acc) ^ " so far\n"))
   in *)
   match n with
        0 -> List.reverse reverse_acc
      | _ -> match l with
            [] -> failwith "list_take_with_accum: not enough elements"
            | x :: xs -> list_take_with_accum (n-1) (x :: reverse_acc) xs
        end
    end

val unsafe_string_take : natural -> string -> string
let unsafe_string_take m str =
  let m = unsafe_nat_of_natural m in
    String.toString (List.take m (String.toCharList str))

(** [padding_and_maybe_newline c w s] creates enough of char [c] to pad string [s] to [w] characters, 
  * unless [s] is of length [w - 1] or greater, in which case it generates [w] copies preceded by a newline.
  * This style of formatting is used by the GNU linker in its link map output, so we
  * reproduce it using this function. Note that string [s] does not appear in the
  * output. *)
val padding_and_maybe_newline : char -> natural -> string -> string
let padding_and_maybe_newline c width str = 
    let padlen = width - (naturalFromNat (stringLength str)) in
    (if padlen <= 1 then "\n" else "")
     ^ (toString (replicate (if padlen <= 1 then width else padlen) c))

(** [space_padding_and_maybe_newline w s] creates enoughspaces to pad string [s] to [w] characters, 
  * unless [s] is of length [w - 1] or greater, in which case it generates [w] copies preceded by a newline.
  * This style of formatting is used by the GNU linker in its link map output, so we
  * reproduce it using this function. Note that string [s] does not appear in the
  * output. *)
val space_padding_and_maybe_newline : natural -> string -> string
let space_padding_and_maybe_newline width str = 
    padding_and_maybe_newline #' ' width str

(** [padded_and_maybe_newline w s] pads string [s] to [w] characters, using char [c]
  * unless [s] is of length [w - 1] or greater, in which case the padding consists of
  * [w] copies of [c] preceded by a newline.
  * This style of formatting is used by the GNU linker in its link map output, so we
  * reproduce it using this function. *)
val padded_and_maybe_newline : char -> natural -> string -> string
let padded_and_maybe_newline c width str = 
    str ^ (padding_and_maybe_newline c width str)

(** [padding_to c w s] creates enough copies of [c] to pad string [s] to [w] characters, 
  * or 0 characters if [s] is of length [w] or greater. Note that string [s] does not appear in the
  * output. *)
val padding_to : char -> natural -> string -> string
let padding_to c width str = 
    let padlen = width - (naturalFromNat (stringLength str)) in
    if padlen <= 0 then "" else (toString (replicate padlen c))

(** [left_padded_to c w s] left-pads string [s] to [w] characters using [c], 
  * returning it unchanged if [s] is of length [w] or greater. *)
val left_padded_to : char -> natural -> string -> string
let left_padded_to c width str = 
    (padding_to c width str) ^ str
    
(** [right_padded_to c w s] right-pads string [s] to [w] characters using [c], 
  * returning it unchanged if [s] is of length [w] or greater. *)
val right_padded_to : char -> natural -> string -> string
let right_padded_to c width str = 
    str ^ (padding_to c width str)

(** [space_padded_and_maybe_newline w s] pads string [s] to [w] characters, using spaces,
  * unless [s] is of length [w - 1] or greater, in which case the padding consists of
  * [w] spaces preceded by a newline.
  * This style of formatting is used by the GNU linker in its link map output, so we
  * reproduce it using this function. *)
val space_padded_and_maybe_newline : natural -> string -> string
let space_padded_and_maybe_newline width str = 
    str ^ (padding_and_maybe_newline #' ' width str)

(** [left_space_padded_to w s] left-pads string [s] to [w] characters using spaces, 
  * returning it unchanged if [s] is of length [w] or greater. *)
val left_space_padded_to : natural -> string -> string
let left_space_padded_to width str = 
    (padding_to #' ' width str) ^ str
    
(** [right_space_padded_to w s] right-pads string [s] to [w] characters using spaces, 
  * returning it unchanged if [s] is of length [w] or greater. *)
val right_space_padded_to : natural -> string -> string
let right_space_padded_to width str = 
    str ^ (padding_to #' ' width str)

(** [left_zero_padded_to w s] left-pads string [s] to [w] characters using zeroes, 
  * returning it unchanged if [s] is of length [w] or greater. *)
val left_zero_padded_to : natural -> string -> string
let left_zero_padded_to width str = 
    (padding_to #'0' width str) ^ str
 
