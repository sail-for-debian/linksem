open import Basic_classes
open import Function
open import String
open import Tuple
open import Bool
open import List
open import Sorting
open import Map
import Set
open import Num
open import Maybe
open import Assert_extra

open import Byte_sequence
open import Default_printing
open import Error
open import Missing_pervasives
open import Show
open import Endianness

open import Elf_header
open import Elf_file
open import Elf_interpreted_section
open import Elf_interpreted_segment
open import Elf_section_header_table
open import Elf_program_header_table
open import Elf_symbol_table
open import Elf_types_native_uint
open import Elf_relocation
open import String_table

open import Memory_image
open import Abis

type elf_memory_image = annotated_memory_image any_abi_feature

let elf_section_is_special s f = s.elf64_section_type <> sht_progbits
                     && s.elf64_section_type <> sht_nobits

val noop_reloc : forall 'abifeature. natural -> ((maybe elf64_symbol_table_entry -> natural) * (annotated_memory_image 'abifeature -> maybe natural))
let noop_reloc r = (fun r_type -> 8, fun sym_val -> Nothing)

let (empty_elf_memory_image : elf_memory_image) = <|
      elements         = Map.empty
    ; by_range         = Set.empty
    ; by_tag           = Set.empty
|>

(* HMM. For the elf_ident, I don't really want to express it this way.
 * I want something more bidirectional: something that can tell me 
 * not only that a given ident is valid for a given ABI, but also, 
 * to *construct* an ident for a given abstract ELF file satisfying x.
 * This is very much like a lens. 
 * 
 * Similarly for relocs, I might want a way to map back to an allowable
 * *concrete* representation, from some *abstract* description of the 
 * reloc's intent (i.e. a symbol binding: "point this reference at symbol
 * Foo"), given the constraints imposed by the ABI (such as "use only 
 * RELA, not rel". FIXME: figure out how to lensify what we're doing. *) 

type elf_range_tag = range_tag any_abi_feature

let null_section_header_table = ElfSectionHeaderTable([])
let null_program_header_table = ElfProgramHeaderTable([])
let null_elf_header = <| 
     elf64_ident    = []
   ; elf64_type     = elf64_half_of_natural 0  
   ; elf64_machine  = elf64_half_of_natural 0  
   ; elf64_version  = elf64_word_of_natural 0  
   ; elf64_entry    = elf64_addr_of_natural 0  
   ; elf64_phoff    = elf64_off_of_natural 0   
   ; elf64_shoff    = elf64_off_of_natural 0   
   ; elf64_flags    = elf64_word_of_natural 0  
   ; elf64_ehsize   = elf64_half_of_natural 0  
   ; elf64_phentsize= elf64_half_of_natural 0  
   ; elf64_phnum    = elf64_half_of_natural 0  
   ; elf64_shentsize= elf64_half_of_natural 0  
   ; elf64_shnum    = elf64_half_of_natural 0  
   ; elf64_shstrndx = elf64_half_of_natural 0  
   |>

(* Here we build the image of a file in file offset space. 
 * To transform to memory space, we
 * 
 * - switch positions to be addresses
 * - switch lengths of nobits etc. to be memory lengths
 * - PROBLEM: an offset might map to >1 virtual address.
 *   So we have to clone it as multiple elements.
 *   Each gets a label identifying the "file feature" it came from
 *   -- i.e. sections, ELF header, SHT and PHT are all file features.
 * - PROBLEM: the memory image might only contain part of an element.
 *   We need to reflect this truncatedness somehow in the label.
 * 
 * Is the offset-space view really useful?
 * SORT OF: want to be able to make an image out of relocatable ELF files
 * that have no address assignments or phdrs yet.
 * AHA. NO. This is not an offset-space view; it's a sectionwise memory view.
 * All allocatable sections become elements with Nothing as their address.
 * The remainder of the ELF file *should* be represented as labels.
 * But, hmm, some stuff like the ELF header and SHT will likely get discarded.
 * 
 * In short, we should work entirely with memory space.
 * Then
 * 
 * - do we want to encode the aliasing of multiple virtual addresses
 *   down to single "features" in offset-space, like multiple mappings
 *   of the ELF header, say?
 *)

val offset_to_vaddr_mappings : elf64_file -> natural -> list (natural * elf64_interpreted_segment)
let offset_to_vaddr_mappings f off = 
    List.mapMaybe (fun ph ->
        if off >= ph.elf64_segment_offset
            && off < ph.elf64_segment_base + ph.elf64_segment_size
        then Just (ph.elf64_segment_base + (off - ph.elf64_segment_offset), ph)
        else Nothing
    ) f.elf64_file_interpreted_segments

val gensym : string -> string
let gensym hint = hint (* FIXME: remember duplicates *)

val extract_symbol : (elf64_symbol_table * string_table * natural) -> natural -> maybe (string * elf64_symbol_table_entry)
let extract_symbol symtab_triple symidx = 
    let (symtab, strtab, scnidx) = symtab_triple
    in
    match index symidx symtab with
        Just ent -> 
            match (get_string_at (natural_of_elf64_word ent.elf64_st_name) strtab) with
                Success str -> Just (str, ent)
                | Fail _ -> Just ("", ent)    (* ELF doesn't distinguish "no string" from "empty string" *)
            end
      | Nothing -> Nothing
    end

val extract_satisfying_symbols : (elf64_symbol_table * string_table * natural) ->
    (elf64_symbol_table_entry -> bool) -> list (string * elf64_symbol_table_entry * natural (* scnidx *) * natural (* symidx *))
let extract_satisfying_symbols symtab_triple pred =
    let (symtab, strtab, scnidx) = symtab_triple
    in
    (*let _ = Missing_pervasives.errln ("extracting satisfying symbols from symtab index " ^ (show scnidx) ^ ", size "
        ^ (show (length symtab)) )
    in*)
    mapMaybei (fun symidx -> (fun ent ->
        (match (get_string_at (natural_of_elf64_word ent.elf64_st_name) strtab) with
            Success str ->
                (* exclude those that don't match *) 
                if (pred ent)
                then Just(str, ent, scnidx, symidx)
                else Nothing
            | Fail s -> (*let _ = Missing_pervasives.errln ("couldn't get string from strtab of symtab with index " ^ (show scnidx)
                ^ ": " ^ s) in *)
                Nothing
        end)
        )) symtab
        
val extract_all_symbols : (elf64_symbol_table * string_table * natural) -> list (string * elf64_symbol_table_entry * natural (* scnidx *) * natural (* symidx *))
let extract_all_symbols symtab_triple = extract_satisfying_symbols symtab_triple (fun _ -> true) 

let definitions_pred = fun ent -> (natural_of_elf64_half ent.elf64_st_shndx) <> stn_undef 
let references_pred = fun ent -> (natural_of_elf64_half ent.elf64_st_shndx) = stn_undef && (not (is_elf64_null_entry ent))

val extract_definitions_from_symtab_of_type : natural -> elf64_file -> list symbol_definition
let extract_definitions_from_symtab_of_type t e = 
    match (find_elf64_symtab_by_type t e >>= fun symtab -> (
        let (allsyms : list (string * elf64_symbol_table_entry * natural (* scnidx *) * natural (* symidx *)))
         = extract_satisfying_symbols symtab definitions_pred
        in
        let (extracted : list symbol_definition)
         = mapMaybei (fun i -> (fun (str, ent, scnidx, symidx) -> Just <|
                   def_symname = str
                 ; def_syment = ent
                 ; def_sym_scn = scnidx
                 ; def_sym_idx = symidx
                 ; def_linkable_idx = 0
                 |>)) allsyms
        in return extracted
    )) with Fail _ -> [] | Success x -> x end

val extract_references_from_symtab_of_type : natural -> elf64_file -> list symbol_reference
let extract_references_from_symtab_of_type t e = 
    match (find_elf64_symtab_by_type t e >>= fun symtab -> (
    let (allsyms : list (string * elf64_symbol_table_entry * natural (* scnidx *) * natural (* symidx *)))
     = extract_satisfying_symbols symtab references_pred
    in
    let (extracted : list symbol_reference) = 
        mapMaybei (fun symidx -> (fun (str, ent, scnidx, symidx) -> Just <|
                   ref_symname = str
                 ; ref_syment = ent
                 ; ref_sym_scn = scnidx
                 ; ref_sym_idx = symidx
                 |>)) allsyms
    in 
    (*let _ = Missing_pervasives.errs ("Extracted " ^ (show (length allsyms)) ^ " undefined references: "
        ^ (show (List.map (fun (str, _, scnidx, symidx) -> (str, scnidx, symidx)) allsyms)) ^ "\n")
(*       ^ " (syminds "
        ^ (show (List.map (fun extracted -> extracted.ref_sym_idx) x)) ^ ", symnames "
        ^ (show (List.map (fun extracted -> extracted.ref_symname) x)) ^ ")") *)
    
    in*) return extracted
    )) with Fail _ -> [] | Success x -> x end

val extract_all_relocs : string -> elf64_file -> list (natural (* scn *) * natural (* rel idx *) * natural (* rel src scn *) * elf64_relocation_a)
let extract_all_relocs fname e = 
    let (all_rel_sections : list (natural * elf64_interpreted_section)) = mapMaybei (fun i -> (fun isec -> 
        if isec.elf64_section_type = sht_rel then Just (i, isec) else Nothing
    )) e.elf64_file_interpreted_sections
    in
    (*let _ = Missing_pervasives.errln ("File " ^ fname ^ " has " ^ (show (length all_rel_sections)) ^ 
        " rel sections (indices " ^ (show (List.map (fun (scn, _) -> scn) all_rel_sections)) ^ ")")
    in*)
    let (all_rela_sections : list (natural * elf64_interpreted_section)) = mapMaybei (fun i -> (fun isec -> 
        if isec.elf64_section_type = sht_rela then Just (i, isec) else Nothing
    )) e.elf64_file_interpreted_sections 
    in
    (*let _ = Missing_pervasives.errln ("File " ^ fname ^ " has " ^ (show (length all_rela_sections)) ^ 
        " rela sections (indices " ^ (show (List.map (fun (scn, _) -> scn) all_rela_sections)) ^ ")")
    in*)
    let rel_to_rela = fun rel -> <|
         elf64_ra_offset = rel.elf64_r_offset
       ; elf64_ra_info   = rel.elf64_r_info
       ; elf64_ra_addend = elf64_sxword_of_integer 0
    |>
    in
    let endian = get_elf64_header_endianness e.elf64_file_header
    in
    (* Build per-section lists of rels paired with their originating section id.
     * We also pair each element with its index *in that section*, and then flatten
     * the whole lot using mapConcat. *)
    let (all_rels_list : list (natural * natural * natural * elf64_relocation_a)) = list_reverse_concat_map (fun (scn, isec) -> 
        match read_elf64_relocation_section   isec.elf64_section_size endian isec.elf64_section_body
        with
            Success (relocs, _) -> 
                (*let _ = Missing_pervasives.errln ("Rel section with index " ^ (show scn) ^ " has " ^ (show (length relocs)) ^ 
                    " entries")
                in*)
                mapMaybei (fun idx -> (fun rel -> Just (scn, idx, isec.elf64_section_info, rel_to_rela rel))) relocs
            | Fail _ -> []
        end) all_rel_sections
    in 
    let (all_relas_list : list (natural * natural * natural * elf64_relocation_a)) = list_reverse_concat_map (fun (scn, isec) -> 
        match read_elf64_relocation_a_section isec.elf64_section_size endian isec.elf64_section_body
        with
            Success (relocs, _) -> 
            (*let _ = Missing_pervasives.errln ("Rela section with index " ^ (show scn) ^ " has " ^ (show (length relocs)) ^ 
                " entries")
            in*)
            mapMaybei (fun idx -> (fun rela -> Just (scn, idx, isec.elf64_section_info, rela))) relocs
            | Fail _ -> []
        end) all_rela_sections
    in
    all_rels_list ++ all_relas_list

val extract_all_relocs_as_symbol_references : string -> elf64_file -> list symbol_reference_and_reloc_site
let extract_all_relocs_as_symbol_references fname e
=   let all_relocs = extract_all_relocs fname e
    in
    let all_symtab_triples_by_scnidx = mapMaybei (fun scnidx -> (fun isec ->
        if isec.elf64_section_type = sht_symtab
        then
            let found = find_elf64_symbols_by_symtab_idx scnidx e
            in
            match found with 
                Fail _ -> Nothing
                | Success triple -> Just (scnidx, triple)
            end
        else Nothing
    )) e.elf64_file_interpreted_sections
    in
    let (all_extracted_symtabs_by_scnidx : (Map.map natural (list (string * elf64_symbol_table_entry * natural (* scnidx *) * natural (* symidx *)))))
     = List.foldl (fun acc -> (fun (scnidx, triple) -> Map.insert scnidx (extract_all_symbols triple) acc)) Map.empty all_symtab_triples_by_scnidx
    in
    (*let _ = Missing_pervasives.errln ("All extracted symtabs by scnidx: " ^ (show (Set_extra.toList (Map.toSet all_extracted_symtabs_by_scnidx))))
    in*)
    let ref_for_relocation_a_in_section_index = fun rel_scn_idx -> (fun rel_idx -> (fun rela -> 
        let rela_isec = match index rel_scn_idx e.elf64_file_interpreted_sections with
            Just x -> x
            | Nothing -> failwith "relocation references nonexistent section"
        end
        in
        let symtab_idx = rela_isec.elf64_section_link
        in
        match Map.lookup symtab_idx all_extracted_symtabs_by_scnidx with
            Nothing -> failwith "referenced symtab does not exist"
            | Just quads ->
                let sym_idx = get_elf64_relocation_a_sym rela
                in
                let maybe_quad = Missing_pervasives.index sym_idx quads
                in
                match maybe_quad with
                    Just(symname, syment, scnidx, symidx) -> <|
                           ref_symname = symname
                         ; ref_syment = syment
                         ; ref_sym_scn = symtab_idx
                         ; ref_sym_idx = sym_idx
                         |>
                    | Nothing -> failwith "reloc references symbol that does not exist" (*("reloc at index " ^ (show rel_idx) ^ " references symbol (index " ^ (show sym_idx) ^ 
                        ") that does not exist: symtab (index " ^ (show symtab_idx) ^ ") has " ^ (show (length quads)) ^ " entries")*)
                end
        end
    ))
    in
    (*let _ = Missing_pervasives.errs ("Extracted " ^ (show (length all_relocs)) ^ " reloc references (rel_scn, rel_idx, src_scn): "
        ^ (show (List.map (fun (rel_scn, rel_idx, srcscn, rela) -> (rel_scn, rel_idx, srcscn)) all_relocs)) ^ "\n")
    in*)
    List.map (fun (scn, idx, srcscn, rela) -> <|
          ref = (* NOTE that a reference is not necessarily to an undefined symbol! *) ref_for_relocation_a_in_section_index scn idx rela
        ; maybe_reloc = Just 
           <| ref_relent = rela
            ; ref_rel_scn = scn
            ; ref_rel_idx = idx
            ; ref_src_scn = srcscn (* what section does the reference come from? it's the 'info' link of the rel section header *)
            |>
        ; maybe_def_bound_to = Nothing
        |>) all_relocs
