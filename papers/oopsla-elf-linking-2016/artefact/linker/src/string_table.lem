(** The [string_table] module implements string tables.  An ELF file may have
  * multiple different string tables used for different purposes.  A string
  * table is a string coupled with a delimiting character.  Strings may be indexed
  * at any position, not necessarily on a delimiter boundary.
  *)

open import Basic_classes
open import List
open import Maybe
open import Num
open import String
open import Byte_sequence

open import Error
open import Missing_pervasives
open import Show

(** [string_table] type, represents a string table with a fixed delimiting
  * character and underlying string.
  *)
type string_table
  = Strings of (char * string)

(** [mk_string_table base sep] constructs a string table using [base] as the
  * base string and [sep] as the delimiting character to use to split [base]
  * when trying to access the string stored in the table using the functions below.
  *)
val mk_string_table : string -> char -> string_table
let mk_string_table base sep =
  Strings (sep, base)

(** [string_table_of_byte_sequence seq] constructs a string table, using the NUL
  * character as terminator, from a byte sequence. *)
val string_table_of_byte_sequence : byte_sequence -> string_table
let string_table_of_byte_sequence seq = mk_string_table (string_of_byte_sequence seq) null_char

(** [empty] is the empty string table with an arbitrary choice of delimiter.
  *)
val empty : string_table
let empty = Strings (null_char, toString [null_char])

(** [get_delimiating_character tbl] returns the delimiting character associated
  * with the string table [tbl], used to split the strings.
  *)
val get_delimiting_character : string_table -> char
let get_delimiting_character tbl =
  match tbl with
    | Strings (sep, base) -> sep
  end

(** [get_base_string tbl] returns the base string of the string table [tbl].
  *)
val get_base_string : string_table -> string
let get_base_string tbl =
  match tbl with
    | Strings (sep, base) -> base
  end

(** [size tbl] returns the size in bytes of the string table [tbl].
  *)
val size : string_table -> natural
let size tbl = naturalFromNat (stringLength (get_base_string tbl))

(** [concat xs] concatenates several string tables into one providing they all
  * have the same delimiting character.
  *)
val concat : list string_table -> error string_table
let concat xs =
  match xs with
    | []    -> return empty
    | x::xs ->
      let delim = get_delimiting_character x in
        if (List.all (fun x -> get_delimiting_character x = delim) (x::xs)) then
          let base = List.foldr (^) "" (List.map get_base_string (x::xs)) in
            return (mk_string_table base delim)
        else
          fail "concat: string tables must have same delimiting characters"
  end

declare {isabelle} rename function concat = concat_string_table

(** [get_string_at index tbl] returns the string starting at character [index]
  * from the start of the base string until the first occurrence of the delimiting
  * character.
  *)
val get_string_at : natural -> string_table -> error string
let get_string_at index tbl =
  match Missing_pervasives.string_suffix index (get_base_string tbl) with
    | Nothing     -> Fail "get_string_at: index out of range"
    | Just suffix ->
      let delim = get_delimiting_character tbl in
      match string_index_of delim suffix with
        | Just idx ->
          match string_prefix idx suffix with
            | Just s  -> Success s
            | Nothing -> Fail "get_string_at: index out of range"
          end
        | Nothing -> Success suffix
      end
  end

val find_string : string -> string_table -> maybe natural
let find_string s t = 
    match t with
        Strings(delim, base) -> Missing_pervasives.find_substring (s ^ toString [delim]) base
    end

val insert_string : string -> string_table -> (natural * string_table)
let insert_string s t = 
    (*let _ = errln ("Inserting string `" ^ s ^ "' into a string table") in*)
    let (inserted_idx, new_strtab) = match find_string s t with
        Nothing -> match t with
            Strings(delim, base) -> (naturalFromNat (stringLength base), Strings(delim, base ^ s ^ (toString [delim])))
            end
        | Just pos -> (pos, t)
    end
    in
    (*let _ = errln ("Inserted string at idx " ^ (show inserted_idx) ^ ", see: " ^ (show (find_string s new_strtab)))
    in*)
    (inserted_idx, new_strtab)

instance (Show string_table)
  let show tbl = toString (List.map (fun c -> if c = #'\000' then #'\n' else c) (toCharList (get_base_string tbl)))
end
