open import Num
open import String

type uint64

declare ocaml target_rep type uint64 = `Uint64_wrapper.uint64`

val add : uint64 -> uint64 -> uint64

declare ocaml target_rep function add = `Uint64_wrapper.add`

val of_int : int -> uint64

declare ocaml target_rep function of_int = `Uint64_wrapper.of_int`

val of_int64 : int64 -> uint64

declare ocaml target_rep function of_int64 = `Uint64_wrapper.of_int64`

val shift_left : uint64 -> nat -> uint64

declare ocaml target_rep function shift_left = `Uint64_wrapper.shift_left`

val shift_right : uint64 -> nat -> uint64

declare ocaml target_rep function shift_right = `Uint64_wrapper.shift_right`

val logand : uint64 -> uint64 -> uint64

declare ocaml target_rep function logand = `Uint64_wrapper.logand`

val logor : uint64 -> uint64 -> uint64

declare ocaml target_rep function logor = `Uint64_wrapper.logor`

val string_of_uint64 : uint64 -> string

declare ocaml target_rep function string_of_uint64 = `Uint64_wrapper.to_string`