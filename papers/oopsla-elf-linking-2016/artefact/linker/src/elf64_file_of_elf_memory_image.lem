open import Basic_classes
open import Function
open import String
open import Tuple
open import Bool
open import List
open import Sorting
open import Map
import Set
open import Num
open import Maybe
open import Assert_extra

open import Byte_sequence
open import Default_printing
open import Error
open import Missing_pervasives
open import Show
open import Endianness

open import Elf_header
open import Elf_file
open import Elf_interpreted_section
open import Elf_interpreted_segment
open import Elf_section_header_table
open import Elf_program_header_table
open import Elf_symbol_table
open import Elf_types_native_uint
open import Elf_relocation
open import String_table

open import Memory_image
open import Memory_image_orderings

open import Elf_memory_image
open import Elf_memory_image_of_elf64_file
open import Abis

(* Things the caller should do first: *)
(* - create segment annotations *)
(* - create .dynamic-equivalent metadata (but not the section) *)
(* - concretise symbolic elements? actually they pass a function to do this. *)

type make_concrete_fn = Memory_image.element -> Memory_image.element

(* Things we do, at the caller's direction:*)
(* - create SHT *)
(* - create symtabs, strtabs, symbol hash tables (the ABI helps us) *)
(* - create shstrtab (if we're creating a SHT) *)
(* - actually create the dynamic section (and its PHDR) *)
(* - create any other PHDRs (the ABI tells us, mostly) and PT_PHDR (the user tells us) *)

val elf64_file_of_elf_memory_image : abi any_abi_feature -> make_concrete_fn -> string -> elf_memory_image -> elf64_file
let elf64_file_of_elf_memory_image a make_concrete fname img = 
    (* Generate an ELF header, (optionally) SHT and (optionally) PHT, 
     * based on metadata in the image.
     * 
     * How do we decide what kind of ELF file to generate?     see whether we have segment annotations?
                        what architecture/osabi to give?       the ABI tells us
                        
     *)
    let (section_tags, section_ranges) = elf_memory_image_section_ranges img
    in
    let section_tags_bare = List.map (fun tag -> 
        match tag with 
            | FileFeature(ElfSection(idx, isec)) -> (idx, isec)
            | _ -> failwith "not section tag"
        end) section_tags
    in
    let section_tags_bare_noidx = List.map (fun (idx, isec) -> isec) section_tags_bare
    in
    let basic_shstrtab = List.foldl (fun table -> (fun str -> 
        let (_, t) = String_table.insert_string str table in t
    )) String_table.empty [".shstrtab"; ".symtab"; ".strtab"]
    in
    let shstrtab = List.foldl (fun table -> fun (idx, isec) -> 
        let (_, t) = String_table.insert_string isec.elf64_section_name_as_string table in 
        (* let _ = errln ("Adding section name `" ^ isec.elf64_section_name_as_string ^ "' to shstrtab; now has size "
            ^ (show (String_table.size t)))
        in *) t
    ) basic_shstrtab section_tags_bare
    in
    let phoff = 64
    in
    let max_phnum = (* length phdrs *) a.max_phnum
    in
        (* what do we generate? 
         * .eh_frame? no, *should* come from the script
         * .got, .got.plt? HMM. These should have been created,
         * as ABI features, by the time we get here.
         * .comment -- maybe
         * .shstrtab -- YES
         * .symtab -- YES
         * .strtab -- YES.
         * 
         * Do we generate them as elements in the image, or just
         * use them to write the ELF file? The latter.
         *)
    let (symbol_tags, symbol_ranges) = elf_memory_image_symbol_def_ranges img
    in
    let all_sym_names = List.map (fun tag -> 
        match tag with 
            SymbolDef(sd) -> sd.def_symname
            | _ -> "not symbol tag, in symbol tags"
        end
    ) symbol_tags
    in
    (*let _ = errln ("All symbol names: " ^ (show all_sym_names))
    in*)
    let strtab = List.foldl (fun table -> fun str -> 
        let (_, t) = String_table.insert_string str table in t
    ) String_table.empty all_sym_names
    in
    (* If the same address starts >1 section, all but one of those sections
     * must have size zero. These need to come *first* to avoid screwing up
     * the offset calculation. So also sort by size, so that the zero-sizers
     * come first. *)
    let element_section_tag_pairs_sorted_by_address = (* List.stable_sort *) Sorting.sortByOrd
        (fun (isec1, (el1, range1)) -> (fun (isec2, (el2, range2)) -> (
            let (addr1, sz1) = match Map.lookup el1 img.elements with
                Just(e) -> 
                    (*let _ = errln ("Size of element " ^ el1 ^ " is " ^ (show e.length))
                    in*)
                    (e.startpos, e.length)
                | Nothing -> failwith "internal error: element does not exist"
            end
            in 
            let (addr2, sz2) = match Map.lookup el2 img.elements with
                Just(e) -> (e.startpos, e.length)
                | Nothing -> failwith "internal error: element does not exist"
            end
            in
            compare (addr1, sz1) (addr2, sz2)
        )))
    (zip section_tags_bare_noidx section_ranges)
    in
    let sorted_sections = List.map (fun (isec, (el, range)) -> isec)
        element_section_tag_pairs_sorted_by_address
    in
    let filesz = (fun el -> fun isec -> 
        (* How can we distinguish progbits from nobits? 
         * A section can be nobits if its representation
         * is all zero or don't-care. But in practice we
         * don't make a section nobits unless its name is .bss. *)
        let sz = if (* is_all_zeroes_or_dont_care *) true &&
            isec.elf64_section_name_as_string = ".bss" then 0
            else match el.length with
                Nothing -> failwith "error: concrete section element has no length"
                | Just len -> len
            end
        in
        (*let _ = errln ("Filesz of " ^ isec.elf64_section_name_as_string ^ " is 0x" ^ (hex_string_of_natural sz))
        in*)
        sz
    )
    in
    let (last_off, section_file_offsets) = List.foldl (fun (current_off, offs_so_far) -> (fun (isec, (el_name, el_range)) -> 
        (* where can we place this in the file?
         * it's the next offset that's congruent to the section addr, 
         * modulo the biggest page size. *)
        let el = match Map.lookup el_name img.elements with 
            Just e -> e
            | Nothing -> failwith "nonexistent element"
        end
        in
        let (start_off : natural) =  match el.startpos with
            Just addr -> let this_remainder = current_off mod a.maxpagesize
                in
                let target_remainder = addr mod a.maxpagesize
                in
                let bump = (
                    if target_remainder >= this_remainder 
                    then target_remainder - this_remainder
                    else (a.maxpagesize + target_remainder - this_remainder)
                )
                in
                let _ = errln ("For section " ^ isec.elf64_section_name_as_string ^ ", bumping offset by " ^ 
                    (hex_string_of_natural bump) ^ "(remainder " ^ (hex_string_of_natural this_remainder) ^ 
                    ", target remainder " ^ (hex_string_of_natural target_remainder) ^ ") to 0x" ^ 
                    (hex_string_of_natural (current_off + bump)))
                in
                current_off + bump
            | Nothing -> 
                (* It has no assigned address. That's okay if it's not allocatable. 
                 * If it's not allocatable, it has no alignment. *)
                if flag_is_set shf_alloc isec.elf64_section_flags then (failwith "allocatable section with no address")
                else current_off (* FIXME: is alignment important in file-offset-space? *)
        end
        in
        let end_off = start_off + (filesz el isec)
        in 
        (end_off, offs_so_far ++ [start_off])
    )) ((phoff + (max_phnum * 56)), []) element_section_tag_pairs_sorted_by_address
    in
    let user_sections_sorted_with_offsets = [
          let el = match Map.lookup el_name img.elements with
            Just x -> x
            | Nothing -> failwith "internal error: section not found"
            end
          in
          <| elf64_section_name = isec.elf64_section_name (* ignored *)
           ; elf64_section_type = isec.elf64_section_type
           ; elf64_section_flags = isec.elf64_section_flags
           ; elf64_section_addr = match el.startpos with Just addr -> addr | Nothing -> 0 end
           ; elf64_section_offset = 
                (*let _ = errln ("Assigning offset 0x" ^ (hex_string_of_natural off) ^ " to section " ^ 
                    isec.elf64_section_name_as_string)
                in*)
                off
           ; elf64_section_size = match el.length with Just len -> len | Nothing -> length el.contents end
           ; elf64_section_link = isec.elf64_section_link
           ; elf64_section_info = isec.elf64_section_info
           ; elf64_section_align = isec.elf64_section_align
           ; elf64_section_entsize = isec.elf64_section_entsize
           ; elf64_section_body = 
                let pad_fn = if flag_is_set shf_execinstr isec.elf64_section_flags then a.pad_data else a.pad_code
                in
                Sequence(concretise_byte_pattern [] 0 (make_concrete el).contents pad_fn)
           ; elf64_section_name_as_string = isec.elf64_section_name_as_string
           |>
        | forall ((off, (isec, (el_name, el_range))) MEM (zip section_file_offsets element_section_tag_pairs_sorted_by_address))
        | true
    ]    
    in
    let symtab = 
        (* Get all the symbols *)
        elf64_null_symbol_table_entry :: [
                match tag with 
                    SymbolDef(d) ->
                         let nameidx = match String_table.find_string d.def_symname strtab with
                            Just idx -> let v = elf64_word_of_natural idx
                                        in
                                        (* let _ = errln ("strtab: found `" ^ d.def_symname ^ "' at index " ^ (show v))
                                        in *)
                                        v
                            | Nothing -> failwith "impossible: symbol name not in strtab we just created"
                            end
                        in
                        let (shndx, svalue, sz) = if d.def_syment.elf64_st_shndx = elf64_half_of_natural shn_abs
                            then (d.def_syment.elf64_st_shndx, d.def_syment.elf64_st_value, d.def_syment.elf64_st_size)
                            else
                                let (el_name, (start, len)) = match maybe_range with 
                                    Just(el_name, (start, len)) -> (el_name, (start, len)) 
                                    | Nothing -> failwith "impossible: non-ABS symbol with no range"
                                end
                                in
                                (elf64_half_of_natural ( (* what's the section index of this element? *)
                                    let maybe_found = mapMaybei
                                        (fun i -> fun isec -> if isec.elf64_section_name_as_string = el_name then Just i else Nothing) 
                                        sorted_sections
                                    in
                                    match maybe_found with
                                        [i] -> 1 + i
                                        | [] -> (* HMM *) (*let _ = errln ("Couldn't compute section index of symbol " ^ d.def_symname)
                                            in*) 0
                                        | _ -> failwith ("internal error: multiple sections named " ^ el_name)
                                    end
                                    ),
                                    elf64_addr_of_natural (start + match Map.lookup el_name img.elements with
                                    Just x -> match x.startpos with
                                        Just addr -> addr
                                        | Nothing -> failwith "internal error: symbol defined in section with no address"
                                        end
                                    | Nothing -> failwith "internal error: section (of symbol) not found"
                                    end),
                                    elf64_xword_of_natural len
                                )
                        in
                      (* CHECK: can we expect these to be these usable, the way we generated them?  *)
                      <|
                         elf64_st_name  = nameidx
                       ; elf64_st_info  = d.def_syment.elf64_st_info     (* type, binding, visibility *)
                       ; elf64_st_other = d.def_syment.elf64_st_other
                       ; elf64_st_shndx = shndx
                       ; elf64_st_value = svalue
                       ; elf64_st_size  = sz
                       |>

                    (* FIXME: do we ever get symbolrefs? *)
                | _ -> failwith "not a symbol tag, in symbol_tags"
            end
            | forall ((maybe_range, tag) MEM (zip symbol_ranges symbol_tags))
            | true
        ]
    in
    (*let _ = errln ("Building an ELF file from" ^ (show (length element_section_tag_pairs_sorted_by_address)) ^ " sections")
    in*)
    (* PROBLEM: 
     * sections' offset assignments depend on phnum.
     * BUT
     * phnum depends on sections' offset assignments!
     * How do we break this cycle?
     * We can get an upper bound on the number of phdrs, then 
     * fill them in later.
     *)
    (* How does the GNU BFD output a statically linked executable? 
     * First the ELF header,
     * then program headers,
     * then sections in order of address:
     *      .interp,                 these are all allocatable sections! with addresses!
     * then .note.ABI-tag, 
     * then .note.gnu.build-id,
     * then .gnu.hash,
     * then .dynsym,
     * then .dynstr,
     * then .gnu.version,
     * then .gnu.version_r,
     * then ...
     * 
     * ... and so on ...
     * 
     * then .gnu.debuglink (the only non-allocatable section)
     * then .shstrtab, then SHT. 
     * 
     * So how can we calculate the offset of the SHT?  We have to place
     * all the other sections first. 
     *)
    let shstrndx = 1 + length section_tags
    in
    let shstroff = last_off
    in
    let shstrsz = String_table.size shstrtab
    in
    let symoff = align_up_to 8 (shstroff + shstrsz)
    in
    let symsz = 24 * length symtab
    in
    let stroff = symoff + symsz
    in
    let strsz = String_table.size strtab
    in
    let shoff = align_up_to 64 (stroff + strsz)
    in
    let shnum = 4 + length sorted_sections (* null, shstrtab, symtab, strtab *)
    in
    let (entry : natural) = match Multimap.lookupBy Memory_image_orderings.tagEquiv (EntryPoint) img.by_tag with
        [(_, maybe_el_range)] ->
            match maybe_el_range with
                Just (el_name, (start, len)) -> 
                    address_of_range (el_name, (start, len)) img
                | Nothing -> failwith "entry point defined without a range"
            end
       | [] -> failwith "no entry point defined"
       | _ -> failwith "multiple entry points defined"
    end
    in
    let hdr = a.make_elf_header elf_ft_exec entry shoff phoff max_phnum shnum shstrndx
    in
    let endian = if index elf_ii_data hdr.elf64_ident = Just(unsigned_char_of_natural elf_data_2lsb) then Little else Big
    in
    let all_sections_sorted_with_offsets = user_sections_sorted_with_offsets ++ [
          <| elf64_section_name = match String_table.find_string ".shstrtab" shstrtab with
                                    Just n -> n
                                    | Nothing -> failwith "internal error: `.shstrtab' not in shstrtab"
                                end
           ; elf64_section_type = sht_strtab
           ; elf64_section_flags = 0
           ; elf64_section_addr = 0
           ; elf64_section_offset = shstroff
           ; elf64_section_size = shstrsz
           ; elf64_section_link = 0
           ; elf64_section_info = 0
           ; elf64_section_align = 0
           ; elf64_section_entsize = 0
           ; elf64_section_body = Sequence(List.map byte_of_char (toCharList (String_table.get_base_string shstrtab)))
           ; elf64_section_name_as_string = ".shstrtab"
           |>;
          <| elf64_section_name      = match String_table.find_string ".symtab" shstrtab with
                                    Just n -> n
                                    | Nothing -> failwith "internal error: `.symtab' not in shstrtab"
                                end
           ; elf64_section_type      = sht_symtab
           ; elf64_section_flags     = 0
           ; elf64_section_addr      = 0
           ; elf64_section_offset    = symoff
           ; elf64_section_size      = symsz
           ; elf64_section_link      = 1 + (length user_sections_sorted_with_offsets) + 2
           ; elf64_section_info      = 0
           ; elf64_section_align = 8
           ; elf64_section_entsize   = 24
           ; elf64_section_body = Byte_sequence.concat (List.map (bytes_of_elf64_symbol_table_entry endian) symtab)
           ; elf64_section_name_as_string = ".symtab"
           |>; 
          (* strtab *)
          <| elf64_section_name      = match String_table.find_string ".strtab" shstrtab with
                                    Just n -> n
                                    | Nothing -> failwith "internal error: `.strtab' not in shstrtab"
                                end
           ; elf64_section_type      = sht_strtab
           ; elf64_section_flags     = 0
           ; elf64_section_addr      = 0
           ; elf64_section_offset    = stroff
           ; elf64_section_size      = strsz
           ; elf64_section_link      = 0
           ; elf64_section_info      = 0
           ; elf64_section_align = 1
           ; elf64_section_entsize   = 0
           ; elf64_section_body = Sequence(List.map byte_of_char (toCharList (String_table.get_base_string strtab)))
           ; elf64_section_name_as_string = ".strtab"
           |>
        ]
    in
    let phdrs = a.make_phdrs a.maxpagesize a.commonpagesize elf_ft_exec img all_sections_sorted_with_offsets
    in
    <| elf64_file_header               = <| (* fix up hdr with the precise phnum *)
         elf64_ident = hdr.elf64_ident
       ; elf64_type = hdr.elf64_type
       ; elf64_machine = hdr.elf64_machine
       ; elf64_version = hdr.elf64_version
       ; elf64_entry = hdr.elf64_entry
       ; elf64_phoff = hdr.elf64_phoff
       ; elf64_shoff = hdr.elf64_shoff
       ; elf64_flags = hdr.elf64_flags
       ; elf64_ehsize = hdr.elf64_ehsize
       ; elf64_phentsize = hdr.elf64_phentsize
       ; elf64_phnum = elf64_half_of_natural (length phdrs)
       ; elf64_shentsize = hdr.elf64_shentsize
       ; elf64_shnum = hdr.elf64_shnum
       ; elf64_shstrndx = hdr.elf64_shstrndx
        |>
     ; elf64_file_program_header_table = phdrs
     ; elf64_file_section_header_table = elf64_null_section_header :: ((List.mapi (fun i -> fun isec -> 
          <| elf64_sh_name      = let s = isec.elf64_section_name_as_string in
                                match String_table.find_string s shstrtab with
                                    Just n -> elf64_word_of_natural n
                                    | Nothing -> failwith ("internal error: section name `" ^ s ^ "' not in shstrtab")
                                end
           ; elf64_sh_type      = elf64_word_of_natural isec.elf64_section_type
           ; elf64_sh_flags     = elf64_xword_of_natural isec.elf64_section_flags
           ; elf64_sh_addr      = elf64_addr_of_natural isec.elf64_section_addr
           ; elf64_sh_offset    = elf64_off_of_natural isec.elf64_section_offset
           ; elf64_sh_size      = elf64_xword_of_natural isec.elf64_section_size
           ; elf64_sh_link      = elf64_word_of_natural isec.elf64_section_link
           ; elf64_sh_info      = elf64_word_of_natural isec.elf64_section_info
           ; elf64_sh_addralign = elf64_xword_of_natural isec.elf64_section_align
           ; elf64_sh_entsize   = elf64_xword_of_natural isec.elf64_section_entsize
           |>
     )) (* (zip section_tags_bare section_file_offsets) *) all_sections_sorted_with_offsets)
     ; elf64_file_interpreted_segments = [
            (* do we need to build this? I have HACKed elf_file so that we don't; 
               we assume that all the relevant payload is in the section bodies, 
               as it should be. *)
        ]
     ; elf64_file_interpreted_sections = null_elf64_interpreted_section :: all_sections_sorted_with_offsets
     ; elf64_file_bits_and_bobs        = []
     |>
