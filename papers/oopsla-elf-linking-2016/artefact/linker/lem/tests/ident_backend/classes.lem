open import Pervasives_extra

class ( Count 'a ) 
  val ~{coq} to_num : 'a -> nat
end

instance (Count nat)
  let to_num x = x
end

instance (Count bool)
  let to_num x = if x then 0 else 1
end

type bintree 'a = 
 | Leaf of 'a
 | Node of bintree 'a * bintree 'a

let rec to_num_bintree (t : bintree 'a) = match t with
   Leaf v -> to_num v
 | Node t1 t2 -> to_num_bintree t1 + to_num_bintree t2
end

instance forall 'a. Count 'a => (Count (bintree 'a))
  let to_num = to_num_bintree
end


type my_pair = My_pair of (nat * bintree bool * bool)
let to_num_my_pair (My_pair (n, t, b)) = to_num n + to_num t + to_num b

instance (Count my_pair)
  let to_num = to_num_my_pair
end

type my_pair2 = My_pair2 of (nat * bintree bool * bool)

instance (Count my_pair2)
  let to_num x = match x with
    | My_pair2 (n, t, b) -> to_num n + to_num t + to_num b
  end
end

module X = struct
  class (Eq 'a)
    val equal : 'a -> 'a -> bool
  end
end

module Y = struct
  open X
  instance (Eq nat)
    let equal = fun x y -> true 
  end
end

module Z = struct
  let f x = X.equal (1:nat) x
end

class (V ''n)
  val parse_vec : string -> vector bit ''n
end

instance (V 4)
  let parse_vec s = 0b0000
end

let f x = parse_vec x

val g : string -> vector bit 4
let g x = parse_vec x
