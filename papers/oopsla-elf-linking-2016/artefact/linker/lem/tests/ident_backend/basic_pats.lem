open import Pervasives_extra

type t1 = C1 | C2 of nat | C3 of nat * nat
type t2 = <| fn1 : nat|>
type t3 = <|fn2 : nat ; fn3 : nat|>

let test1 _ = (1:nat)

let test2 ( x as y ) = x + y

let test3 ( x : nat ) = x

let test4 C1 = C1
let test5 ( C2 x ) = x
let test6 ( C3 x y ) = x + y

let test7 <| fn1 = x |> = x
let test8 <| fn1 = x ; |> = x
let test9 <| fn2 = x |> = x
let test10 <| fn2 = x ; |> = x
let test11 <| fn2 = x ; fn3 = y |> = x
let test12 <| fn2 = x ; fn3 = y ; |> = x

let test13 ( x,y ) = x+y
let test14 ( x,y,z ) = x+y+z

let test15 [ ] = (1:nat)
let test16 [ x ] = x
let test17 [ x ; y ] = x + y

let test18 ( x ) = x

let test19 ( x :: y ) = x

let test20 true = (1:nat)
let test21 false = (2:nat)
let test22 (1:nat) = (1:nat)
let test23 "123" = (1:nat)
let test25 ( ) = (1:nat)

(*Literal vector pattern*)
let test26 [| x ; y; |] = x
(* Vector concatenation patterns *)
let test27 [| [| x; |] [| y; z; |] |] = x
let test28 [| x y |] = (1:nat)
let test29 [| 0b010 x |] = true

let test31 x = match x with
 | [| 0b010 y 0b00 |] -> true
 | 0b0000000000000000 -> false 
 | [| 0b00 z 0b000 |] -> true
 end


(* add patterns *)
let test30 (n + 2) = n 