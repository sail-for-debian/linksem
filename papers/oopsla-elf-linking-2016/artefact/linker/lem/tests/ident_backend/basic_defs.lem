open import Pervasives_extra 

let test1 = (1:nat)
let test2 : nat = 1
let test3 _ = (1:nat) ;;
let test4 _ x0 = test2

let rec test5 [] = true 
and test5 ( x0 :: y0 ) : bool = test6 y0
and test6 [] = false 
and test6 ( x0 :: y0 ) = test5 y0

let rec test7 x0 = (10:nat)

val test8 : nat
let test8 = 1

indreln 
[tc : forall 'a. ('a -> 'a -> bool) -> 'a -> 'a -> bool]
base : forall x r . 
r x x ==> tc r x x
and
trans : forall x r y z . 
tc r x y && tc r y z ==> tc r x z

val tc2 : forall 'a. ('a -> 'a -> bool) -> 'a -> 'a -> bool
indreln
[tc2 : forall 'a. ('a -> 'a -> bool) -> 'a -> 'a -> bool ]
call : forall x r . 
r x x ==> tc2 r x x

module M = struct
  let x = (1:nat)
  module N = struct
    let y = x + (1:nat)
  end

  let z = x + N.y
end

let test11 = M.x + M.N.y + M.z

module O = M.N

let test12 = M.x + O.y + M.z

open M

let test13 = z 

let test14 = N.y 

class ( C 'a ) 
  val test20 : 'a
end

class ( D 'b )
  val test22 : 'b -> nat
  val test23 : nat -> 'b
end

val test15 : nat
val test16 : forall 'a . 'a
val test17 : forall 'a 'b . 'a -> 'b
val test18 : forall 'a . C 'a => 'a
val test19 : forall 'a 'b . C 'b , C 'a => 'a -> 'b

instance ( C nat ) 
  let test20 = 1
end

instance forall 'a . C 'a => ( C ( list 'a ) )
  let test20 = [test20]
end

(* The following only works when not using any backends (except tex) *)
val test21 : bool
let _ = test21
