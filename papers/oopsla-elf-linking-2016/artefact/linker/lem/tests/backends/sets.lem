open import Pervasives_extra

(* empty set *)
let s1 = {}

(* simple, finite set *)
let s2 = {1;2;3}

(* unrestrict set comprehension *)
val s3 : set nat  
val s4 : set (nat * nat)  
val s5 : set nat  
val s4a : set (nat * nat)  
val s4b : set (nat * nat)

(* simple restricted set comprehension *)
let s6 = { x | forall (x IN s2) | x > 2 }  

(* complicated restricted set comprehension *)
let s7 = { x | forall (x IN s2) (y IN s2) | x > y }  
let s8 = { (x, y) | forall (x IN s2) (y IN s2) | x > y }  

(* check dependencies *)

let inc2_set x = {x; x + 1; x + 2}
let s9a = {(i, j) | forall (i IN s2) (j IN inc2_set i) | i < j}
let s9b = {j | forall (i IN s2) (j IN inc2_set i) | i < j}

(* unbounded set checks *)

val s10 : set (nat * nat * nat)

val s11 : set (nat * nat)

val s12 : set (nat * nat)


