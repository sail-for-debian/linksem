(******************************************************************************)
(* Transformation library                                                     *)
(*                                                                            *)
(* This library is used to transfrom old lem. To use it do the following:     *)
(* - add "open import Transform" at the head of your file                     *)
(* - run "lem -lem filename.lem" on your file                                 *)
(* - manually check resulting "filename-processed.lem" and ajust              *)
(******************************************************************************)


include import Pervasives_extra

(* get rid of transform at beginning *)
declare rename module = Pervasives_extra


(* ========================================================================== *)
(* Pervasives                                                                 *)
(* ========================================================================== *)

type num = nat
declare lem target_rep type num = `nat`

let lem_transform (@) = (++) (* List append *)

(* transitive closure now works on relations, not sets of pairs,
   best ajust the types manually or add wrappers 'relFromSet' and 
   'relToSet' as appropriate. *)
val tc : forall 'a. set ('a * 'a) -> set ('a * 'a)
declare lem target_rep function tc = `Relation.transitiveClosure`



type option 'a = maybe 'a
declare lem target_rep type option = `maybe` 

let lem_transform None = Nothing
let lem_transform Some = Just

declare pattern_match exhaustive maybe 'a = [ None; Some ; ]  

let lem_transform SUC = natSucc

(* ----------------------- *)
(* fully supported         *)
(* ----------------------- *)

(*  
val not : bool -> bool
val (&&) : bool -> bool -> bool
val (||) : bool -> bool -> bool
val (-->) : bool -> bool -> bool

val fst : forall 'a 'b. 'a * 'b -> 'a
val snd : forall 'a 'b. 'a * 'b -> 'b
val (::) : forall 'a. 'a -> list 'a -> list 'a
*)


(* ----------------------- *)
(* with class constraints  *)
(* ----------------------- *)

(* 
val (=) : forall 'a. 'a -> 'a -> bool
val (<) : num -> num -> bool
val (>) : num -> num -> bool
val (<=) : num -> num -> bool
val (>=) : num -> num -> bool

val (IN) : forall 'a. 'a -> set 'a -> bool
val (union) : forall 'a. set 'a -> set 'a -> set 'a

val (+) : num -> num -> num
val (-) : num -> num -> num
val ( * ) : num -> num -> num
val ( ** ) : num -> num -> num
val (/) : num -> num -> num
val (mod) : num -> num -> num
*)

(* ----------------------- *)
(* TODO: still missing     *)
(* ----------------------- *)
(**)
val (land) : num -> num -> num
val (lor) : num -> num -> num
val (lxor) : num -> num -> num
val lnot : num -> num
val (lsl) : num -> num -> num
val (lsr) : num -> num -> num
val (asr) : num -> num -> num
(*
val bigunion = forall 'a. set (set 'a) -> set 'a
val biginter : forall 'a. set (set 'a) -> set 'a

val (^) : string -> string -> string
let lem_transform {hol} (^) x y = Hol.STRCAT x y
let lem_transform {ocaml} (^) = Ocaml.(^)


type sum 'a 'b = 
  | Inl of 'a
  | Inr of 'b

val isl : forall 'a 'b. sum 'a 'b -> bool
let lem_transform {hol;ocaml;coq;isabelle} isl s = match s with Inl _ -> true | Inr _ -> false end

val isr : forall 'a 'b. sum 'a 'b -> bool
let lem_transform {hol;ocaml;coq;isabelle} isr s = match s with Inl _ -> false | Inr _ -> true end

val outl : forall 'a 'b. sum 'a 'b -> 'a
let lem_transform {hol;ocaml;coq;isabelle} outl s = match s with Inl a -> a end

val outr : forall 'a 'b. sum 'a 'b -> 'b
let lem_transform {hol;ocaml;coq;isabelle} outr s = match s with Inr b -> b end
  
val string_of_num : num -> string
let lem_transform {ocaml} string_of_num = Ocaml.Nat_num.string_of_num
let lem_transform {isabelle} string_of_num = Isabelle.nat_to_string

val nat_list_to_string : list num -> string
let lem_transform {isabelle} nat_list_to_string = Isabelle.nat_list_to_string
*)


(* ========================================================================== *)
(* Set                                                                        *)
(* ========================================================================== *)

module Set = struct
  include Set
  include Set_extra   (* include the new set module *)

  let lem_transform add = Set.insert
  let lem_transform for_all = Set.all
  let lem_transform exist = Set.any
  let lem_transform cardinal = Set.size
  let lem_transform from_list = Set.fromList
  let lem_transform is_empty = Set.null
  let lem_transform image = Set.map
  let lem_transform set_sigma = Set.sigma
  let lem_transform equal = setEqual
  let lem_transform finite = Set.finite
  let lem_transform fold = Set_helpers.fold
  let lem_transform choose s d = Set_extra.choose s
  let lem_transform to_list = Set_extra.toList


  val lfp : forall 'a. SetType 'a => set 'a -> (set 'a -> set 'a) -> set 'a
  let lem_transform lfp x f = Set_extra.leastFixedPointUnbounded f x

  (* ----------------------- *)
  (* with class constraints  *)
  (* ----------------------- *)
  (*
  val singleton : forall 'a. 'a -> set 'a
  val finite : forall 'a. set 'a -> bool
  val filter : forall 'a. ('a -> bool) -> set 'a -> set 'a
  val cross : forall 'a 'b. set 'a -> set 'b -> set ('a * 'b)
  val (=) : forall 'a. set 'a -> set 'a -> bool
  val map : forall 'a 'b. ('a -> 'b) -> set 'a -> set 'b
  val fold : forall 'a 'b. ('a -> 'b -> 'b) -> set 'a -> 'b -> 'b
  *)

  (* ----------------------- *)
  (* TODO: still missing     *)
  (* ----------------------- *)
  (*
  val monotone : forall 'a. (set 'a -> set 'a) -> bool
  *)
end

module Pmap = struct
  (* include the new map module *)
  include Map 
  declare {lem} rename module = Map

  let lem_transform add = Map.insert
  let lem_transform mem = Map.member

  val find : forall 'k 'v. MapKeyType 'k => 'k -> map 'k 'v -> 'v
  let lem_transform find = Map_extra.find

  (* All elements satisfy predicate p iff filtering all elements _not_
     satisfying p yields the empty map, similarly for exists. *)
  let lem_transform for_all = all
  let lem_transform exist p m = any

  let lem_transform remove = delete
  let lem_transform bindings m = Set_extra.toList (toSet m)
end

(* ========================================================================== *)
(* List                                                                       *)
(* ========================================================================== *)

module List = struct
  include List
  include List_extra (* include the new set module *)

  let lem_transform hd = head
  let lem_transform tl = tail
  let lem_transform rev = reverse
  let lem_transform rev_append = reverseAppend
  let lem_transform flatten = concat
  let lem_transform rev_map = reverseMap
  let lem_transform fold_left = foldl
  let lem_transform fold_right f l e = foldr f e l
  let lem_transform for_all = List.all
  let lem_transform exist = List.any
  let lem_transform mem = elem
  let lem_transform find = find_non_pure
  let lem_transform find_all = filter
  let lem_transform assoc = lookup
  let lem_transform split = unzip
  let lem_transform combine = zip

  let lem_transform sort = Sorting.sort
  let lem_transform stable_sort = Sorting.sort
  let lem_transform fast_sort = Sorting.sort

  (* ----------------------- *)
  (* supported               *)
  (* ----------------------- *)

  let lem_transform length = List.length
  let lem_transform nth = List_extra.nth
  let lem_transform append = List.append

  (*
  val length : forall 'a. list 'a -> num
  val nth : forall 'a. list 'a -> num -> 'a
  val append : forall 'a. list 'a -> list 'a -> list 'a
  val concat : forall 'a. list (list 'a) -> list 'a
  val map : forall 'a 'b. ('a -> 'b) -> list 'a -> list 'b
  val filter : forall 'a. ('a -> bool) -> list 'a -> list 'a
  val partition : forall 'a. ('a -> bool) -> list 'a -> list 'a * list 'a
  *)

  (* ----------------------- *)
  (* TODO: still missing     *)
  (* ----------------------- *)
  (*
  val map2 : forall 'a 'b 'c. ('a -> 'b -> 'c) -> list 'a -> list 'b -> list 'c 
  val rev_map2 : forall 'a 'b 'c. ('a -> 'b -> 'c) -> list 'a -> list 'b -> list 'c
  val fold_left2 : forall 'a 'b 'c. ('a -> 'b -> 'c -> 'a) -> 'a -> list 'b -> list 'c -> 'a
  val fold_right2 : forall 'a 'b 'c. ('a -> 'b -> 'c -> 'c) -> list 'a -> list 'b -> 'c -> 'c
  val for_all2 : forall 'a 'b. ('a -> 'b -> bool) -> list 'a -> list 'b -> bool
  val exists2 : forall 'a 'b. ('a -> 'b -> bool) -> list 'a -> list 'b -> bool
  val mem_assoc : forall 'a 'b. 'a -> list ('a * 'b) -> bool
  val remove_assoc : forall 'a 'b. 'a -> list ('a * 'b) -> list ('a * 'b)
  val merge : forall 'a. ('a -> 'a -> num) -> list 'a -> list 'a -> list 'a
  val intersect : forall 'a. list 'a -> list 'a -> list 'a
  *)

end
