chapter {* Generated by Lem from abis/aarch64/abi_aarch64_relocation.lem. *}

theory "Abi_aarch64_relocation" 

imports 
 	 Main
	 "../../lem-libs/isabelle-lib/Lem_num" 
	 "../../lem-libs/isabelle-lib/Lem_basic_classes" 
	 "../../lem-libs/isabelle-lib/Lem_maybe" 
	 "../../lem-libs/isabelle-lib/Lem_string" 
	 "Missing_pervasives" 
	 "Error" 
	 "Elf_types_native_uint" 
	 "Elf_header" 
	 "Elf_symbol_table" 
	 "Elf_file" 
	 "Elf_relocation" 
	 "Memory_image" 
	 "Abi_utilities" 

begin 

(** [abi_aarch64_relocation] contains types and definitions relating to ABI
  * specific relocation functionality for the AArch64 ABI (little-endian case).
  *)

(*open import Basic_classes*)
(*open import Num*)
(*open import String*)
(*open import Maybe*)
(*open import Missing_pervasives*)

(*open import Error*)

(*open import Elf_types_native_uint*)
(*open import Elf_file*)
(*open import Elf_header*)
(*open import Elf_relocation*)
(*open import Elf_symbol_table*)

(*open import Abi_utilities*)
(*open import Memory_image*)

(** Relocations *)

definition r_aarch64_none  :: " nat "  where 
     " r_aarch64_none = (( 0 :: nat))"

definition r_aarch64_withdrawn  :: " nat "  where 
     " r_aarch64_withdrawn = (( 256 :: nat))"
  (** Treated as R_AARCH6_NONE *)

definition r_aarch64_abs64  :: " nat "  where 
     " r_aarch64_abs64 = (( 257 :: nat))"

definition r_aarch64_abs32  :: " nat "  where 
     " r_aarch64_abs32 = (( 258 :: nat))"

definition r_aarch64_abs16  :: " nat "  where 
     " r_aarch64_abs16 = (( 259 :: nat))"

definition r_aarch64_prel64  :: " nat "  where 
     " r_aarch64_prel64 = (( 260 :: nat))"

definition r_aarch64_prel32  :: " nat "  where 
     " r_aarch64_prel32 = (( 261 :: nat))"

definition r_aarch64_prel16  :: " nat "  where 
     " r_aarch64_prel16 = (( 262 :: nat))"


definition r_aarch64_movw_uabs_g0  :: " nat "  where 
     " r_aarch64_movw_uabs_g0 = (( 263 :: nat))"

definition r_aarch64_movw_uabs_g0_nc  :: " nat "  where 
     " r_aarch64_movw_uabs_g0_nc = (( 264 :: nat))"

definition r_aarch64_movw_uabs_g1  :: " nat "  where 
     " r_aarch64_movw_uabs_g1 = (( 265 :: nat))"

definition r_aarch64_movw_uabs_g1_nc  :: " nat "  where 
     " r_aarch64_movw_uabs_g1_nc = (( 266 :: nat))"

definition r_aarch64_movw_uabs_g2  :: " nat "  where 
     " r_aarch64_movw_uabs_g2 = (( 267 :: nat))"

definition r_aarch64_movw_uabs_g2_nc  :: " nat "  where 
     " r_aarch64_movw_uabs_g2_nc = (( 268 :: nat))"

definition r_aarch64_movw_uabs_g3  :: " nat "  where 
     " r_aarch64_movw_uabs_g3 = (( 269 :: nat))"


definition r_aarch64_movw_sabs_g0  :: " nat "  where 
     " r_aarch64_movw_sabs_g0 = (( 270 :: nat))"

definition r_aarch64_movw_sabs_g1  :: " nat "  where 
     " r_aarch64_movw_sabs_g1 = (( 271 :: nat))"

definition r_aarch64_movw_sabs_g2  :: " nat "  where 
     " r_aarch64_movw_sabs_g2 = (( 272 :: nat))"


definition r_aarch64_ld_prel_lo19  :: " nat "  where 
     " r_aarch64_ld_prel_lo19 = (( 273 :: nat))"

definition r_aarch64_adr_prel_lo21  :: " nat "  where 
     " r_aarch64_adr_prel_lo21 = (( 274 :: nat))"

definition r_aarch64_adr_prel_pg_hi21  :: " nat "  where 
     " r_aarch64_adr_prel_pg_hi21 = (( 275 :: nat))"

definition r_aarch64_adr_prel_pg_hi21_nc  :: " nat "  where 
     " r_aarch64_adr_prel_pg_hi21_nc = (( 276 :: nat))"

definition r_aarch64_add_abs_lo12_nc  :: " nat "  where 
     " r_aarch64_add_abs_lo12_nc = (( 277 :: nat))"

definition r_aarch64_ldst8_abs_lo12_nc  :: " nat "  where 
     " r_aarch64_ldst8_abs_lo12_nc = (( 278 :: nat))"

definition r_aarch64_ldst16_abs_lo12_nc  :: " nat "  where 
     " r_aarch64_ldst16_abs_lo12_nc = (( 284 :: nat))"

definition r_aarch64_ldst32_abs_lo12_nc  :: " nat "  where 
     " r_aarch64_ldst32_abs_lo12_nc = (( 285 :: nat))"

definition r_aarch64_ldst64_abs_lo12_nc  :: " nat "  where 
     " r_aarch64_ldst64_abs_lo12_nc = (( 286 :: nat))"

definition r_aarch64_ldst128_abs_lo12_nc  :: " nat "  where 
     " r_aarch64_ldst128_abs_lo12_nc = (( 299 :: nat))"


definition r_aarch64_tstbr14  :: " nat "  where 
     " r_aarch64_tstbr14 = (( 279 :: nat))"

definition r_aarch64_condbr19  :: " nat "  where 
     " r_aarch64_condbr19 = (( 280 :: nat))"

definition r_aarch64_jump26  :: " nat "  where 
     " r_aarch64_jump26 = (( 282 :: nat))"

definition r_aarch64_call26  :: " nat "  where 
     " r_aarch64_call26 = (( 283 :: nat))"


definition r_aarch64_movw_prel_g0  :: " nat "  where 
     " r_aarch64_movw_prel_g0 = (( 287 :: nat))"

definition r_aarch64_movw_prel_g0_nc  :: " nat "  where 
     " r_aarch64_movw_prel_g0_nc = (( 288 :: nat))"

definition r_aarch64_movw_prel_g1  :: " nat "  where 
     " r_aarch64_movw_prel_g1 = (( 289 :: nat))"

definition r_aarch64_movw_prel_g1_nc  :: " nat "  where 
     " r_aarch64_movw_prel_g1_nc = (( 290 :: nat))"

definition r_aarch64_movw_prel_g2  :: " nat "  where 
     " r_aarch64_movw_prel_g2 = (( 291 :: nat))"

definition r_aarch64_movw_prel_g2_nc  :: " nat "  where 
     " r_aarch64_movw_prel_g2_nc = (( 292 :: nat))"

definition r_aarch64_movw_prel_g3  :: " nat "  where 
     " r_aarch64_movw_prel_g3 = (( 293 :: nat))"


definition r_aarch64_movw_gotoff_g0  :: " nat "  where 
     " r_aarch64_movw_gotoff_g0 = (( 300 :: nat))"

definition r_aarch64_movw_gotoff_g0_nc  :: " nat "  where 
     " r_aarch64_movw_gotoff_g0_nc = (( 301 :: nat))"

definition r_aarch64_movw_gotoff_g1  :: " nat "  where 
     " r_aarch64_movw_gotoff_g1 = (( 302 :: nat))"

definition r_aarch64_movw_gotoff_g1_nc  :: " nat "  where 
     " r_aarch64_movw_gotoff_g1_nc = (( 303 :: nat))"

definition r_aarch64_movw_gotoff_g2  :: " nat "  where 
     " r_aarch64_movw_gotoff_g2 = (( 304 :: nat))"

definition r_aarch64_movw_gotoff_g2_nc  :: " nat "  where 
     " r_aarch64_movw_gotoff_g2_nc = (( 305 :: nat))"

definition r_aarch64_movw_gotoff_g3  :: " nat "  where 
     " r_aarch64_movw_gotoff_g3 = (( 306 :: nat))"


definition r_aarch64_gotrel64  :: " nat "  where 
     " r_aarch64_gotrel64 = (( 307 :: nat))"

definition r_aarch64_gotrel32  :: " nat "  where 
     " r_aarch64_gotrel32 = (( 308 :: nat))"


definition r_aarch64_got_ld_prel19  :: " nat "  where 
     " r_aarch64_got_ld_prel19 = (( 309 :: nat))"

definition r_aarch64_got_ld64_gotoff_lo15  :: " nat "  where 
     " r_aarch64_got_ld64_gotoff_lo15 = (( 310 :: nat))"

definition r_aarch64_adr_got_page  :: " nat "  where 
     " r_aarch64_adr_got_page = (( 311 :: nat))"

definition r_aarch64_ld64_got_lo12_nc  :: " nat "  where 
     " r_aarch64_ld64_got_lo12_nc = (( 312 :: nat))"

definition r_aarch64_ld64_gotpage_lo15  :: " nat "  where 
     " r_aarch64_ld64_gotpage_lo15 = (( 313 :: nat))"


definition r_aarch64_tlsgd_adr_prel21  :: " nat "  where 
     " r_aarch64_tlsgd_adr_prel21 = (( 512 :: nat))"

definition r_aarch64_tlsgd_adr_page21  :: " nat "  where 
     " r_aarch64_tlsgd_adr_page21 = (( 513 :: nat))"

definition r_aarch64_tlsgd_add_lo12_nc  :: " nat "  where 
     " r_aarch64_tlsgd_add_lo12_nc = (( 514 :: nat))"

definition r_aarch64_tlsgd_movw_g1  :: " nat "  where 
     " r_aarch64_tlsgd_movw_g1 = (( 515 :: nat))"

definition r_aarch64_tlsgd_movw_g0_nc  :: " nat "  where 
     " r_aarch64_tlsgd_movw_g0_nc = (( 516 :: nat))"


definition r_aarch64_tlsld_adr_prel21  :: " nat "  where 
     " r_aarch64_tlsld_adr_prel21 = (( 517 :: nat))"

definition r_aarch64_tlsld_adr_page21  :: " nat "  where 
     " r_aarch64_tlsld_adr_page21 = (( 518 :: nat))"

definition r_aarch64_tlsld_add_lo12_nc  :: " nat "  where 
     " r_aarch64_tlsld_add_lo12_nc = (( 519 :: nat))"

definition r_aarch64_tlsld_movw_g1  :: " nat "  where 
     " r_aarch64_tlsld_movw_g1 = (( 520 :: nat))"

definition r_aarch64_tlsld_movw_g0_nc  :: " nat "  where 
     " r_aarch64_tlsld_movw_g0_nc = (( 521 :: nat))"

definition r_aarch64_tlsld_ld_prel19  :: " nat "  where 
     " r_aarch64_tlsld_ld_prel19 = (( 522 :: nat))"

definition r_aarch64_tlsld_movw_dtprel_g2  :: " nat "  where 
     " r_aarch64_tlsld_movw_dtprel_g2 = (( 523 :: nat))"

definition r_aarch64_tlsld_movw_dtprel_g1  :: " nat "  where 
     " r_aarch64_tlsld_movw_dtprel_g1 = (( 524 :: nat))"

definition r_aarch64_tlsld_movw_dtprel_g1_nc  :: " nat "  where 
     " r_aarch64_tlsld_movw_dtprel_g1_nc = (( 525 :: nat))"

definition r_aarch64_tlsld_movw_dtprel_g0  :: " nat "  where 
     " r_aarch64_tlsld_movw_dtprel_g0 = (( 526 :: nat))"

definition r_aarch64_tlsld_movw_dtprel_g0_nc  :: " nat "  where 
     " r_aarch64_tlsld_movw_dtprel_g0_nc = (( 527 :: nat))"

definition r_aarch64_tlsld_add_dtprel_hi12  :: " nat "  where 
     " r_aarch64_tlsld_add_dtprel_hi12 = (( 528 :: nat))"

definition r_aarch64_tlsld_add_dtprel_lo12  :: " nat "  where 
     " r_aarch64_tlsld_add_dtprel_lo12 = (( 529 :: nat))"

definition r_aarch64_tlsld_add_dtprel_lo12_nc  :: " nat "  where 
     " r_aarch64_tlsld_add_dtprel_lo12_nc = (( 530 :: nat))"

definition r_aarch64_tlsld_ldst8_dtprel_lo12  :: " nat "  where 
     " r_aarch64_tlsld_ldst8_dtprel_lo12 = (( 531 :: nat))"

definition r_aarch64_tlsld_ldst8_dtprel_lo12_nc  :: " nat "  where 
     " r_aarch64_tlsld_ldst8_dtprel_lo12_nc = (( 532 :: nat))"

definition r_aarch64_tlsld_ldst16_dtprel_lo12  :: " nat "  where 
     " r_aarch64_tlsld_ldst16_dtprel_lo12 = (( 533 :: nat))"

definition r_aarch64_tlsld_ldst16_dtprel_lo12_nc  :: " nat "  where 
     " r_aarch64_tlsld_ldst16_dtprel_lo12_nc = (( 534 :: nat))"

definition r_aarch64_tlsld_ldst32_dtprel_lo12  :: " nat "  where 
     " r_aarch64_tlsld_ldst32_dtprel_lo12 = (( 535 :: nat))"

definition r_aarch64_tlsld_ldst32_dtprel_lo12_nc  :: " nat "  where 
     " r_aarch64_tlsld_ldst32_dtprel_lo12_nc = (( 536 :: nat))"

definition r_aarch64_tlsld_ldst64_dtprel_lo12  :: " nat "  where 
     " r_aarch64_tlsld_ldst64_dtprel_lo12 = (( 537 :: nat))"

definition r_aarch64_tlsld_ldst64_dtprel_lo12_nc  :: " nat "  where 
     " r_aarch64_tlsld_ldst64_dtprel_lo12_nc = (( 538 :: nat))"

definition r_aarch64_tlsld_ldst128_dtprel_lo12  :: " nat "  where 
     " r_aarch64_tlsld_ldst128_dtprel_lo12 = (( 572 :: nat))"

definition r_aarch64_tlsld_ldst128_dtprel_lo12_nc  :: " nat "  where 
     " r_aarch64_tlsld_ldst128_dtprel_lo12_nc = (( 573 :: nat))"


definition r_aarch64_tlsie_movw_gottprel_g1  :: " nat "  where 
     " r_aarch64_tlsie_movw_gottprel_g1 = (( 539 :: nat))"

definition r_aarch64_tlsie_movw_gottprel_g0_nc  :: " nat "  where 
     " r_aarch64_tlsie_movw_gottprel_g0_nc = (( 540 :: nat))"

definition r_aarch64_tlsie_movw_gottprel_page21  :: " nat "  where 
     " r_aarch64_tlsie_movw_gottprel_page21 = (( 541 :: nat))"

definition r_aarch64_tlsie_movw_gottprel_lo12_nc  :: " nat "  where 
     " r_aarch64_tlsie_movw_gottprel_lo12_nc = (( 542 :: nat))"

definition r_aarch64_tlsie_movw_gottprel_prel19  :: " nat "  where 
     " r_aarch64_tlsie_movw_gottprel_prel19 = (( 543 :: nat))"


definition r_aarch64_tlsle_movw_tprel_g2  :: " nat "  where 
     " r_aarch64_tlsle_movw_tprel_g2 = (( 544 :: nat))"

definition r_aarch64_tlsle_movw_tprel_g1  :: " nat "  where 
     " r_aarch64_tlsle_movw_tprel_g1 = (( 545 :: nat))"

definition r_aarch64_tlsle_movw_tprel_g1_nc  :: " nat "  where 
     " r_aarch64_tlsle_movw_tprel_g1_nc = (( 546 :: nat))"

definition r_aarch64_tlsle_movw_tprel_g0  :: " nat "  where 
     " r_aarch64_tlsle_movw_tprel_g0 = (( 547 :: nat))"

definition r_aarch64_tlsle_movw_tprel_g0_nc  :: " nat "  where 
     " r_aarch64_tlsle_movw_tprel_g0_nc = (( 548 :: nat))"

definition r_aarch64_add_tprel_hi12  :: " nat "  where 
     " r_aarch64_add_tprel_hi12 = (( 549 :: nat))"

definition r_aarch64_add_tprel_lo12  :: " nat "  where 
     " r_aarch64_add_tprel_lo12 = (( 550 :: nat))"

definition r_aarch64_add_tprel_lo12_nc  :: " nat "  where 
     " r_aarch64_add_tprel_lo12_nc = (( 551 :: nat))"

definition r_aarch64_ldst8_tprel_lo12  :: " nat "  where 
     " r_aarch64_ldst8_tprel_lo12 = (( 552 :: nat))"

definition r_aarch64_ldst8_tprel_lo12_nc  :: " nat "  where 
     " r_aarch64_ldst8_tprel_lo12_nc = (( 553 :: nat))"

definition r_aarch64_ldst16_tprel_lo12  :: " nat "  where 
     " r_aarch64_ldst16_tprel_lo12 = (( 554 :: nat))"

definition r_aarch64_ldst16_tprel_lo12_nc  :: " nat "  where 
     " r_aarch64_ldst16_tprel_lo12_nc = (( 555 :: nat))"

definition r_aarch64_ldst32_tprel_lo12  :: " nat "  where 
     " r_aarch64_ldst32_tprel_lo12 = (( 556 :: nat))"

definition r_aarch64_ldst32_tprel_lo12_nc  :: " nat "  where 
     " r_aarch64_ldst32_tprel_lo12_nc = (( 557 :: nat))"

definition r_aarch64_ldst64_tprel_lo12  :: " nat "  where 
     " r_aarch64_ldst64_tprel_lo12 = (( 558 :: nat))"

definition r_aarch64_ldst64_tprel_lo12_nc  :: " nat "  where 
     " r_aarch64_ldst64_tprel_lo12_nc = (( 559 :: nat))"

definition r_aarch64_ldst128_tprel_lo12  :: " nat "  where 
     " r_aarch64_ldst128_tprel_lo12 = (( 570 :: nat))"

definition r_aarch64_ldst128_tprel_lo12_nc  :: " nat "  where 
     " r_aarch64_ldst128_tprel_lo12_nc = (( 571 :: nat))"


definition r_aarch64_tlsdesc_ld_prel19  :: " nat "  where 
     " r_aarch64_tlsdesc_ld_prel19 = (( 560 :: nat))"

definition r_aarch64_tlsdesc_adr_prel21  :: " nat "  where 
     " r_aarch64_tlsdesc_adr_prel21 = (( 561 :: nat))"

definition r_aarch64_tlsdesc_adr_page21  :: " nat "  where 
     " r_aarch64_tlsdesc_adr_page21 = (( 562 :: nat))"

definition r_aarch64_tlsdesc_ld64_lo12  :: " nat "  where 
     " r_aarch64_tlsdesc_ld64_lo12 = (( 563 :: nat))"

definition r_aarch64_tlsdesc_add_lo12  :: " nat "  where 
     " r_aarch64_tlsdesc_add_lo12 = (( 564 :: nat))"

definition r_aarch64_tlsdesc_off_g1  :: " nat "  where 
     " r_aarch64_tlsdesc_off_g1 = (( 565 :: nat))"

definition r_aarch64_tlsdesc_off_g0_nc  :: " nat "  where 
     " r_aarch64_tlsdesc_off_g0_nc = (( 566 :: nat))"

definition r_aarch64_tlsdesc_ldr  :: " nat "  where 
     " r_aarch64_tlsdesc_ldr = (( 567 :: nat))"

definition r_aarch64_tlsdesc_add  :: " nat "  where 
     " r_aarch64_tlsdesc_add = (( 568 :: nat))"

definition r_aarch64_tlsdesc_call  :: " nat "  where 
     " r_aarch64_tlsdesc_call = (( 569 :: nat))"


definition r_aarch64_copy  :: " nat "  where 
     " r_aarch64_copy = (( 1024 :: nat))"

definition r_aarch64_glob_dat  :: " nat "  where 
     " r_aarch64_glob_dat = (( 1025 :: nat))"

definition r_aarch64_jump_slot  :: " nat "  where 
     " r_aarch64_jump_slot = (( 1026 :: nat))"

definition r_aarch64_relative  :: " nat "  where 
     " r_aarch64_relative = (( 1027 :: nat))"

definition r_aarch64_tls_dtprel64  :: " nat "  where 
     " r_aarch64_tls_dtprel64 = (( 1028 :: nat))"

definition r_aarch64_tls_dtpmod64  :: " nat "  where 
     " r_aarch64_tls_dtpmod64 = (( 1029 :: nat))"

definition r_aarch64_tls_tprel64  :: " nat "  where 
     " r_aarch64_tls_tprel64 = (( 1030 :: nat))"

definition r_aarch64_tlsdesc  :: " nat "  where 
     " r_aarch64_tlsdesc = (( 1031 :: nat))"

definition r_aarch64_irelative  :: " nat "  where 
     " r_aarch64_irelative = (( 1032 :: nat))"


(** [string_of_aarch64_relocation_type m] produces a string representation of the
  * relocation type [m].
  *)
(*val string_of_aarch64_relocation_type : natural -> string*)

(*val aarch64_le_reloc : forall 'abifeature. reloc_fn 'abifeature*)
definition aarch64_le_reloc  :: " nat \<Rightarrow> bool*('abifeature annotated_memory_image \<Rightarrow> nat \<Rightarrow> symbol_reference_and_reloc_site \<Rightarrow> nat*(nat \<Rightarrow> int \<Rightarrow> nat \<Rightarrow> nat))"  where 
     " aarch64_le_reloc r = (
  if r = r_aarch64_none then
    (False, (\<lambda> img3 .  (\<lambda> site_addr .  (\<lambda> rr .  (( 0 :: nat), (\<lambda> s .  \<lambda> a .  \<lambda> e .  e))))))
  else
    (False, noop_reloc_apply))"

    
(** [abi_aarch64_apply_relocation rel s_val p_val got_val ef] produces an AST
  * of the relocation calculation for relocation type [rel] using [s_val], [p_val],
  * and [got_val] as primitive components.
  *
  * TODO: unclear from ABI spec. whether overflow check on relocations is
  * supposed to cause relocation to fail if not satisfied or whether there is
  * wrap-around.  Resolve.
  *)
(*val abi_aarch64_apply_relocation : elf64_relocation_a -> integer -> integer ->
  integer -> elf64_file ->
    error (Map.map elf64_addr (relocation_operator_expression integer * integer_bit_width * can_fail integer))*)
definition abi_aarch64_apply_relocation  :: " elf64_relocation_a \<Rightarrow> int \<Rightarrow> int \<Rightarrow> int \<Rightarrow> elf64_file \<Rightarrow>(((Elf_Types_Local.uint64),((int)relocation_operator_expression*integer_bit_width*(int)can_fail))Map.map)error "  where 
     " abi_aarch64_apply_relocation rel s_val p_val got_val ef = (
  if is_elf64_relocatable_file(elf64_file_header   ef) then
    (let rel_type = (get_elf64_relocation_a_type rel) in
    (let a_val    = (sint(elf64_ra_addend   rel)) in
      (** No width, no calculation *)
      if rel_type = r_aarch64_none then
        error_return Map.empty
      (** No width, no calculation *)
      else if rel_type = r_aarch64_withdrawn then
        error_return Map.empty
      (** Signed 64 bit width, calculation: S + A *)
      else if rel_type = r_aarch64_abs64 then
      	(let result = (Lift (s_val + a_val)) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, I64, CannotFail) Map.empty)))
      (** Signed 32 bit width, calculation: S + A *)
      else if rel_type = r_aarch64_abs32 then
      	(let result = (Lift (s_val + a_val)) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, I32, CanFail) Map.empty)))
      (** Signed 16 bith width, calculation: S + A *)
      else if rel_type = r_aarch64_abs16 then
      	(let result = (Lift (s_val + a_val)) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, I16, CanFail) Map.empty)))
      (** Signed 64 bit width, calculation: S + A - P *)
      else if rel_type = r_aarch64_prel64 then
      	(let result = (Lift ((s_val + a_val) - p_val)) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, I64, CannotFail) Map.empty)))
      (** Signed 32 bit width, calculation: S + A - P *)
      else if rel_type = r_aarch64_prel32 then
      	(let result = (Lift ((s_val + a_val) - p_val)) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, I32, CanFail) Map.empty)))
      (** Signed 16 bit width, calculation: S + A - P *)
      else if rel_type = r_aarch64_prel16 then
      	(let result = (Lift ((s_val + a_val) - p_val)) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, I16, CanFail) Map.empty)))
      else if rel_type = r_aarch64_movw_uabs_g0 then
      	(let result = (Lift (s_val + a_val)) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, U16, CanFail) Map.empty)))
      else if rel_type = r_aarch64_movw_uabs_g0_nc then
      	(let result = (Lift (s_val + a_val)) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, U16, CannotFail) Map.empty)))
      else if rel_type = r_aarch64_movw_uabs_g1 then
      	(let result = (Lift (s_val + a_val)) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, U32, CanFail) Map.empty)))
      else if rel_type = r_aarch64_movw_uabs_g1_nc then
      	(let result = (Lift (s_val + a_val)) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, U32, CannotFail) Map.empty)))
      else if rel_type = r_aarch64_movw_uabs_g2 then
      	(let result = (Lift (s_val + a_val)) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, U48, CanFail) Map.empty)))
      else if rel_type = r_aarch64_movw_uabs_g2_nc then
      	(let result = (Lift (s_val + a_val)) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, U48, CannotFail) Map.empty)))
      else if rel_type = r_aarch64_movw_uabs_g3 then
      	(let result = (Lift (s_val + a_val)) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, U64, CannotFail) Map.empty)))
      else if rel_type = r_aarch64_movw_sabs_g0 then
      	(let result = (Lift (s_val + a_val)) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, I16, CanFail) Map.empty)))
      else if rel_type = r_aarch64_movw_sabs_g1 then
      	(let result = (Lift (s_val + a_val)) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, I32, CanFail) Map.empty)))
      else if rel_type = r_aarch64_movw_sabs_g2 then
      	(let result = (Lift (s_val + a_val)) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, I48, CanFail) Map.empty)))
      else if rel_type = r_aarch64_ld_prel_lo19 then
      	(let result = (Lift ((s_val + a_val) - p_val)) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, I20, CanFail) Map.empty)))
      else if rel_type = r_aarch64_adr_prel_lo21 then
      	(let result = (Lift ((s_val + a_val) - p_val)) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, I20, CanFail) Map.empty)))
      else if rel_type = r_aarch64_adr_prel_pg_hi21 then
      	(let result = (Minus(Apply(Page, Lift (s_val + a_val)), Apply(Page, Lift p_val))) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, I32, CanFail) Map.empty)))
      else if rel_type = r_aarch64_adr_prel_pg_hi21_nc then
      	(let result = (Minus (Apply(Page, Lift (s_val + a_val)), Apply(Page, Lift p_val))) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, I32, CannotFail) Map.empty)))
      else if rel_type = r_aarch64_add_abs_lo12_nc then
      	(let result = (Lift (s_val + a_val)) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, I32, CannotFail) Map.empty)))
      else if rel_type = r_aarch64_ldst8_abs_lo12_nc then
      	(let result = (Lift (s_val + a_val)) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, I32, CannotFail) Map.empty)))
      else if rel_type = r_aarch64_ldst16_abs_lo12_nc then
      	(let result = (Lift (s_val + a_val)) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, I32, CannotFail) Map.empty)))
      else if rel_type = r_aarch64_ldst32_abs_lo12_nc then
      	(let result = (Lift (s_val + a_val)) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, I32, CannotFail) Map.empty)))
      else if rel_type = r_aarch64_ldst64_abs_lo12_nc then
      	(let result = (Lift (s_val + a_val)) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, I32, CannotFail) Map.empty)))
      else if rel_type = r_aarch64_ldst128_abs_lo12_nc then
      	(let result = (Lift (s_val + a_val)) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, I32, CannotFail) Map.empty)))
      else if rel_type = r_aarch64_tstbr14 then
      	(let result = (Lift ((s_val + a_val) - p_val)) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, I15, CanFail) Map.empty)))
      else if rel_type = r_aarch64_condbr19 then
      	(let result = (Lift ((s_val + a_val) - p_val)) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, I20, CanFail) Map.empty)))
      else if rel_type = r_aarch64_jump26 then
      	(let result = (Lift ((s_val + a_val) - p_val)) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, I27, CanFail) Map.empty)))
      else if rel_type = r_aarch64_call26 then
      	(let result = (Lift ((s_val + a_val) - p_val)) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, I27, CanFail) Map.empty)))
      else if rel_type = r_aarch64_movw_prel_g0 then
      	(let result = (Lift ((s_val + a_val) - p_val)) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, I16, CanFail) Map.empty)))
      else if rel_type = r_aarch64_movw_prel_g0_nc then
      	(let result = (Lift ((s_val + a_val) - p_val)) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, I16, CannotFail) Map.empty)))
      else if rel_type = r_aarch64_movw_prel_g1 then
      	(let result = (Lift ((s_val + a_val) - p_val)) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, I32, CanFail) Map.empty)))
      else if rel_type = r_aarch64_movw_prel_g1_nc then
      	(let result = (Lift ((s_val + a_val) - p_val)) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, I32, CannotFail) Map.empty)))
      else if rel_type = r_aarch64_movw_prel_g2 then
      	(let result = (Lift ((s_val + a_val) - p_val)) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, I48, CanFail) Map.empty)))
      else if rel_type = r_aarch64_movw_prel_g2_nc then
      	(let result = (Lift ((s_val + a_val) - p_val)) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, I48, CannotFail) Map.empty)))
      else if rel_type = r_aarch64_movw_prel_g3 then
      	(let result = (Lift ((s_val + a_val) - p_val)) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, I64, CannotFail) Map.empty)))
      else if rel_type = r_aarch64_movw_gotoff_g0 then
      	(let result = (Minus (Apply(G, Apply(GDat, Lift (s_val + a_val))), Lift got_val)) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, I16, CanFail) Map.empty)))
      else if rel_type = r_aarch64_movw_gotoff_g0_nc then
      	(let result = (Minus (Apply(G, Apply(GDat, Lift (s_val + a_val))), Lift got_val)) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, I16, CannotFail) Map.empty)))
      else if rel_type = r_aarch64_movw_gotoff_g1 then
      	(let result = (Minus (Apply(G, Apply(GDat, Lift (s_val + a_val))), Lift got_val)) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, I32, CanFail) Map.empty)))
      else if rel_type = r_aarch64_movw_gotoff_g1_nc then
      	(let result = (Minus (Apply(G, Apply(GDat, Lift (s_val + a_val))), Lift got_val)) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, I32, CannotFail) Map.empty)))
      else if rel_type = r_aarch64_movw_gotoff_g2 then
      	(let result = (Minus (Apply(G, Apply(GDat, Lift (s_val + a_val))), Lift got_val)) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, I48, CanFail) Map.empty)))
      else if rel_type = r_aarch64_movw_gotoff_g2_nc then
      	(let result = (Minus (Apply(G, Apply(GDat, Lift (s_val + a_val))), Lift got_val)) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, I32, CannotFail) Map.empty)))
      else if rel_type = r_aarch64_movw_gotoff_g3 then
      	(let result = (Minus (Apply(G, Apply(GDat, Lift (s_val + a_val))), Lift got_val)) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, I64, CannotFail) Map.empty)))
      else if rel_type = r_aarch64_gotrel64 then
      	(let result = (Lift ((s_val + a_val) - got_val)) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, I64, CannotFail) Map.empty)))
      else if rel_type = r_aarch64_gotrel32 then
      	(let result = (Lift ((s_val + a_val) - got_val)) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, I32, CanFail) Map.empty)))
      else if rel_type = r_aarch64_got_ld_prel19 then
      	(let result = (Minus (Apply(G, Apply(GDat, Lift (s_val + a_val))), Lift p_val)) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, I20, CanFail) Map.empty)))
      else if rel_type = r_aarch64_got_ld64_gotoff_lo15 then
      	(let result = (Minus (Apply(G, Apply(GDat, Lift (s_val + a_val))), Lift got_val)) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, U15, CanFail) Map.empty)))
      else if rel_type = r_aarch64_adr_got_page then
      	(let result = (Minus (Apply(Page, Apply(G, Apply(GDat, Lift (s_val + a_val)))), Apply(Page, Lift p_val))) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, I32, CanFail) Map.empty)))
      else if rel_type = r_aarch64_ld64_got_lo12_nc then
        (** requires ad hoc check *)
      	(let result = (Apply(G, Apply(GDat, Lift (s_val + a_val)))) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, I20, CannotFail) Map.empty)))
      else if rel_type = r_aarch64_ld64_gotpage_lo15 then
        (** requires ad hoc check *)
      	(let result = (Minus(Apply(G, Apply(GDat, Lift (s_val + a_val))), Apply(Page, Lift got_val))) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, U15, CanFail) Map.empty)))
      else if rel_type = r_aarch64_tlsgd_adr_prel21 then
      	(let result = (Minus(Apply(G, Apply2(GTLSIdx, Lift s_val, Lift a_val)), Lift p_val)) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, I20, CanFail) Map.empty)))
      else if rel_type = r_aarch64_tlsgd_adr_page21 then
      	(let result = (Minus(Apply(Page, Apply(G, Apply2(GTLSIdx, Lift s_val, Lift a_val))), Apply(Page, Lift p_val))) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, I32, CanFail) Map.empty)))
      else if rel_type = r_aarch64_tlsgd_add_lo12_nc then
      	(let result = (Apply(G, Apply2(GTLSIdx, Lift s_val, Lift a_val))) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, I12, CannotFail) Map.empty)))
      else if rel_type = r_aarch64_tlsgd_movw_g1 then
        (** requires ad hoc check *)
      	(let result = (Minus(Apply(G, Apply2(GTLSIdx, Lift s_val, Lift a_val)), Lift got_val)) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, I16, CannotFail) Map.empty)))
      else if rel_type = r_aarch64_tlsgd_movw_g0_nc then
      	(let result = (Minus(Apply(G, Apply2 (GTLSIdx, Lift s_val, Lift a_val)), Lift got_val)) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, I16, CannotFail) Map.empty)))
      else if rel_type = r_aarch64_tlsld_adr_prel21 then
        (let result = (Minus(Apply(G, Apply(GLDM, Lift s_val)), Lift p_val)) in
       	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, I20, CanFail) Map.empty)))
      else if rel_type = r_aarch64_tlsld_adr_page21 then
        (let result = (Minus(Apply(G, Apply(GLDM, Lift s_val)), Apply(Page, Lift p_val))) in
       	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, I32, CanFail) Map.empty)))
      else if rel_type = r_aarch64_tlsld_add_lo12_nc then
        (let result = (Apply(G, Apply(GLDM, Lift s_val))) in
       	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, I32, CannotFail) Map.empty)))
      else if rel_type = r_aarch64_tlsld_movw_g1 then
        (let result = (Minus(Apply(G, Apply(GLDM, Lift s_val)), Lift got_val)) in
       	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, I15, CanFail) Map.empty)))
      else if rel_type = r_aarch64_tlsld_movw_g0_nc then
        (let result = (Minus(Apply(G, Apply(GLDM, Lift s_val)), Lift got_val)) in
       	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, I15, CannotFail) Map.empty)))
      else if rel_type = r_aarch64_tlsld_ld_prel19 then
        (let result = (Minus(Apply(G, Apply(GLDM, Lift s_val)), Lift p_val)) in
       	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, I20, CanFail) Map.empty)))
      else if rel_type = r_aarch64_tlsld_movw_dtprel_g2 then
        (let result = (Apply(DTPRel, Lift(s_val + a_val))) in
       	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, I15, CanFail) Map.empty)))
      else if rel_type = r_aarch64_tlsld_movw_dtprel_g1 then
        (let result = (Apply(DTPRel, Lift(s_val + a_val))) in
       	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, I15, CanFail) Map.empty)))
      else if rel_type = r_aarch64_tlsld_movw_dtprel_g1_nc then
        (let result = (Apply(DTPRel, Lift(s_val + a_val))) in
       	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, I15, CannotFail) Map.empty)))
      else if rel_type = r_aarch64_tlsld_movw_dtprel_g0 then
        (let result = (Apply(DTPRel, Lift(s_val + a_val))) in
       	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, I15, CanFail) Map.empty)))
      else if rel_type = r_aarch64_tlsld_movw_dtprel_g0_nc then
        (let result = (Apply(DTPRel, Lift(s_val + a_val))) in
       	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, I15, CannotFail) Map.empty)))
      else if rel_type = r_aarch64_tlsld_add_dtprel_hi12 then
        (let result = (Apply(DTPRel, Lift(s_val + a_val))) in
       	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, U24, CanFail) Map.empty)))
      else if rel_type = r_aarch64_tlsld_add_dtprel_lo12 then
        (let result = (Apply(DTPRel, Lift(s_val + a_val))) in
       	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, U12, CanFail) Map.empty)))
      else if rel_type = r_aarch64_tlsld_add_dtprel_lo12_nc then
        (let result = (Apply(DTPRel, Lift(s_val + a_val))) in
       	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, U12, CannotFail) Map.empty)))
      else if rel_type = r_aarch64_tlsld_ldst8_dtprel_lo12 then
        (let result = (Apply(DTPRel, Lift(s_val + a_val))) in
       	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, U12, CanFail) Map.empty)))
      else if rel_type = r_aarch64_tlsld_ldst8_dtprel_lo12_nc then
        (let result = (Apply(DTPRel, Lift(s_val + a_val))) in
       	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, U12, CannotFail) Map.empty)))
      else if rel_type = r_aarch64_tlsld_ldst16_dtprel_lo12 then
        (let result = (Apply(DTPRel, Lift(s_val + a_val))) in
       	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, U12, CanFail) Map.empty)))
      else if rel_type = r_aarch64_tlsld_ldst16_dtprel_lo12_nc then
        (let result = (Apply(DTPRel, Lift(s_val + a_val))) in
       	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, U12, CannotFail) Map.empty)))
      else if rel_type = r_aarch64_tlsld_ldst32_dtprel_lo12 then
        (let result = (Apply(DTPRel, Lift(s_val + a_val))) in
       	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, U12, CanFail) Map.empty)))
      else if rel_type = r_aarch64_tlsld_ldst32_dtprel_lo12_nc then
        (let result = (Apply(DTPRel, Lift(s_val + a_val))) in
       	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, U12, CannotFail) Map.empty)))
      else if rel_type = r_aarch64_tlsld_ldst64_dtprel_lo12 then
        (let result = (Apply(DTPRel, Lift(s_val + a_val))) in
       	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, U12, CanFail) Map.empty)))
      else if rel_type = r_aarch64_tlsld_ldst64_dtprel_lo12_nc then
        (let result = (Apply(DTPRel, Lift(s_val + a_val))) in
       	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, U12, CannotFail) Map.empty)))
      else if rel_type = r_aarch64_tlsld_ldst128_dtprel_lo12 then
        (let result = (Apply(DTPRel, Lift(s_val + a_val))) in
       	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, U12, CanFail) Map.empty)))
      else if rel_type = r_aarch64_tlsld_ldst128_dtprel_lo12_nc then
        (let result = (Apply(DTPRel, Lift(s_val + a_val))) in
       	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, U12, CannotFail) Map.empty)))
      else if rel_type = r_aarch64_tlsie_movw_gottprel_g1 then
        (let result = (Minus(Apply(G, Apply(GTPRel, Lift (s_val + a_val))), Lift got_val)) in
       	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, I15, CanFail) Map.empty)))
      else if rel_type = r_aarch64_tlsie_movw_gottprel_g0_nc then
        (let result = (Minus(Apply(G, Apply(GTPRel, Lift (s_val + a_val))), Lift got_val)) in
       	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, I15, CannotFail) Map.empty)))
      else if rel_type = r_aarch64_tlsie_movw_gottprel_page21 then
        (let result = (Minus(Apply(Page, Apply(G, Apply(GTPRel, Lift (s_val + a_val)))), Apply(Page, Lift p_val))) in
       	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, I32, CanFail) Map.empty)))
      else if rel_type = r_aarch64_tlsie_movw_gottprel_lo12_nc then
        (** requires ad hoc check *)
        (let result = (Apply(G, Apply(GTPRel, Lift (s_val + a_val)))) in
       	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, I8, CannotFail) Map.empty)))
      else if rel_type = r_aarch64_tlsie_movw_gottprel_prel19 then
        (let result = (Minus(Apply(G, Apply(GTPRel, Lift (s_val + a_val))), Lift p_val)) in
       	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, I20, CanFail) Map.empty)))
      else if rel_type = r_aarch64_tlsle_movw_tprel_g2 then
      	(let result = (Apply(TPRel, Lift (s_val + a_val))) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, U16, CanFail) Map.empty)))
      else if rel_type = r_aarch64_tlsle_movw_tprel_g1 then
      	(let result = (Apply(TPRel, Lift (s_val + a_val))) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, U16, CanFail) Map.empty)))
      else if rel_type = r_aarch64_tlsle_movw_tprel_g1_nc then
      	(let result = (Apply(TPRel, Lift (s_val + a_val))) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, U16, CannotFail) Map.empty)))
      else if rel_type = r_aarch64_tlsle_movw_tprel_g0 then
      	(let result = (Apply(TPRel, Lift (s_val + a_val))) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, U16, CanFail) Map.empty)))
      else if rel_type = r_aarch64_tlsle_movw_tprel_g0_nc then
      	(let result = (Apply(TPRel, Lift (s_val + a_val))) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, U16, CannotFail) Map.empty)))
      else if rel_type = r_aarch64_add_tprel_hi12 then
      	(let result = (Apply(TPRel, Lift (s_val + a_val))) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, U24, CanFail) Map.empty)))
      else if rel_type = r_aarch64_add_tprel_lo12 then
      	(let result = (Apply(TPRel, Lift (s_val + a_val))) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, U12, CanFail) Map.empty)))
      else if rel_type = r_aarch64_add_tprel_lo12_nc then
      	(let result = (Apply(TPRel, Lift (s_val + a_val))) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, U12, CannotFail) Map.empty)))
      else if rel_type = r_aarch64_ldst8_tprel_lo12 then
      	(let result = (Apply(TPRel, Lift (s_val + a_val))) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, U12, CanFail) Map.empty)))
      else if rel_type = r_aarch64_ldst8_tprel_lo12_nc then
      	(let result = (Apply(TPRel, Lift (s_val + a_val))) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, U12, CannotFail) Map.empty)))
      else if rel_type = r_aarch64_ldst16_tprel_lo12 then
      	(let result = (Apply(TPRel, Lift (s_val + a_val))) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, U12, CanFail) Map.empty)))
      else if rel_type = r_aarch64_ldst16_tprel_lo12_nc then
      	(let result = (Apply(TPRel, Lift (s_val + a_val))) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, U12, CannotFail) Map.empty)))
      else if rel_type = r_aarch64_ldst32_tprel_lo12 then
      	(let result = (Apply(TPRel, Lift (s_val + a_val))) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, U12, CanFail) Map.empty)))
      else if rel_type = r_aarch64_ldst32_tprel_lo12_nc then
      	(let result = (Apply(TPRel, Lift (s_val + a_val))) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, U12, CannotFail) Map.empty)))
      else if rel_type = r_aarch64_ldst64_tprel_lo12 then
      	(let result = (Apply(TPRel, Lift (s_val + a_val))) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, U12, CanFail) Map.empty)))
      else if rel_type = r_aarch64_ldst64_tprel_lo12_nc then
      	(let result = (Apply(TPRel, Lift (s_val + a_val))) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, U12, CannotFail) Map.empty)))
      else if rel_type = r_aarch64_ldst128_tprel_lo12 then
      	(let result = (Apply(TPRel, Lift (s_val + a_val))) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, U12, CanFail) Map.empty)))
      else if rel_type = r_aarch64_ldst128_tprel_lo12_nc then
      	(let result = (Apply(TPRel, Lift (s_val + a_val))) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, U12, CannotFail) Map.empty)))
      else if rel_type = r_aarch64_tlsdesc_ld_prel19 then
        (** requires ad hoc test *)
      	(let result = (Minus(Apply(G, Apply(GTLSDesc, Lift (s_val + a_val))), Lift p_val)) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, I20, CanFail) Map.empty)))
      else if rel_type = r_aarch64_tlsdesc_adr_prel21 then
      	(let result = (Minus (Apply(G, Apply(GTLSDesc, Lift (s_val + a_val))), Lift p_val)) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, I20, CanFail) Map.empty)))
      else if rel_type = r_aarch64_tlsdesc_adr_page21 then
      	(let result = (Minus(Apply(Page, Apply(G, Apply(GTLSDesc, Lift(s_val + a_val)))), Apply(Page, Lift p_val))) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, I32, CanFail) Map.empty)))
      else if rel_type = r_aarch64_tlsdesc_ld64_lo12 then
        (** requires ad hoc test *)
      	(let result = (Apply(G, Apply(GTLSDesc, Lift (s_val + a_val)))) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, I20, CanFail) Map.empty)))
      else if rel_type = r_aarch64_tlsdesc_add_lo12 then
      	(let result = (Apply(G, Apply(GTLSDesc, Lift (s_val + a_val)))) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, I32, CannotFail) Map.empty)))
      else if rel_type = r_aarch64_tlsdesc_off_g1 then
      	(let result = (Minus(Apply(G, Apply(GTLSDesc, Lift (s_val + a_val))), Lift got_val)) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, I32, CanFail) Map.empty)))
      else if rel_type = r_aarch64_tlsdesc_off_g0_nc then
      	(let result = (Minus(Apply(G, Apply(GTLSDesc, Lift (s_val + a_val))), Lift got_val)) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, I32, CannotFail) Map.empty)))
      else if rel_type = r_aarch64_tlsdesc_ldr then
        error_return Map.empty
      else if rel_type = r_aarch64_tlsdesc_add then
        error_return Map.empty
      else if rel_type = r_aarch64_tlsdesc_call then
        error_return Map.empty
      else if rel_type = r_aarch64_copy then
        error_fail (''AARCH64_COPY'')
      else if rel_type = r_aarch64_glob_dat then
      	(let result = (Lift (s_val + a_val)) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, I64, CannotFail) Map.empty)))
      else if rel_type = r_aarch64_jump_slot then
      	(let result = (Lift (s_val + a_val)) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, I64, CannotFail) Map.empty)))
      else if rel_type = r_aarch64_relative then
      	(let result = (Plus(Apply(Delta, Lift s_val), Lift a_val)) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, I64, CannotFail) Map.empty)))
      else if rel_type = r_aarch64_tls_dtprel64 then
      	(let result = (Apply(DTPRel, Lift (s_val + a_val))) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, I64, CannotFail) Map.empty)))
      else if rel_type = r_aarch64_tls_dtpmod64 then
      	(let result = (Apply(LDM, Lift s_val)) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, I64, CannotFail) Map.empty)))
      else if rel_type = r_aarch64_tls_tprel64 then
      	(let result = (Apply(TPRel, Lift (s_val + a_val))) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, I64, CannotFail) Map.empty)))
      else if rel_type = r_aarch64_tlsdesc then
      	(let result = (Apply(TLSDesc, Lift (s_val + a_val))) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, I64, CannotFail) Map.empty)))
      else if rel_type = r_aarch64_irelative then
      	(let result = (Apply(Indirect, Plus (Apply(Delta, Lift s_val), Lift a_val))) in
      	(let addr   = ((elf64_ra_offset   rel)) in
      	error_return (map_update addr (result, I64, CannotFail) Map.empty)))
      else
        error_fail (''Invalid AARCH64 relocation type'')))
  else
  	error_fail (''abi_aarch64_apply_relocation: not a relocatable file''))"

end
